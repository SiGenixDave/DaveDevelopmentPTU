<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Event</name>
    </assembly>
    <members>
        <member name="T:Event.Forms.FormOpenEventLog">
            <summary>
            Display the selected event log files using a <c>DataGridView</c> control.
            </summary>
        </member>
        <member name="T:Event.Forms.FormViewEventLog">
            <summary>
            A form to allow the user to: (1) view and save the selected event log, (2) view the event variables associated with an individual event and (c) call the 
            form that displays the fault log associated with an individual event, if available.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.IntervalDisplayUpdateMs">
            <summary>
            The interval, in ms, between successive display updates. Value: 500 ms.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.InitialLogIndex">
            <summary>
            The index of the initial log that is to be shown. Value: 0.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.DataGridViewEventLogHorizontalBorder">
            <summary>
            The horizontal border associated with the event log <c>DataGridViewControl.</c> Value: 20.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.DefaultMutexWaitDurationMs">
            <summary>
            The default number of ms to wait before releasing the mutex. Value: 2000 ms.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.LengthDayOfWeekString">
            <summary>
            The length of the string used to represent days of the week.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.FormatStringEventTime">
            <summary>
            The format string that is to be used to display the time of the event. Value: "HH:mm:ss".
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.FormatStringDateTime">
            <summary>
            The format string to be used when converting the date/time to the entry in the DateTime column of the <c>DataGridView</c>. control. Value:
            "yyyy/MM/dd HH:mm:ss.ff".
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.KeyClearEvent">
            <summary>
            The key string used to represent the CommunicationEvent.ClearEvent() method. Value: "ClearEvent".
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.KeyInitializeEventLog">
            <summary>
            The key string used to represent the CommunicationEvent.InitializeEventLog() method. Value: "InitializeEventLog".
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.True">
            <summary>
            The text representation associated with a true state. Value: "true".
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.False">
            <summary>
            The text representation associated with a false state. Value: "false".
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.ColumnIndexEventIndex">
            <summary>
            The event index column index. Value: 0;
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.ColumnIndexIdentifier">
            <summary>
            The identifier column index. Value: 1;
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.ColumnIndexCarIdentifier">
            <summary>
            The car identifier column index. Value: 2.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.ColumnIndexLog">
            <summary>
            The log column index. Value: 3.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.ColumnIndexEventName">
            <summary>
            The event name column index. Value: 4.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.ColumnIndexDateTime">
            <summary>
            The DateTime column index. Value: 5.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.ColumnIndexDate">
            <summary>
            The date column index. Value: 6.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.ColumnIndexTime">
            <summary>
            The time column index. Value: 7.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.ColumnIndexDay">
            <summary>
            The day of the week column index. Value: 8.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.ColumnIndexStreamAvailableText">
            <summary>
            The stream available text column index. Value: 9.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.ColumnIndexStreamAvailableImage">
            <summary>
            The stream available image column index. Value: 10.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.HeightEventControl">
            <summary>
            The height, in pixels, of the event variable user control. Value: 22.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.MarginRightDataGridViewControl">
            <summary>
            The right margin to be applied to the <c>DataGridView</c> control. Value: 2.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.MarginLeftEventControl">
            <summary>
            The left margin associated with the event variable user control. Value: 10.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.MarginRightEventControl">
            <summary>
            The right margin associated with the event variable user control. Value: 2.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.MarginTopEventControl">
            <summary>
            The top margin associated with the event variable user control. Value: 1.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.MarginBottomEventControl">
            <summary>
            The bottom margin associated with the event variable user control. Value: 1.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.WidthEventControlVariableNameField">
            <summary>
            The width, in pixels, of the variable name field of the event variable user control. Value: 190.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.WidthEventControlValueField">
            <summary>
            The width, in pixels, of the value field of the event variable user control. Value: 180.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.WidthEventControlUnitsField">
            <summary>
            The width, in pixels, of the units field of the watch variable user control. Value: 100.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_DataGridViewEventLog">
            <summary>
            Reference to the <c>DataGridView</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_PanelDataGridViewEventLog">
            <summary>
            Reference to the <c>Panel</c> control containing the <c>DataGridView</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_PanelEventVariables">
            <summary>
            Reference to the <c>Panel</c> associated with the event variables.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_PanelEventVariableList">
            <summary>
            Reference to the <c>Panel</c> associated with the event variable list.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_PanelEventVariableHeader">
            <summary>
            Reference to the <c>Panel</c> associated with the event variable header.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_LegendEventVariables">
            <summary>
            Reference to the <c>Label</c> associated with the event variable header.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.WatchdogTripCountdown">
            <summary>
            The countdown value associated the watchdog trip. Value: 10.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_MutexDataGridView">
            <summary>
            Mutex to control read/write access to the <c>DataGridView</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_MutexEventCount">
            <summary>
            Mutex to control read/write access to the <c>EventCount</c> property.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_MutexEventIndex">
            <summary>
            Mutex to control read/write access to the <c>EventIndex</c> property.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_EventVariableControlSize">
            <summary>
            Reference to the structure that defines the size of the event variable user controls.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_DataGridViewEventLogSize">
            <summary>
            Reference to the structure that defines the size of the <c>DataGridView</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_EventRecordList">
            <summary>
            The list of the event records retrieved from the VCU.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_CommonEventVariableCount">
            <summary>
            The number of common event variables associated with each event. These are the event variables contained within the STRUCT generic list corresponding to 
            structure identifier 0, less those event variables defined as header event variables.  
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_Log">
            <summary>
            The selected event log.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_EventLogSavedStatus">
            <summary>
            The saved status of the event logs. 
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_TimerDisplayUpdate">
            <summary>
            The System.Windows.Forms timer used to manage the display update.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_EventCount">
            <summary>
            The number of events in the current event log.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_NewEventIndex">
            <summary>
            The event index of the newest entry in the event log.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_OldEventIndex">
            <summary>
            The event index of the oldest entry in the event log.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_DataStream">
            <summary>
            Reference to the latest data stream downloaded from the VCU.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_ThreadPollEvent">
            <summary>
            Reference to the class that is responsible for polling the VCU for new events.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_PacketCount">
            <summary>
            A record of the packet count. Used to determine if polling is active so that the packet received icon can be blinked in a thread-safe way.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_Watchdog">
            <summary>
            A record of the watchdog count. Used to determine if the thread on which the polling is carried out has locked.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_WatchdogTrip">
            <summary>
            A flag that indicates whether a watchdog trip has occurred.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_WatchdogTripCountdown">
            <summary>
            The countdown to the watchdog trip.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_CommunicationFault">
            <summary>
            A flag that indicates whether a communication fault has been detected.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_Pause">
            <summary>
            A flag to control the display update. True, stops the display update i.e pauses the display; false, re-starts the display update.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewEventLog.m_CommunicationInterface">
            <summary>
            Reference to the selected communication interface.
            </summary>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.#ctor(Common.Communication.ICommunicationParent,Common.IMainWindow)">
            <summary>
            Initializes a new instance of the class. Initializes: (1) the communication interface, (2) the size of each control, (3) the 
            function keys, (4) the <c>ComboBox</c> control (5) the display update timer and (6) the title. 
            </summary>
            <param name="communicationInterface">Reference to the communicaton interface that is to be used to communicate with the VCU.</param>
            <param name="mainWindow">Reference to the main window.</param>
            <remarks>The IMainWindow reference must be passed in the constructor as some of its properties must be accessed in the constructor and the normal method
            where it is defined prior to the form being show is not suitable.</remarks>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.FormViewEventLog_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the form <c>Shown</c> event. Set the size of the GroupBox controls.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.FormPTU_Resize(System.Object,System.EventArgs)">
            <summary>
            Event handler for the form <c>ResizeEnd</c> event. Re-draw the <c>DataGridView</c> control.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.Escape_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the escape key <c>Click</c> event. Close the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.F1_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F1-Enumeration' button <c>Click</c> event. Toggles the flag that controls whether the enumerator variables are to have their values
            displayed as the enumerated text value or the actual numeric value. True, displays the value as enumerated text; false, displays the values as numeric data. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.F2_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F2-Print' button <c>Click</c> event. Capture the window and save the image to the specified file.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.F3_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F3-Save' function key <c>Click</c> event. Saves the event records to disk in XML format.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.F4_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F4-Clear' button <c>Click</c> event. Clear all events/faults contained in the active event log. This also erases any data logs 
            associated with the event log.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.F5_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F5-Initialize' button <c>Click</c> event. Clear all event information stored on battery backed RAM for both the maintenance and 
            engineering logs. This also clears both the cumulative history and recent history columns. This function is typically used to establish a zero event/fault 
            reference base when a replacement VCU is installed in a car.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.F6_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F6-Flags' button <c>Click</c> event. Show the dialog box which allows the user to configure the event flags associated with the 
            current event log. This allows the user to define which event types are enabled and which will trigger the recording of a fault log.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.F7_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F7-History' button <c>Click</c> event. Show the dialog box which displays the event history.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.F8_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F8-Setup Stream' button <c>Click</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.m_ToolStripComboBox1_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>ToolStripComboBox</c> control <c>SelectedIndexChanged</c> event. Download and display the selected event log.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.m_MenuItemShowFaultLog_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Click</c> event associated with the 'Show Fault Log' context menu. Displays the fault log associated with the selected event if 
            it is available.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.m_MenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Click</c> event associated with the 'Show Definition' context menu. Show the help information associated with the event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.DisplayUpdate(System.Object,System.EventArgs)">
            <summary>
            Called periodically by the System.Windows.Forms.Timer event. Update the event display. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.m_DataGridViewEventLog_SortCompare(System.Object,System.Windows.Forms.DataGridViewSortCompareEventArgs)">
            <summary>
            <para>Event handler for the <c>DataGridView</c> control <c>SortCompare</c> event.</para>
            <para>As part of the overall sort process, this event handler is called whenever a comparison is made between successive rows of the <c>DataGridView</c>
            control. The final sort order is determined by: (a) the value passed to the SortResult property of the <c>DataGridViewSortCompareEventArgs</c> when the 
            two rows, e.RowIndex1 and e.RowIndex2, are compared, and (b) the <c>ListSortDirection</c> property.</para>
            <para>The sort direction of the CarIdentifier, LogName and EventName fields is in the opposite direction to that of the DateTime field and the EventIndex
            field; the sort precedence is shown below, where [] is used to identify the key sort field.</para>
            <para>[DateTime], EventIndex, CarIdentifier, LogName, EventName.</para>
            <para>[CarIdentifier], DateTime, EventIndex, LogName, EventName.</para>
            <para>[LogName], DateTime, EventIndex, CarIdentifier, EventName.</para>
            <para>[EventName], DateTime, EventIndex, CarId, LogName.</para>
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.m_DataGridViewEventLog_Sorted(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>DataGridView</c> control <c>Sorted</c> event. Write the current sort order to the status message display.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.m_DataGridViewEventLog_SelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler fo the <c>SelectionChanged</c> event associated with the <c>DataGridView</c> control. Display the event variables associated with the selected 
            event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.m_DataGridViewEventLog_CellContentDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Event handler for the <c>CellContentDoubleClick</c> event associated with the event log <c>DataGridView</c> control. Depending upon which column has been 
            selected either: (1) retrieve and display the fault log data stream associated with the selected event or (2) show the event definition.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.SecurityChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>MainWindow.MenuUpdated</c> event. Updates the Enabled property of those function keys that are Security dependent.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.Exit">
            <summary>
            Close the form cleanly. Simulates the user pressing the Exit button.
            </summary>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.GetEventLog(Common.Configuration.Log)">
            <summary>
            Retrieve the specified event log from the VCU: (1) Change the event log to the specified log, (2) load the event log into memory, (3) retrieve each
            event record from the log and add the event to the list (4) sort the event record list in descending date/time order i.e. most recent event first.
            </summary>
            <remarks>This method does not retrieve the event variables associated with each event.</remarks>
            <param name="log">The selected event log.</param>
            <returns>The list of event records contained within the specified event log.</returns>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.GetEventLog(Common.Configuration.Log,System.Boolean@)">
            <summary>
            Retrieve the specified event log from the VCU: (1) Change the event log to the specified log, (2) load the event log into memory, (3) retrieve each
            event record from the log and add the event to the list (4) sort the event record list in descending date/time order i.e. most recent event first.
            </summary>
            <remarks>This method does not retrieve the event variables associated with each event.</remarks>
            <param name="log">The selected event log.</param>
            <param name="communicationException">A flag to indicate whether a communication exception was thrown. True, if a communication exception was thrown;
            otherwise, false. </param>
            <returns>The list of event records contained within the specified event log.</returns>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.AddList(System.Collections.Generic.List{Common.Configuration.EventRecord},System.UInt32)">
            <summary>
            Add the specified records to the <c>DataGridView</c> control. If the specified list does not contain any records no action will be taken.
            </summary>
            <remarks>De-registers the <c>SelectionChanged</c> event handler while the rows are being added.</remarks>
            <param name="eventRecordList">The list of <c>EventRecord</c> types.</param>
            <param name="eventsToRemove">The number of events that are to be removed from the <c>>DataGridView</c> control.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.Convert(Common.Configuration.EventRecord)">
            <summary>
            Convert the specified event record to a <c>DataGridViewRow</c> so that it may be added to the <c>DataGridView</c> control used to display the events.
            </summary>
            <param name="eventRecord">The event record that is to be converted.</param>
            <returns>The specified event record converted to a <c>DataGridViewRow</c>.</returns>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.ShowFaultLog(Common.Configuration.EventRecord)">
            <summary>
            If a fault log data stream has been saved for the selected event record, retrieve the fault log from the VCU and call the form used to plot the fault log.
            </summary>
            <param name="eventRecord">The selected event record.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.ConfigureControls(System.Windows.Forms.Panel,Common.UserControls.VariableControlSize_t,System.Int16,System.Collections.Generic.List{Common.Configuration.EventVariable})">
            <summary>
            Configure the specified event variable user controls. The individual controls are laid out on the panel similar to rows on a DataGridView control. The 
            first entry in the list, eventVariableList[0], is positioned at row 0, the second at row 1 etc. To configure all event variables defined in the list specify 
            a start index of zero, however, to configure only the event specific event variables specify a start index corresponding to index of the event variable 
            list where the specific event variables start. Note, the user controls correponding to the event variables that are specific to the event will be 
            positioned starting at the row corresponding to the start index value.
            </summary>
            <param name="panel">The panel to which the event controls are to be added.</param>
            <param name="eventControlSize">The structure that is used to define the size of each event variable user control.</param>
            <param name="startIndex">The start index in the list of event variables associated with the first event variable that is to be displayed.</param>
            <param name="eventVariableList">A list of the event variables that are to be displayed.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.DisplayEventVariableList(Common.Configuration.EventRecord)">
            <summary>
            Display the event variable data corresponding to the selected event record.
            </summary>
            <param name="selectedEventRecord">The event record containing the event variables that are to be displayed.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.FindEventRecord(System.Windows.Forms.DataGridViewRow,System.Collections.Generic.List{Common.Configuration.EventRecord})">
            <summary>
            Find the event record from the specified <c>List</c> that matches, exactly, the specified row of the <c>DataGridView</c>. If no match is found, a null
            value is returned.
            </summary>
            <param name="dataGridViewRow">The <c>DataGridViewRow</c> that is to be matched.</param>
            <param name="eventRecordList">The list of event records.</param>
            <returns>The event record that matches the specified row of the <c>DataGridView, if a match is found; otherwise, null.</c>.</returns>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.SortBy(System.Windows.Forms.DataGridViewSortCompareEventArgs,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sort the <c>DataGridView</c> rows by the specified key field in the order defined by the <c>ListSortDirection</c> property. This signature is
            used if the LogName column of the <c>DataGridView</c> is visible.</para>
            <para>The sort order is as follows:</para>
            <para>[fieldIndexKey] sorted by <c>ListSortDirection</c>,</para>
            <para>[date/time] sorted by !<c>ListSortDirection</c>,</para>
            <para>[fieldIndex1] sorted by <c>ListSortDirection</c>,</para>
            <para>[fieldIndex2] sorted by <c>ListSortDirection</c>.</para>
            <para>The date/time field is always sorted in the opposite direction to the key field. Where the key field values are equal for both rows, the most
            recent event will be displayed first if the <c>ListSortDirection</c> is defined as <c>Ascending</c> and the oldest event will be displayed first if the
            <c>ListSortDirection</c> is defined as <c>Descending</c>.</para>
            <para>Where both the key field and the date/time field values are equal, the rows will be sorted by the field corresponding to the fieldIndex1 
            parameter followed by the field corresponding to the fieldIndex2 parameter.</para>
            </summary>
            <remarks>The fields defined by the parameters cannot include the date/time field of the <c>DataGridView</c> control.</remarks>
            <param name="e">The event argument passed to the event handler corresponding to the <c>SortCompare</c> event.</param>
            <param name="fieldIndexKey">The field index corresponding to the key sort field.</param>
            <param name="fieldIndex1">The field index corresponding to the primary backup sort field in case both the key field and the date/time field values are
            equal.</param>
            <param name="fieldIndex2">The field index corresponding to the secondary backup sort field in case the key field, date/time field and fieldIndex1 field
            values are equal.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.SortBy(System.Windows.Forms.DataGridViewSortCompareEventArgs,System.Int32,System.Int32)">
            <summary>
            <para>Sort the <c>DataGridView</c> rows by the specified key field in the order defined by the <c>ListSortDirection</c> property.</para>
            <para>The sort order is as follows:</para>
            <para>[fieldIndexKey] sorted by <c>ListSortDirection</c>,</para>
            <para>[date/time] sorted by !<c>ListSortDirection</c>,</para>
            <para>[fieldIndex1] sorted by <c>ListSortDirection</c>,</para>
            <para>The date/time field is always sorted in the opposite direction to the key field. Where the key field values are equal for both rows, the most
            recent event will be displayed first if the <c>ListSortDirection</c> is defined as <c>Ascending</c> and the oldest event will be displayed first if the
            <c>ListSortDirection</c> is defined as <c>Descending</c>.</para>
            <para>Where both the key field and the date/time field values are equal the rows will be sorted by the field corresponding to the fieldIndex1 
            parameter.</para>
            </summary>
            <remarks>The fields defined by the parameters cannot include the date/time field of the <c>DataGridView</c> control.</remarks>
            <param name="e">The event argument passed to the event handler corresponding to the <c>SortCompare</c> event.</param>
            <param name="fieldIndexKey">The field index corresponding to the key sort field.</param>
            <param name="fieldIndex1">The field index corresponding to the primary backup sort field in case both the key field and the date/time field values are
            equal.</param>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.CompareByDateTimeDescending(Common.Configuration.EventRecord,Common.Configuration.EventRecord)">
            <summary>
            <para>This is a comparison delegate for the List.Sort() method and is used to sort the list of event records into date/time order, most recent
            event first, i.e. in date/time descending order. If the date/time fields of a number of event records in the list are equal, the records are sorted
            by event index, in descending order, in order to determine the sequence of events. Although it is highly improbable that both the date/time field and the
            event index of two records are equal, if this does occur, the records are sorted by: car identifier, log name (if visible) and event description, in ascending
            order.</para>
            <para>The method compares two <c>EventRecord</c> types and returns an integer that determines their relative positions in the required sort order of
            the list.</para>
            </summary>
            <remarks>string A - first alphabetically, string B - second alphabetically. String.Compare(A, B): -1, String.Compare(B, A): 1, String.Compare(A, A): 0.
            </remarks>
            <param name="eventRecordA">The first event record that is to be compared.</param>
            <param name="eventRecordB">The second event record that is to be compared.</param>
            <returns>If eventRecordA is deemed to be higher in the required sort order, i.e. further down the list, than eventRecordB, a value of 1 is returned, if both
            records are equal a value of 0 is returned and if eventRecordA is deemed lower in the required sort order, i.e. higher up the list, a value of -1 is
            returned.</returns>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.Save">
            <summary>
            Ask the user to specify the filename where the events are to be saved and call the SaveAll() method to save ALL events and associated data streams to disk. 
            If the specified file already exists the current events are appended to the existing data.
            </summary>
            <remarks>Polling for new events must be suspended before making a call to this method.</remarks>
            <returns>A flag to indicate whether the user cancelled the operation. True, indicates that the operation was cancelled by the user; otherwise, false.
            </returns>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.SaveAll(Common.EventLogFile_t@,System.String)">
            <summary>
            Save the events associated with all event logs to the specified event log file structure, serialize this to the specified file in XML format and save 
            the associated data streams to disk using their default filenames.
            </summary>
            <remarks>Polling for new events must be suspended before making a call to this method.</remarks>
            <param name="eventLogFile">The event log file structure where the event records are to be saved.</param>
            <param name="fullFilename">The fully qualified filename of the file.</param>
            <returns>A flag to indicate whether the user cancelled the operation. True, indicates that the operation was cancelled by the user; otherwise, false.
            </returns>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.SaveDataStreams(Common.Communication.ICommunicationEvent,Common.Header_t,Common.Configuration.Log,System.Collections.Generic.List{Common.Configuration.EventRecord})">
            <summary>
            Save all available data streams associated with the specified event log to disk.
            </summary>
            <remarks>Polling for new events must be suspended before making a call to this method.</remarks>
            <param name="communicationInterface">Reference to the communicaton interface that is to be used to communicate with the VCU.</param>
            <param name="header">The header associated with each file.</param>
            <param name="log">The log for which the data streams are to be saved.</param>
            <param name="eventRecordList">The list of event records associated with the log.</param>
            <returns>A flag to indicate whether the user cancelled the operation. True, indicates that the operation was cancelled by the user; otherwise, false.
            </returns>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.CheckForAppend(System.String,System.DateTime@,Common.Header_t@,Common.EventLogFile_t@)">
            <summary>
            Check whether the user has selected an existing file and, if so, ask the user whether the data is to be appended to the existing data or the file is 
            to be over-written. If the data is to be appended to the existing data, load the existing data into the event log file structure.
            </summary>
            <param name="fullFilename">The fully qualified filename of the selected file.</param>
            <param name="createdTime">The date and time reference that is to be used for the creation date of the file.</param>
            <param name="header">The header information that is to be used when saving the file.</param>
            <param name="savedEventLogFile"></param>
            <returns>A flag to indicate whether the user cancelled the operation. True, indicates that the operation was cancelled by the user; otherwise, false.
            </returns>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.ClearOrInitialize(Event.Forms.FormViewEventLog.ZeroParameterDelegate)">
            <summary>
            Clear or initialize all event logs depending upon which function delegate is used.
            </summary>
            <param name="function">A delegate for the function that is to be called. This will be a delegate for the function to clear the event logs or a delegate for 
            the function to reset the event logs.</param>
            <remarks>Polling for new events must be suspended before making a call to this method.</remarks>
            <returns>A flag to indicate whether the user cancelled the operation. True, indicates that the operation was cancelled by the user; otherwise, false.
            </returns>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.ClearEventMemory">
            <summary>
            Clear the event log memory contained within the 'PTUDLL32' dynamic link library.
            </summary>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.ClearDataGridViewRows">
            <summary>
            Clear the rows of the <c>DataGridView</c> control.
            </summary>
            <remarks>De-registers the <c>SelectionChanged</c> event handler while the rows are being cleared.</remarks>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.ClearControls">
            <summary>
            Clear the event log related controls.
            </summary>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.StartPolling">
            <summary>
            Start polling the target hardware for new events. If polling is already underway, no action ill be taken.
            </summary>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.StopPolling">
            <summary>
            Stop polling the target hardware. If polling has already been suspended, no action will be taken. 
            </summary>
            <remarks>Ignores the request if the class used to poll the target hardware is null.</remarks>
        </member>
        <member name="M:Event.Forms.FormViewEventLog.SetPauseAndWait(System.Int32)">
            <summary>
            Set the Pause property and wait until the feedback signal is received or until the timeout has elapsed.
            </summary>
            <param name="timeoutMs">The timeout period, in ms.</param>
            <returns>A flag to indicate whether the pause feedback signal was asserted within the specified timeout. True, if the pause feedback signal was asserted 
            within the specified timeout; otherwise, false.</returns>
        </member>
        <member name="P:Event.Forms.FormViewEventLog.Pause">
            <summary>
            Gets or sets the flag that controls the polling of the target hardware. True, inhibits polling of the target hardware; otherwise, false, resumes polling.
            </summary>
        </member>
        <member name="P:Event.Forms.FormViewEventLog.PauseFeedback">
            <summary>
            Gets the feedback flag that indicates whether polling of the target hardware has been suspended.  
            </summary>
            <remarks>This flag is asserted when the <c>ThreadPollWatch</c> class has entered the pause state, i.e. the current communication request is complete and 
            no further requests will be issued until the pause property has been cleared.</remarks>
        </member>
        <member name="P:Event.Forms.FormViewEventLog.CommunicationInterface">
            <summary>
            Gets or sets the communication interface that is to be used to communicate with the VCU.
            </summary>
        </member>
        <member name="P:Event.Forms.FormViewEventLog.EventRecordList">
            <summary>
            Gets the list of the event records retrieved from the VCU.
            </summary>
        </member>
        <member name="P:Event.Forms.FormViewEventLog.EventCount">
            <summary>
            Gets or sets the number of events in the current event log.
            </summary>
        </member>
        <member name="P:Event.Forms.FormViewEventLog.NewEventIndex">
            <summary>
            Gets or sets the event index of the newest entry in the event log.
            </summary>
        </member>
        <member name="P:Event.Forms.FormViewEventLog.OldEventIndex">
            <summary>
            Gets or sets the event index of the oldest entry in the event log.
            </summary>
        </member>
        <member name="P:Event.Forms.FormViewEventLog.Log">
            <summary>
            Gets the selected event log.
            </summary>
        </member>
        <member name="P:Event.Forms.FormViewEventLog.DataStreamCurrent">
            <summary>
            Gets or sets the reference to the latest data stream downloaded from the VCU.
            </summary>
        </member>
        <member name="T:Event.Forms.FormViewEventLog.ZeroParameterDelegate">
            <summary>
            A delegate for a method that takes no parameters and does not return a value.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Event.Forms.FormOpenEventLog.WidthEventControlVariableNameField">
            <summary>
            The width, in pixels, of the variable name field of the event variable user control. Value: 160.
            </summary>
        </member>
        <member name="F:Event.Forms.FormOpenEventLog.WidthEventControlValueField">
            <summary>
            The width, in pixels, of the value field of the event variable user control. Value: 140.
            </summary>
        </member>
        <member name="F:Event.Forms.FormOpenEventLog.WidthLogColumn">
            <summary>
            The width, in pixels, of the '[Log]' column of the <c>DataGridView</c> control. Value: 110.
            </summary>
        </member>
        <member name="F:Event.Forms.FormOpenEventLog.WidthEventNameColumn">
            <summary>
            The width, in pixels, of the '[Event Name]' column of the <c>DataGridView</c> control. Value: 180.
            </summary>
        </member>
        <member name="F:Event.Forms.FormOpenEventLog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Event.Forms.FormOpenEventLog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Event.Forms.FormOpenEventLog.m_EventLogFile">
            <summary>
            The event log data.
            </summary>
        </member>
        <member name="M:Event.Forms.FormOpenEventLog.SaveEventLogFile">
            <summary>
            Save the event log data to disk.
            </summary>
        </member>
        <member name="M:Event.Forms.FormOpenEventLog.#ctor">
            <summary>
            Initialize a new instance of the class. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Event.Forms.FormOpenEventLog.#ctor(Common.EventLogFile_t)">
            <summary>
            Initialize a new instance of the class. Intialize the size of the various components, set-up the function keys and initialize the list of event records.
            </summary>
        </member>
        <member name="M:Event.Forms.FormOpenEventLog.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Event.Forms.FormOpenEventLog.FormOpenEventLog_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the form <c>Shown</c> event. Add the records contained in the specified file to the DataGridView control and show the number of events 
            saved in the list.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormOpenEventLog.F3_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the F3 function key. Save the current events to disk.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormOpenEventLog.F4_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for F4 function key. Load additional saved event logs.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormOpenEventLog.F12_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for F12 function key. Shows the form which displays the file header information.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormOpenEventLog.AddList(System.Collections.Generic.List{Common.Configuration.EventRecord})">
            <summary>
            Add the specified records to the <c>DataGridView</c> control. If the specified list does not contain any records no action will be taken.
            </summary>
            <remarks>De-registers the <c>SelectionChanged</c> event handler while the rows are being added.</remarks>
        </member>
        <member name="M:Event.Forms.FormOpenEventLog.ShowFaultLog(Common.Configuration.EventRecord)">
            <summary>
            If a fault log data stream has been saved for the selected event record, retrieve the fault log from disk and call the form used to plot the fault log.
            </summary>
            <param name="selectedEventRecord">The selected event record.</param>
        </member>
        <member name="P:Event.Forms.FormOpenEventLog.EventLogFile">
            <summary>
            Gets or sets the event log data.
            </summary>
        </member>
        <member name="T:Event.Forms.AddListDelegate">
            <summary>
            A delegate for a method that has generic list of event records as an input parameter and does not return a value.
            </summary>
            <param name="eventRecordList">The list of <c>EventRecord</c> types.</param>
            <param name="eventsToRemove">The number of events that are to be removed from the <c>>DataGridView</c> control.</param>
        </member>
        <member name="T:Event.Forms.FormOpenFaultLog">
            <summary>
            Form to plot the historic data associated with a saved fault log.
            </summary>
        </member>
        <member name="F:Event.Forms.FormOpenFaultLog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Event.Forms.FormOpenFaultLog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Event.Forms.FormOpenFaultLog.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Event.Forms.FormOpenFaultLog.#ctor(Common.WatchFile_t)">
            <summary>
            Initializes a new instance of the class. Initialize: (1) Any additional function keys or information labels that are required; (2) the <c>Form</c> and 
            <c>TabPage</c> titles; (3) the time axis and (4) the information label values.
            </summary>
            <param name="watchFile">The structure containing the fault log data that is to be plotted.</param>
        </member>
        <member name="M:Event.Forms.FormOpenFaultLog.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Event.Forms.FormOpenFaultLog.FormDataStreamPlot_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the form <c>Shown</c> event.  Before calling the <c>Shown</c> event handler associated with the parent form, check whether this form was 
            called from the form used to display the event log and, if so, modify the image and text associated with the escape key as if this is the case, pressing 
            this key should return the user to the event log form rather than home.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormOpenFaultLog.InitializePlotterRangeSelection(System.DateTime)">
            <summary>
            Initialize the <see cref="T:CodeProject.GraphComponents.PlotterRangeSelection"/> structure using the watch variable data loaded into the <see cref="T:Common.HistoricDataManager"/> class. 
            If the data to be displayed is not a fault log or a simulated fault log, <paramref name="tripTime"/> will be ignored.
            </summary>
            <param name="tripTime">The time of the trip if the data represents a fault log or a simulated fault log; otherwise DateTime.Now.</param>
        </member>
        <member name="M:Event.Forms.FormOpenFaultLog.SetTripTime(System.Windows.Forms.TabControl,System.DateTime)">
            <summary>
            Set the TripTime property of the plotter controls associated with the specified <c>TabControl</c>.
            </summary>
            <param name="tabControl">The <c>TabControl</c> that is to be processed.</param>
            <param name="tripTime">The time of the trip that initiated the log.</param>
        </member>
        <member name="T:Event.Forms.FormViewFaultLog">
            <summary>
            Form to plot the historic data associated with a downloaded fault log.
            </summary>
        </member>
        <member name="F:Event.Forms.FormViewFaultLog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Event.Forms.FormViewFaultLog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Event.Forms.FormViewFaultLog.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Event.Forms.FormViewFaultLog.#ctor(Common.WatchFile_t)">
            <summary>
            Initializes a new instance of the class. Initialize: (1) Any additional function keys or information labels that are required; (2) the <c>Form</c> and 
            <c>TabPage</c> titles; (3) the time axis and (4) the information label values.
            </summary>
            <param name="watchFile">The structure containing the fault log data that is to be plotted.</param>
        </member>
        <member name="M:Event.Forms.FormViewFaultLog.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Event.Forms.FormViewFaultLog.FormDataStreamPlot_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the form <c>Shown</c> event.  Before calling the <c>Shown</c> event handler associated with the parent form, check whether this form was 
            called from the form used to display the event log and, if so, modify the image and text associated with the escape key as if this is the case, pressing 
            this key should return the user to the event log form rather than home.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewFaultLog.F3_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the F3 <c>Click</c> event. Save the fault log to disk.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormViewFaultLog.InitializePlotterRangeSelection(System.DateTime)">
            <summary>
            Initialize the <see cref="T:CodeProject.GraphComponents.PlotterRangeSelection"/> structure using the watch variable data loaded into the <see cref="T:Common.HistoricDataManager"/> class. 
            If the data to be displayed is not a fault log or a simulated fault log, <paramref name="tripTime"/> will be ignored.
            </summary>
            <param name="tripTime">The time of the trip if the data represents a fault log or a simulated fault log; otherwise DateTime.Now.</param>
        </member>
        <member name="M:Event.Forms.FormViewFaultLog.SetTripTime(System.Windows.Forms.TabControl,System.DateTime)">
            <summary>
            Set the TripTime property of the plotter controls associated with the specified <c>TabControl</c>.
            </summary>
            <param name="tabControl">The <c>TabControl</c> that is to be processed.</param>
            <param name="tripTime">The time of the trip that initiated the log.</param>
        </member>
        <member name="T:Event.Communication.CommunicationEventOffline">
            <summary>
            Class to simulate communication with the target hardware with respect to the event sub-system.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.CultureEnglishUS">
            <summary>
            The <c>CultureInfo</c> string used to represent - english (US). Value: "en-US";
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.VCUDataStreamColumnCountMax">
            <summary>
            The maximum number of columns in a workset generated from the parameters of a datastream retrieved from the VCU.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.SleepMsVerisimilitude">
            <summary>
            The sleep interval, in ms, to simulate real time delays for standard event log operations. Value: 250 ms.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.SleepMsVerisimilitudeGetRecord">
            <summary>
            The sleep interval, in ms, to simulate real time delays in retrieving the event record and event variable information. Value: 0 ms.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.SleepMsVerisimilitudeGetFaultHistory">
            <summary>
            The sleep interval, in ms, to simulate real time delays in retrieving the fault history information. Value: 2,250 ms.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.SleepMsVerisimilitudeGetStream">
            <summary>
            The sleep interval, in ms, to simulate real time delays in retrieving the data stream. Value: 3,000 ms.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.SleepMsVerisimilitudeStreamInformation">
            <summary>
            The sleep interval, in ms, to simulate real time delays in geting and setting the stream information. Value: 2,000 ms.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.SampleIntervalMsFaultLog">
            <summary>
            The sample interval, in ms, for a standard fault log. Value: 30 ms.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.SampleCountFaultLog">
            <summary>
            The number of data samples in a standard fault log. Value: 167.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.ConversionTripIndexToSampleCount">
            <summary>
            The conversion factor to convert the trip index to the sample count.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.WatchVariableCountFaultLog">
            <summary>
            The number of watch variables defined in a standard fault log. Value: 16.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.MaxTasks">
            <summary>
            The maximum number of tasks associated with the project. Value: 16.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.MaxEventsPerTasks">
            <summary>
            The maximum number of events that can be handled per task. Value: 80.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.SampleMultiple">
            <summary>
            The sample multiple of the log i.e. the multiple of the base sampling rate at which the data is to be sampled. Value: 1.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.m_Workset">
            <summary>
            The workset that is to be used to simulate the fault log parameters and data stream.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEventOffline.m_SampleCountFaultLog">
            <summary>
            The sample count of all fault logs associated with the current event log.
            </summary>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.#ctor(Common.Communication.ICommunicationParent)">
            <summary>
            Initialize a new instance of the class and set the properties and member variables to those values associated with the specified communication interface.
            </summary>
            <param name="communicationInterface">Reference to the communication interface containing the properties and member variables that are to be used to
            initialize the class.</param>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.ChangeEventLog(Common.Configuration.Log)">
            <summary>
            Change the current event log on the VCU to the specified log and initialize the: DataRecordingRate, ChangeStatus, MaxTasks and MaxEventsPerTask properties
            of the log structure with the values returned from the VCU.
            </summary>
            <param name="log">The required event log.</param>
            <remarks>The identifier field of the specified log must be initialized prior to calling this method. Note: The call to the ChangeEventLog() method in
            PTUDLL32.dll refers to the eventLogIndex, whereas the log structure uses the log identifier. The event log index is zero based and is equivalent
            to the event log identifier - 1.</remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.ChangeEventLog() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.LoadEventLog(System.Int16@,System.UInt32@,System.UInt32@)">
            <summary>
            Load the current event log into memory.
            </summary>
            <param name="eventCount">The number of events that have been loaded into memory.</param>
            <param name="oldIndex">The old event index.</param>
            <param name="newIndex">The new event index.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.LoadFaultlog() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.GetEventRecord(Common.Configuration.Log,System.Int16,Common.Configuration.EventRecord@)">
            <summary>
            Get the event record, including the event variable values, corresponding to the specified event index for the event log that is currently loaded into memory.
            </summary>
            <param name="currentEventLog">The event log that has been loaded into memory using the LoadEventLog() method.</param>
            <param name="eventIndex">The event index of the required event record.</param>
            <param name="eventRecord">The event record corresponding to the specified event index.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFaultHdr() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.FreeEventLogMemory">
            <summary>
            Clear the event log memory.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.FreeEventLogMemory() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.GetEventLogIndex(System.Int16@,System.Int16@)">
            <summary>
            Get the index of the event log that is currently loaded into memory.
            </summary>
            <remarks>This method is not used.</remarks>
            <param name="eventLogIndex">The index of the event log that is currently loaded into memory.</param>
            <param name="eventLogCount">The number of event logs supported by the VCU.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetEventLog() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.GetFaultVar(System.Int16,System.Int16,System.Int16[],System.Double[]@)">
            <summary>
            Retrieve the event variables associated with the specified event.
            </summary>
            <remarks>The number of events consist of the event variables that are collected for every event plus the event specific variables. The event variables that
            are collected for each event consist of those event variables associated with the structure identifier value of 0 less those defined as event header variables.</remarks>
            <param name="eventIndex">The index of the event.</param>
            <param name="eventVariableCount">The number of event variable that are to be retrieved.</param>
            <param name="dataTypes">The data types associated with each of the variables.</param>
            <param name="values">The event variable values associated with each event.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFaultVar() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.InitializeEventLog">
            <summary>
            Initialize the event log. Clears all event information stored on battery backed RAM for both the maintenance and engineering logs. This also clears
            both the cumulative history, recent history columns and all data logs. This function is typically used to establish a zero event/fault reference base when a replacement
            VCU is installed in a car.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.InitializeEventLog() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.ClearEvent">
            <summary>
            Clear the current event log. Remove all events contained in the active event log.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.ClearEvent() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.ExitEventLog">
            <summary>
            Exit the event sub-system.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.ExitEventLog() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.GetDefaultStreamInformation(System.Int16@,System.Int16@,System.Int16@,System.Int16[]@,System.Int16[]@)">
            <summary>
            Get the parameters associated with the default stream.
            </summary>
            <param name="watchVariableCount">The number of watch variables included in the data stream.</param>
            <param name="sampleCount">The number of data samples associated with the data stream.</param>
            <param name="sampleMultiple">The multiple of the base recording interval (60ms) at which the data is sampled.</param>
            <param name="watchIdentifiers">The watch identifiers of the watch variables contained within the data stream.</param>
            <param name="dataTypes">The data types corresponding to each of the watch variables contained within the data stream.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetDefaultStreamInformation() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.GetStreamInformation(System.Int16,System.Int16@,System.Int16@,System.Int16@,System.Int16[]@,System.Int16[]@)">
            <summary>
            Get the parameters associated with the specified stream.
            </summary>
            <param name="streamNumber">The stream number.</param>
            <param name="watchVariableCount">The number of watch variables included in the data stream.</param>
            <param name="sampleCount">The number of data samples associated with the data stream.</param>
            <param name="sampleMultiple">The multiple of the base recording interval (60ms) at which the data is sampled.</param>
            <param name="watchIdentifiers">The watch identifiers of the watch variables contained within the data stream.</param>
            <param name="dataTypes">The data type corresponding to each watch variable contained within the data stream.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetStreamInformation() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.GetStream(Common.Configuration.EventRecord)">
            <summary>
            Get the fault log/snapshot log data stream corresponding to the specified record.
            </summary>
            <param name="eventRecord">The event record associated with the data stream that is to be downloaded.</param>
            <returns>The data stream corresponding to the specified event record.</returns>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the calls to the PTUDLL32.GetStreamInformation() or PTUDLL32Event.GetStream()
            methods is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.SetDefaultStreamInformation(System.Int16,System.Collections.Generic.List{System.Int16})">
            <summary>
            Set the default stream parameters.
            </summary>
            <param name="sampleMultiple">The sample multiple of the recording interval at which the data is to be recorded.</param>
            <param name="oldIdentifierList">The list of old identifiers associated with the watch variables that are to be recorded in the fault log, in the
            order in which they are to appear.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.SetDefaultStreamInformation() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.CheckFaultLogger(System.Int16@,System.UInt32@,System.UInt32@)">
            <summary>
            Check the current event log for new events.
            </summary>
            <param name="eventCount">The number of new events that have been added to the event log.</param>
            <param name="newIndex">The new index of the latest event.</param>
            <param name="newEventsLogged">The number of new events logged since the last call using this method.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.CheckFaultlogger() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.GetFltFlagInfo(System.Int16[],System.Int16[]@,System.Int16[]@,System.Int16)">
            <summary>
            Get the status of the flags that control: (a) whether the event type is enabled and (b) whether the event type triggers the recoding of a data stream.
            </summary>
            <param name="validFlags">An array of flags that define which of the available event types are valid for the current log. The total length of the array is
            the maximum number of events per task multiplied by the maximum number of tasks and the array element corresponding to a particular event type is defined as:
            {task identifier} * {maximum number of events per task} + {event identifier}. True, indicates that the event type is valid; otherwise, false.</param>
            <param name="enabledFlags">An array of flags that indicate whether the event type is enabled. True, indicates that the event type is enabled; otherwise, false.</param>
            <param name="streamTriggeredFlags">An array of flags that indicate whether the event type triggers the recording of a data stream. True, indicates that the
            event type triggers the recording of a data stream; otherwise false.</param>
            <param name="eventCount">The maximum number of event types i.e. the maximum number of event types per task multiplied by the maximum number of tasks.</param>
            <remarks>The size of the <paramref name="enabledFlags"/> and <paramref name="streamTriggeredFlags"/> arrays is equal to the number of defined
            event types associated with the current log. The array index is mapped to a table that is derived by sorting the records of the EVENTS table of the data
            dictionary corresponding to the LOGID field associated with the current log by the TASKID, EVENTID fields, in ascending order. </remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFltFlagInfo() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.SetFaultFlags(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the flag that controls: (a) whether the specified event type is enabled and (b) whether the event type triggers the recoding of a data stream.
            </summary>
            <param name="taskIdentfier">The task identifier associated with the event type.</param>
            <param name="eventIdentifier">The event identifier associated with the event type.</param>
            <param name="enabledFlag">A flag to control whether the event type corresponding to the specified task and event identifiers is to be enabled. True, if
            the event type is to be enabled; otherwise, false.</param>
            <param name="streamTriggeredFlag">A flag to control whether the event type corresponding to the specified task and event identifiers is to trigger the
            recording of a data stream. True, if the event type is to trigger the recording of a data stream; otherwise, false.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.SetFaultFlags() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.GetFltHistInfo(System.Int16[],System.Int16[]@,System.Int16[]@,System.Int16,System.Int16)">
            <summary>
            Get the event history associated with the current log.
            </summary>
            <param name="validFlags">An array of flags that define which of the available event types are valid for the current log. The total length of the array is
            the maximum number of events per task multiplied by the maximum number of tasks and the array element corresponding to a particular event type is defined as:
            {task identifier} * {maximum number of events per task} + {event identifier}. True, indicates that the event type is valid; otherwise, false.</param>
            <param name="cumulativeHistoryCounts">An array that contains the cumulative number of events of each event type, not including recent history.</param>
            <param name="recentHistoryCounts">An array that contains the recent number of events of each event type.</param>
            <param name="maxTasks">The maximum number of tasks that are supported by the current event log.</param>
            <param name="maxEventsPerTask">The maximum number of events per task that are supported by the current event log.</param>
            <remarks>The size of the <paramref name="cumulativeHistoryCounts"/> and <paramref name="recentHistoryCounts"/> arrays is equal to the number of defined
            event types associated with the current log. The array index is mapped to a table that is derived by sorting the records of the EVENTS table of the data
            dictionary corresponding to the LOGID field associated with the current log by the TASKID, EVENTID fields, in ascending order. </remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFltHistInfo() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.ConvertToWatchFrameList(System.DateTime,System.Int16,System.Int16,System.Int32[],System.Int16[],Common.Configuration.Workset_t)">
            <summary>
            Convert the data stream values retrieved from the VCU to a format that can be plotted by the <c>FormViewDataStream</c> class.
            </summary>
            <remarks>
            The value array retrieved by from the VCU is initially mapped to the WatchIdentifierList property of Column[0] of the workset, however, the WatchElement
            array associated with each frame must be mapped to the WatchElementList property of the workset.
            </remarks>
            <param name="startTime">The start time of the fault log.</param>
            <param name="sampleCount">The number of samples in the data stream.</param>
            <param name="frameIntervalMs">The interval, in ms, between consecutive data frames.</param>
            <param name="values">The point values corresponding to each variable.</param>
            <param name="dataTypes">The data types associated with each value.</param>
            <param name="workset">The workset that is to be used to define the output format.</param>
            <returns>The watch variable values in the format that can be plotted by the <c>FormViewDataStream</c> class.</returns>
            <exception cref="T:System.ArgumentException">Thrown if one or more of the the watch identifiers defined in the WatchElementList property of the workset does nor exist.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEventOffline.ConvertToWorkset(System.String,System.Int16[],System.Int16)">
            <summary>
            Convert the specified data stream watch variable identifiers/parameters into a valid workset.
            </summary>
            <remarks>
            All of the watch identifiers returned from the VCU s are added to Column[0] of the workset in the order in which they appear in <paramref name="variableIdentifiers"/> and
            the security level of the workset is set to the lowest security level.
            </remarks>
            <param name="name">The name of the workset.</param>
            <param name="variableIdentifiers">The array of watch identifiers.</param>
            <param name="sampleMultiple">The multiple of the recording interval at which the data is recorded.</param>
            <returns>The watch identifiers contained within <paramref name="variableIdentifiers"/> as a valid workset.</returns>
        </member>
        <member name="T:Event.Forms.FormShowEventHistory">
            <summary>
            A form to show the cumulative and recent number of events that have occurred for each of the available event types asociated with the current log.
            </summary>
        </member>
        <member name="T:Event.Forms.FormConfigureEventFlags">
            <summary>
            A form to allow the user to configure the event flags associated with the current log. The event flags define which of the available event types associated with 
            an event log are enabled and which will trigger the recording of a fault log.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.FormatStringInteger">
            <summary>
            The format string used to display the Identifier property of the event record. Value = "0000".
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.MarginRightDataGridViewControl">
            <summary>
            The right margin to be applied to the <c>DataGridView</c> control. Value: 20.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.MarginRightPanelControl">
            <summary>
            The right margin to be applied to the <c>Panel</c> control associated with the <c>DataGridView</c>. Value: 30.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.ColumnIndexEventIndex">
            <summary>
            The column index associated with the event index of the <c>DataGridView</c> control. Value: 0.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.ColumnIndexEventDescription">
            <summary>
            The column index associated with the event description field of the <c>DataGridView</c> control. Value: 1.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.ColumnIndexEventEnabled">
            <summary>
            The column index associated with the enable event field of the <c>DataGridView</c> control. Value: 2.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.ColumnIndexStreamTriggered">
            <summary>
            The column index associated with the stream triggered field of the <c>DataGridView</c> control. Value: 3.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.ColumnIndexCumulativeHistory">
            <summary>
            The column index associated with the cumulative history field of the <c>DataGridView</c> control. Value: 4.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.ColumnIndexRecentHistory">
            <summary>
            The column index associated with the recent history field of the <c>DataGridView</c> control. Value: 5.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_CommunicationInterface">
            <summary>
            Reference to the selected communication interface.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_EventStatusList">
            <summary>
            An event status list associated with the current event log;
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_TextTrue">
            <summary>
            The text to be displayed if the state of the boolean property is true.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_TextFalse">
            <summary>
            The text to be displayed if the state of the boolean property is false.
            </summary>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.#ctor(Common.Communication.ICommunicationParent,Common.Configuration.Log)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="communicationInterface">The communication interface that is to be used to communicate with the VCU.</param>
            <param name="log">The current event log.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.m_ButtonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the OK button <c>Click</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.m_ButtonCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Cancel button <c>Click</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.m_DataGridViewFlags_CellClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Event handler for the <c>DataGridView</c> control <c>CellClick</c> event. Toggle the state of the event flag property corresponding to the selected cell. This 
            is only applicable if the selected cell corresponds to the Enabled property or the StreamTriggered property.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.m_MenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Definition' context menu. Show the help information associated with the event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.m_ContextMenuStripFlags_Opened(System.Object,System.EventArgs)">
            <summary>
            Event handler for the context menu 'Opened' event. Check the 'Enabled' and 'Stream Triggered' context menu options depending upon the state of the 
            corresponding properties of the event status element associated with the selected row of the <c>DataGridView</c> control.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.m_MenuItemEnabled_Click(System.Object,System.EventArgs)">
            <summary>
            Event handled for the 'Enabled' context menu. Toggle the state of the Enabled property of the event flag associated with the selected record.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.m_MenuItemStreamTriggered_Click(System.Object,System.EventArgs)">
            <summary>
            Event handled for the 'Stream Triggered' context menu. Toggle the state of the StreamTriggered property of the event flag associated with the selected record.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.CompareByTaskIDByEventIDAscending(Common.Configuration.EventRecord,Common.Configuration.EventRecord)">
            <summary>
            Compare the two specified <c>EventRecord</c> types and return an integer value that indicates their relative positions in the sort order. This value is used 
            to sort the list of event records by TaskIdentifier followed by EventIdentifier, in ascending order.
            </summary>
            <param name="eventRecordA">The first event record that is to be compared.</param>
            <param name="eventRecordB">The second event record that is to be compared.</param>
            <returns>Less than zero if eventRecordA is lower than eventRecordB in the required sort order, 0 if eventRecordA is equal to eventRecordB in the required sort 
            order and greater than zero if eventRecordA is higher that eventRecordB in the required sort order.</returns>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.AddList(System.Collections.Generic.List{Event.Forms.EventStatus_t})">
            <summary>
            Add the specified event status list to the <c>DataGridView</c> control. If the specified list does not contain any records, no action will be taken.
            </summary>
            <param name="eventStatusList">The list of event status structures that are to be added to the <c>DataGridView</c> control.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.Convert(Event.Forms.EventStatus_t)">
            <summary>
            Convert the specified event status structure to a <c>DataGridViewRow</c> so that it may be added to the <c>DataGridView</c> control used to display the 
            event status information.
            </summary>
            <param name="eventStatus">The event status structure that is to be converted.</param>
            <returns>The specified event status structure converted to a <c>DataGridViewRow</c>.</returns>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.GetEventStatusElement(Event.Forms.EventStatus_t@,System.Windows.Forms.DataGridViewRow@)">
            <summary>
            Get the element of the <c>EventStatusList</c> property corresponding to the selected row of the <c>DataGridView</c> control.
            </summary>
            <param name="eventStatus">The event status element corresponding to the selected row of the <c>DataGridView</c> control.</param>
            <param name="dataGridViewRow">The selected row of the <c>DataGridView</c> control.</param>
            <returns>A flag to indicate whether an event status element matching the selected row of the DataGridView control was found. True, if a matching element 
            was found; otherwise, false.</returns>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Event.Forms.FormConfigureEventFlags.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_ButtonOK">
            <summary>
            Reference to the OK <c>Button</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_ButtonCancel">
            <summary>
            Reference to the Cancel <c>Button</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_DataGridViewEventStatus">
            <summary>
            Reference to the <c>DataGridView</c> control used to display the event status.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_PanelDataGridViewEventStatus">
            <summary>
            Reference to the <c>Panel</c> control associated with the <c>DataGridView</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_DataGridViewTextColumnCumulativeHistory">
            <summary>
            Reference to the 'Cumulative History' <c>DataGridViewTextBoxColumn</c> column of the <c>DataGridView</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_DataGridViewTextColumnRecentHistory">
            <summary>
            Reference to the 'Recent History' <c>DataGridViewTextBoxColumn</c> column of the <c>DataGridView</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_DataGridViewTextColumnEnableEvent">
            <summary>
            Reference to the 'Enable Event' <c>DataGridViewTextBoxColumn</c> column of the <c>DataGridView</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_DataGridViewTextColumnStreamTriggered">
            <summary>
            Reference to the 'Stream Triggered' <c>DataGridViewTextBoxColumn</c> column of the <c>DataGridView</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureEventFlags.m_ContextMenuStripFlags">
            <summary>
            Reference to the <c>ContextMenuStrip</c> control associated with the <c>DataGridView</c> control.
            </summary>
        </member>
        <member name="P:Event.Forms.FormConfigureEventFlags.CommunicationInterface">
            <summary>
            Gets or sets the communication interface that is to be used to communicate with the target.
            </summary>
            <remarks>This property is set by the child class, if appropriate.</remarks>
        </member>
        <member name="P:Event.Forms.FormConfigureEventFlags.EventStatusList">
            <summary>
            Gets or sets the event status list associated with the current event log;
            </summary>
        </member>
        <member name="F:Event.Forms.FormShowEventHistory.ContextMenuItemIndexEnabled">
            <summary>
            The context menu item index associated with the 'Enabled' menu option. Value: 1.
            </summary>
        </member>
        <member name="F:Event.Forms.FormShowEventHistory.ContextMenuItemIndexStreamTriggered">
            <summary>
            The context menu item index associated with the 'Stream Triggered' menu option. Value: 2.
            </summary>
        </member>
        <member name="M:Event.Forms.FormShowEventHistory.#ctor">
            <summary>
            Initilize a new instance of the class. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Event.Forms.FormShowEventHistory.#ctor(Common.Communication.ICommunicationParent,Common.Configuration.Log)">
            <summary>
            Initializes a new instance of the class. 
            </summary>
            <param name="communicationInterface">The communication interface that is to be used to communicate with the VCU.</param>
            <param name="log">The current event log.</param>
        </member>
        <member name="M:Event.Forms.FormShowEventHistory.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="F:Event.Forms.FormShowEventHistory.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Event.Forms.FormShowEventHistory.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Event.Forms.FormConfigureFaultLogParameters">
            <summary>
            Form to allow the user to define: (a) the watch variables that are associated with a fault log data stream (b) the order in which they are to be displayed and 
            (c) the multiple of the recording interval at which the data is to be recorded.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureFaultLogParameters.WatchSizeFaultLogMax">
            <summary>
            The maximum FaultLog/DataStream WatchSize that can be displayed using the 'Row Header' <c>ListBox</c>. Value: 16.  
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureFaultLogParameters.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.AddRowHeader">
            <summary>
            Changes the TabPage title to 'Channel No.', populates the 'Row Header' <c>ListBox</c> with the channel numbers and sets the Visible properties
            of the 'Total Count' <c>Label</c> and 'Row Header' <c>ListBox</c> to true. This is used when the project does not support multiple data stream
            types and the number of parameters supported by the workset dos not exceed the number that can be displayed on the <c>TabPage</c> without the use
            of scroll bars.
            </summary>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.NoRowHeader">
            <summary>
            Resizes and repositions the 'Data Stream Parameters' <c>TabPage</c> controls for when the 'Row Header' <c>ListBox</c> is not used i.e. 
            if the project supports multiple data stream types or the number of parameters supported by the workset exceeds the number that can be 
            displayed on the <c>TabPage</c> without the use of scroll bars.
            </summary>
            <remarks>The 'Total Count' <c>Label</c> i.e. 'Total Count: nn of 20', can't be displayed if the project supports multiple data stream types
            as the upper limit is the maximum number of watch variables and may not apply to the current workset, which could be confusing to the 
            operator.</remarks>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureFaultLogParameters.m_LegendSampleMultiple">
            <summary>
            Refrence to the 'Sample Multiple' <c>Label</c>.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureFaultLogParameters.m_NumericUpDownSampleMultiple">
            <summary>
            Reference to the <c>NumericUpDown</c> control.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureFaultLogParameters.m_CommunicationInterface">
            <summary>
            Reference to the selected communication interface.
            </summary>
        </member>
        <member name="F:Event.Forms.FormConfigureFaultLogParameters.m_SampleMultiple">
            <summary>
            The multiple of the recording interval at which the data is to be recorded.
            </summary>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.#ctor">
            <summary>
            Initializes an new instance of the form. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.#ctor(Common.Communication.ICommunicationParent,Common.Configuration.WorksetCollection,Common.Configuration.Log)">
            <summary>
            Initializes an new instance of the form. Defines the communication interface and then downloads the current default data stream parameters and displays these 
            on the form.
            </summary>
            <param name="communicationInterface">Reference to the communication interface that is to be used to communicate with the VCU.</param>
            <param name="worksetCollection">The workset collection that is to be managed.</param>
            <param name="log">The selected event log.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.FormPTUDialog_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the form <c>Shown</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.m_TSBUpload_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Download' <c>ToolStripButton</c> <c>Click</c> event. Download the selected chart recorder workset to the VCU.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.m_NumericUpDownSampleMultiple_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>ValueChanged</c> event associated with the <c>NumericUpDown</c> control. Update the member variable that records the sample multiple 
            and raise a 'DataUpdate' event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.UpdateCount">
            <summary>
            Update the count label that shows the number of watch variables that have been added to the chart configuration workset.
            </summary>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.UploadWorkset(Common.Configuration.Workset_t)">
            <summary>
            Upload the specified fault log workset to the VCU.
            </summary>
            <param name="workset">The workset that is to be downloaded to the VCU.</param>
            <returns>A flag that indicates whether the workset was successfully downloaded to the VCU. True, if the VCU update was successful; otherwise, false.</returns>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.SetModifyState(Common.Forms.FormConfigure.ModifyState)">
            <summary>
            Set the modify state to the specified state.
            </summary>
            <param name="modifyState">The required modify state.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.ConvertToWorkset(System.String)">
            <summary>
            Convert the current user settings to a workset.
            </summary>
            <param name="worksetName">The name of the workset.</param>
            <returns>The user settings converted to a workset.</returns>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.LoadWorkset(Common.Configuration.Workset_t)">
            <summary>
            Load the specified workset.
            </summary>
            <param name="workset">The workset that is to be processed.</param>
        </member>
        <member name="M:Event.Forms.FormConfigureFaultLogParameters.UpdateSampleMultiple(System.Int16)">
            <summary>
            Update the sample multiple <c>NumericUpDown</c> control and member variable with the specified sample multiple value.
            </summary>
            <param name="sampleMultiple">The sample multiple.</param>
        </member>
        <member name="P:Event.Forms.FormConfigureFaultLogParameters.CommunicationInterface">
            <summary>
            Gets or sets the communication interface that is to be used to communicate with the target.
            </summary>
            <remarks>This property is set by the child class, if appropriate.</remarks>
        </member>
        <member name="T:Event.Forms.FormWorksetManagerFaultLog">
            <summary>
            Form to manage the the worksets associated with the fault log data stream. Allows the user to: edit, add and delete individual worksets or 
            set any of the worksets to be the default workset.
            </summary>
        </member>
        <member name="F:Event.Forms.FormWorksetManagerFaultLog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Event.Forms.FormWorksetManagerFaultLog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Event.Forms.FormWorksetManagerFaultLog.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor, required by Visual Studio.
            </summary>
        </member>
        <member name="M:Event.Forms.FormWorksetManagerFaultLog.#ctor(Common.Configuration.WorksetCollection)">
            <summary>
            Initializes a new instance of the class. Records the securty level of the user and enables/disables the 'Set as Default' context menu option accordingly.
            </summary>
            <param name="worksetCollection">The workset collection that is to be managed.</param>
        </member>
        <member name="M:Event.Forms.FormWorksetManagerFaultLog.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Event.Forms.FormWorksetManagerFaultLog.EditSelectedWorkset(Common.Configuration.WorksetItem)">
            <summary>
            Call the form which allows the user to edit the selected workset.
            </summary>
            <param name="selectedItem">The selected workset item.</param>
        </member>
        <member name="M:Event.Forms.FormWorksetManagerFaultLog.CreateNewWorkset">
            <summary>
            Call the form which allows the user to create a new workset.
            </summary>
        </member>
        <member name="T:Event.Forms.FormGetStream">
            <summary>
            A class to support downloading of the fault logs from the VCU.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.FormatStringEventTime">
            <summary>
            The format string that is to be used to display the time of the event. Value: "HH:mm:ss".
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.IntervalMsDisplayUpdate">
            <summary>
            The interval, in ms, between successive display updates. Value: 1000 ms.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.DataStreamTypeStandardFaultLog">
            <summary>
            The data stream type identifier associated with a standard fault log. Value: 0.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.DataStreamTypeFaultLogCTA">
            <summary>
            The data stream type identifier associated with a CTA fault log. Value: 1.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.DataStreamTypeSnapshotLog">
            <summary>
            The data stream type identifier associated with a snapshot log. Value: 2.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.DurationSecDownloadStandardFaultLog">
            <summary>
            The download duration, in seconds, of a standard fault log. Value: 3 seconds.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.DurationSecDownloadFaultLogCTA">
            <summary>
            The download duration, in seconds, of a CTA fault log. Value: 4 seconds.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.DurationSecDownloadSnapshotLog">
            <summary>
            The download duration, in seconds, of a CTA snapshotlog. Value: 25 seconds.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.TimeoutFactor">
            <summary>
            The factor by which to multiply the expected downloadduration - in seconds, to obtain the timeout period, in ms. Value: 2000.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Event.Forms.FormGetStream.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.m_PictureRetrieve">
            <summary>
            Reference to the <c>PictureBox</c> associated with the Retrieve graphic.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.m_ButtonCancel">
            <summary>
            Reference to the Cancel <c>Button</c>.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.m_ProgressBarDownload">
            <summary>
            Reference to the Download <c>ProgressBar</c>.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.m_LegendProgress">
            <summary>
            Reference to the 'Progress' legend.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.m_LabelDataStreamName">
            <summary>
            Reference to the <c>Label</c> associated with the name of the data stream that is being downloaded.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.m_LegendFaultLog">
            <summary>
            Reference to the <c>Label</c> used to display the 'Fault Log' legend.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.m_CommunicationInterface">
            <summary>
            Reference to the selected communication interface.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.m_EventRecord">
            <summary>
            Reference to the event record that was passed as a parameter.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.m_TimerProgressBarUpdate">
            <summary>
            The System.Windows.Forms timer used to manage the display update.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.m_BackgroundWorker">
            <summary>
            Reference to the background worker task.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetStream.m_TimeoutMsThreadComplete">
            <summary>
            The timeout, in ms, for the thread that is responsible for downloading the fault log to complete. 
            </summary>
        </member>
        <member name="M:Event.Forms.FormGetStream.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Event.Forms.FormGetStream.#ctor(Common.Communication.ICommunicationEvent,Common.Configuration.EventRecord)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="communicationInterface">Reference to the communicaton interface that is to be used to communicate with the VCU</param>
            <param name="eventRecord">The event record associated with the data stream.</param>
        </member>
        <member name="M:Event.Forms.FormGetStream.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Event.Forms.FormGetStream.FormGetStream_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Shown</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormGetStream.m_ButtonCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Cancel button.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormGetStream.ProgressBarUpdate(System.Object,System.EventArgs)">
            <summary>
            Called periodically by the System.Windows.Forms.Timer event. Update the progress bar.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormGetStream.m_BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            The background worker task. Download the data stream corresponding to the event record specified in the constructor and update the DataSteamCurrent property 
            of the FormViewEventLog class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="P:Event.Forms.FormGetStream.CommunicationInterface">
            <summary>
            Gets or sets the communication interface that is to be used to communicate with the VCU.
            </summary>
        </member>
        <member name="P:Event.Forms.FormGetStream.CancelEnable">
            <summary>
            Gets or sets the <c>Enabled</c> property of the Cancel button.
            </summary>
            <remarks>The Cancel button is enables by default.</remarks>
        </member>
        <member name="T:Event.Forms.FormGetFltHistInfo">
            <summary>
            A class to download the event history associated with the current log from the VCU.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.RecordsPerSec">
            <summary>
            The approximate number of records that can be downloaded from the VCU per second. Value: 8.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.IntervalDisplayUpdateMs">
            <summary>
            The interval, in ms, between successive display updates. Value: 125 ms.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.m_CommunicationInterface">
            <summary>
            Reference to the selected communication interface.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.m_EventRecordList">
            <summary>
            A reference to the event record list that was passed as a parameter.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.m_Log">
            <summary>
            A reference to the event log that was passed as a parameter.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.m_TimerProgressBarUpdate">
            <summary>
            The System.Windows.Forms timer used to manage the display update.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.m_BackgroundWorker">
            <summary>
            A reference to the background worker task.
            </summary>
        </member>
        <member name="M:Event.Forms.FormGetFltHistInfo.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Event.Forms.FormGetFltHistInfo.#ctor(Common.Communication.ICommunicationEvent,System.Collections.Generic.List{Common.Configuration.EventRecord},Common.Configuration.Log)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="communicationInterface">Reference to the communicaton interface that is to be used to communicate with the VCU</param>
            <param name="eventRecordList">The list of event records associated with the current log.</param>
            <param name="log">The current event log.</param>
        </member>
        <member name="M:Event.Forms.FormGetFltHistInfo.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Event.Forms.FormGetFltHistInfo.FormGetStream_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Shown</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormGetFltHistInfo.ProgressBarUpdate(System.Object,System.EventArgs)">
            <summary>
            Called periodically by the System.Windows.Forms.Timer event. Update the progress bar.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormGetFltHistInfo.m_BackgroundWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            The background worker task. Download the event history associated with the current event log and update the EventStatusList property of the 
            FormShowEventHistory class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Event.Forms.FormGetFltHistInfo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.m_PictureRetrieve">
            <summary>
            Reference to the <c>PictureBox</c> associated with the Retrieve graphic.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.m_ProgressBarDownload">
            <summary>
            Reference to the Download <c>ProgressBar</c>.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.m_LegendProgress">
            <summary>
            Reference to the 'Progress' legend.
            </summary>
        </member>
        <member name="F:Event.Forms.FormGetFltHistInfo.m_LabelDescription">
            <summary>
            Reference to the <c>Label</c> associated with the name of the data stream that is being downloaded.
            </summary>
        </member>
        <member name="P:Event.Forms.FormGetFltHistInfo.CommunicationInterface">
            <summary>
            Gets or sets the communication interface that is to be used to communicate with the VCU.
            </summary>
        </member>
        <member name="T:Event.Forms.FormWorksetDefineFaultLog">
            <summary>
            Form to allow the user to define: (a) the watch variables that are associated with a fault log data stream (b) the order in which they are to be displayed and 
            (c) the multiple of the recording interval at which the data is recorded.
            </summary>
        </member>
        <member name="F:Event.Forms.FormWorksetDefineFaultLog.FormatStringNumericString">
            <summary>
            The .NET format string used to display the sample interval.
            </summary>
        </member>
        <member name="F:Event.Forms.FormWorksetDefineFaultLog.WatchSizeFaultLogMax">
            <summary>
            The maximum FaultLog/DataStream WatchSize that can be displayed using the 'Row Header' <c>ListBox</c>. Value: 16.  
            </summary>
        </member>
        <member name="F:Event.Forms.FormWorksetDefineFaultLog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.AddRowHeader">
            <summary>
            Changes the TabPage title to 'Channel No.', populates the 'Row Header' <c>ListBox</c> with the channel numbers and sets the Visible properties
            of the 'Total Count' <c>Label</c> and 'Row Header' <c>ListBox</c> to true. This is used when the project does not support multiple data stream
            types and the number of parameters supported by the workset dos not exceed the number that can be displayed on the <c>TabPage</c> without the use
            of scroll bars.
            </summary>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.NoRowHeader">
            <summary>
            Resizes and repositions the 'Data Stream Parameters' <c>TabPage</c> controls for when the 'Row Header' <c>ListBox</c> is not used i.e. 
            if the project supports multiple data stream types or the number of parameters supported by the workset exceeds the number that can be 
            displayed on the <c>TabPage</c> without the use of scroll bars.
            </summary>
            <remarks>The 'Total Count' <c>Label</c> i.e. 'Total Count: nn of 20', can't be displayed if the project supports multiple data stream types
            as the upper limit is the maximum number of watch variables and may not apply to the current workset, which could be confusing to the 
            operator.</remarks>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Event.Forms.FormWorksetDefineFaultLog.m_NumericUpDownSampleMultiple">
            <summary>
            Reference to the <c>NumericUpDown</c> control used to specify the sample multiple.
            </summary>
        </member>
        <member name="F:Event.Forms.FormWorksetDefineFaultLog.m_LegendSampleMultiple">
            <summary>
            Reference to the <c>Label</c> used to display the 'Sample Multiple' legend. 
            </summary>
        </member>
        <member name="F:Event.Forms.FormWorksetDefineFaultLog.m_SampleMultiple">
            <summary>
            The multiple of the recording interval at which the data is to be recorded.
            </summary>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.#ctor">
            <summary>
            Initializes an new instance of the form. Zero parameter constructor, required by Visual Studio.
            </summary>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.#ctor(Common.Configuration.WorksetCollection)">
            <summary>
            Initializes an new instance of the form. This constructor is used when a new workset is being created. Populates the 'Available' 
            <c>ListBox</c> controls with the appropriate watch variables.
            </summary>
            <param name="worksetCollection">The workset collection that is to be managed.</param>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.#ctor(Common.Configuration.WorksetCollection,Common.Configuration.Workset_t,System.Boolean)">
            <summary>
            <para>
            Initializes an new instance of the form for use when EDITing a workset. Populates the 'Configuration' ListBoxes with the data associated with the 
            specified configuration and populates the 'Available' ListBoxes with the remaining data i.e. the difference between the configuration and the default data.
            </para>
            <para>
            If the <paramref name="applyVisible"/> parameter is set to true the form will include an apply button so that the user can update the workset without closing
            the form between updates. This is especially useful when modifying the active workset while the workset is on display.
            </para>
            </summary>
            <param name="worksetCollection">The workset collection that is to be managed.</param>
            <param name="workset">The workset that is to be edited.</param>
            <param name="applyVisible">Flag to specify whether the Apply button is to be visible; True, displays the Apply button, false, hides the Apply button.</param>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.m_ButtonApply_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Apply button <c>Click</c> event. Add the defined workset to the to list of available worksets.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.m_NumericUpDownSampleMultiple_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>ValueChanged</c> event associated with the <c>NumericUpDown</c> control. Update the member variable that records the sample multiple 
            and raise a 'DataUpdate' event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.UpdateSampleMultiple(System.Int16)">
            <summary>
            Update the sample multiple <c>NumericUpDown</c> control and member variable with the specified sample multiple value.
            </summary>
            <param name="sampleMultiple">The sample multiple.</param>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.UpdateCount">
            <summary>
            Update the count labels that show the number of watch variables that are available and the number that have been added to each column of the workset.
            </summary>
            <remarks>The worksets associated with fault log data stream parameter only support a single column and the maximum count will vary depending upon the data 
            stream type used by the associated event log.</remarks>
        </member>
        <member name="M:Event.Forms.FormWorksetDefineFaultLog.ConvertToWorkset(System.String)">
            <summary>
            Convert the current user settings to a workset.
            </summary>
            <param name="worksetName">The name of the workset.</param>
            <returns>The user settings converted to a workset.</returns>
        </member>
        <member name="T:Event.Forms.EventStatus_t">
            <summary>
            A structure containing the status information associated with a particular event.
            </summary>
            <remarks>A generic list of these structures is constructed whenever an event log is downloaded from the VCU. This allows the user to obtain a 
            summary of the cumulative and recent number of occurrences of each event and to control whether: (a) the event is enabled and (b) whether the event is 
            to trigger the recording of a data stream.</remarks>
        </member>
        <member name="F:Event.Forms.EventStatus_t.Index">
            <summary>
            The index element associated with this structure.
            </summary>
        </member>
        <member name="F:Event.Forms.EventStatus_t.Identifier">
            <summary>
            The Identifier property of the event record associated with this structure. 
            </summary>
            <remarks>The event record associated with this field is accessed by setting the index of the RecordList property of the EventTable class to be equal 
            to the value of this field e.g. Lookup.EventTable.RecordList[Identifier].Description.</remarks>
        </member>
        <member name="F:Event.Forms.EventStatus_t.Enabled">
            <summary>
            A flag to control whether the event associated with this structure is enabled for the current event log.
            </summary>
        </member>
        <member name="F:Event.Forms.EventStatus_t.StreamTriggered">
            <summary>
            A flag to control whether the event associated with this structure is to trigger the recording of a fault log data stream.
            </summary>
        </member>
        <member name="F:Event.Forms.EventStatus_t.CumulativeHistoryCount">
            <summary>
            The total number of occurrences of the event associated with this structure.
            </summary>
        </member>
        <member name="F:Event.Forms.EventStatus_t.RecentHistoryCount">
            <summary>
            The recent number of occurrences of the event associated with this structure.
            </summary>
        </member>
        <member name="F:Event.Forms.EventStatus_t.Modified">
            <summary>
            A flag that indicates whether any of the properties associated with this structure have been modified by the user.
            </summary>
        </member>
        <member name="T:Event.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.Blank">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.ConfigureEventFlags">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.DataStream">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.Delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.Edit_Undo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.EMEventVariableTypeInvalid">
            <summary>
              Looks up a localized string similar to The event variable type associated with the record in invalid..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.EMGetFltFlagInfoFailed">
            <summary>
              Looks up a localized string similar to Unable to retrieve the event flag information..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.EMGetFltHistInfoFailed">
            <summary>
              Looks up a localized string similar to Unable to retrieve the event history..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.EMSampleMultipleInvalid">
            <summary>
              Looks up a localized string similar to The sample interval defined in the workset is invalid, assume a value of 1..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.EMWorksetIntegrityCheckFailed">
            <summary>
              Looks up a localized string similar to There is a problem with the integrity check on the workset, please contact the system administrator..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.EventHistory">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FileDialogOpenFilterEventLog">
            <summary>
              Looks up a localized string similar to Event Log Files.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FileDialogOpenFilterFaultLog">
            <summary>
              Looks up a localized string similar to Data Stream Files.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FileDialogOpenTitleEventLog">
            <summary>
              Looks up a localized string similar to Select Event Log(s).
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FileDialogOpenTitleFaultLog">
            <summary>
              Looks up a localized string similar to Select Data Stream.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FileInformation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FileRetrieve">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FolderOpen">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyTextClear">
            <summary>
              Looks up a localized string similar to Clear.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyTextEsc">
            <summary>
              Looks up a localized string similar to Back.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyTextFlags">
            <summary>
              Looks up a localized string similar to Flags.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyTextHistory">
            <summary>
              Looks up a localized string similar to History.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyTextInfo">
            <summary>
              Looks up a localized string similar to Info.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyTextInitialize">
            <summary>
              Looks up a localized string similar to Init..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyTextLoad">
            <summary>
              Looks up a localized string similar to Load.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyTextSave">
            <summary>
              Looks up a localized string similar to Save.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyTextSetupStream">
            <summary>
              Looks up a localized string similar to Stream.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipClear">
            <summary>
              Looks up a localized string similar to [Clear Recent History].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamConfigure">
            <summary>
              Looks up a localized string similar to [Configure Selected Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamConfigureUndo">
            <summary>
              Looks up a localized string similar to [Undo - Configure Selected Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamCopy">
            <summary>
              Looks up a localized string similar to [Copy Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamCopyUndo">
            <summary>
              Looks up a localized string similar to [Undo - Copy Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamCreate">
            <summary>
              Looks up a localized string similar to [Create New Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamCreateUndo">
            <summary>
              Looks up a localized string similar to [Undo - Create New Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamDelete">
            <summary>
              Looks up a localized string similar to [Delete Selected Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamDeleteUndo">
            <summary>
              Looks up a localized string similar to [Undo - Delete Selected Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamOverrideSecurity">
            <summary>
              Looks up a localized string similar to [Override Data Stream Configuration Security Setting].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamOverrideSecurityUndo">
            <summary>
              Looks up a localized string similar to [Undo - Override Data Stream Configuration Security Setting].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamRename">
            <summary>
              Looks up a localized string similar to [Rename Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamRenameUndo">
            <summary>
              Looks up a localized string similar to [Undo - Rename Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamSave">
            <summary>
              Looks up a localized string similar to [Save Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamSetAsDefault">
            <summary>
              Looks up a localized string similar to [Set Selected Data Stream Configuration As Default].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamSetAsDefaultUndo">
            <summary>
              Looks up a localized string similar to [Undo - Set Selected Data Stream Configuration As Default].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipDataStreamUpload">
            <summary>
              Looks up a localized string similar to [Upload Data Stream Configuration].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipEsc">
            <summary>
              Looks up a localized string similar to [Show Event Log Display].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipFlags">
            <summary>
              Looks up a localized string similar to [Configure Event Flags].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipHistory">
            <summary>
              Looks up a localized string similar to [Show Event History].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipInfo">
            <summary>
              Looks up a localized string similar to [Show Header Information].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipInitialize">
            <summary>
              Looks up a localized string similar to [Clear Cumulative and Recent History].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipLoad">
            <summary>
              Looks up a localized string similar to [Load Additional Event Log(s)].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipSaveEventLogs">
            <summary>
              Looks up a localized string similar to [Save All Event Logs].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipSaveFaultLog">
            <summary>
              Looks up a localized string similar to [Save Data Stream].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.FunctionKeyToolTipSetupStream">
            <summary>
              Looks up a localized string similar to [Configure Data Stream].
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.Help">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.InformationLegendDate">
            <summary>
              Looks up a localized string similar to Date:.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.InformationLegendEventCount">
            <summary>
              Looks up a localized string similar to Events:.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.InformationLegendTime">
            <summary>
              Looks up a localized string similar to PC Time:.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.Initialize">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.LegendAvailable">
            <summary>
              Looks up a localized string similar to Available.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.LegendCount">
            <summary>
              Looks up a localized string similar to Count.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.LegendCurrentEventLog">
            <summary>
              Looks up a localized string similar to &amp;Event Log:.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.LegendOf">
            <summary>
              Looks up a localized string similar to of.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.LegendTotalCount">
            <summary>
              Looks up a localized string similar to Total Count.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBCaptionError">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBCaptionInformation">
            <summary>
              Looks up a localized string similar to Information.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBCaptionQuestion">
            <summary>
              Looks up a localized string similar to Question.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBCaptionWarning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTAppendOverwrite">
            <summary>
              Looks up a localized string similar to Yes - append the current events to the existing records. No - replace the existing records..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTAppendProjectMismatch">
            <summary>
              Looks up a localized string similar to The specified file contains data associated with a different project. The current data will not be appended to the file and the save operation will be cancelled..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTConfirmClearEventLogs">
            <summary>
              Looks up a localized string similar to Are you sure that you want to clear all event logs?.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTConfirmInitializeEventLogs">
            <summary>
              Looks up a localized string similar to Initializing event logs will reset all flags to default, clear all cumulative history, and erase all event logs. Are you sure that you want to initialize all event logs?.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTDataStreamNotSaved">
            <summary>
              Looks up a localized string similar to The data stream file associated with the selected event cannot be found..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTEventFlagsChanged">
            <summary>
              Looks up a localized string similar to One or more event flags have been modified. Do you want to update the Vehicle Control Unit?.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTEventLogClearFailed">
            <summary>
              Looks up a localized string similar to Unable to clear one or more of the event logs..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTEventLogDownloadFailed">
            <summary>
              Looks up a localized string similar to Unable to download the selected event log..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTEventLogInitializeFailed">
            <summary>
              Looks up a localized string similar to Unable to initialize one or more of the event logs..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTEventLogSaveFailed">
            <summary>
              Looks up a localized string similar to The current events were not successfully saved. Do you want to continue?.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTEventNotFound">
            <summary>
              Looks up a localized string similar to The Events table of the data dictionary does not contain an event corresponding to LOGID = {0}, TASKID = {1} and EVENTID = {2}..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTFaultLogNotAvailable">
            <summary>
              Looks up a localized string similar to There is no data stream available for the selected event..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTFaultLogSerializationFailed">
            <summary>
              Looks up a localized string similar to Unable to serialize the data stream to disk..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTFaultLogWorksetEditRequest">
            <summary>
              Looks up a localized string similar to Please select a new workset or modify the current workset and retry..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTFaultLogWorksetWatchVariablesMaxExceeded">
            <summary>
              Looks up a localized string similar to The number of watch variables defined in the workset exceeds the number that are supported by the current event log..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTFileCorrupt">
            <summary>
              Looks up a localized string similar to The contents of the file cannot be read. Do you want to over-write the file?.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTFormatNotRecognized">
            <summary>
              Looks up a localized string similar to The format of &apos;{0}&apos; is not recognized. This file will not be imported..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTGetDefaultStreamParametersFailed">
            <summary>
              Looks up a localized string similar to Unable to retrieve the default data stream parameters..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTGetStreamFailed">
            <summary>
              Looks up a localized string similar to Unable to retrieve the data stream associated with the &apos;{0}&apos; event..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTInvalidFormat">
            <summary>
              Looks up a localized string similar to The format of the selected file is not recognized..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTLogFileTypeNotSupported">
            <summary>
              Looks up a localized string similar to This log file type is not supported..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTModifyFaultLogParametersFailed">
            <summary>
              Looks up a localized string similar to Unable to modify the data stream parameters..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTModifyFaultLogParametersSuccess">
            <summary>
              Looks up a localized string similar to The data stream parameters have been successfully updated..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTOpenFaultLogFailed">
            <summary>
              Looks up a localized string similar to Unable to show the selected data stream..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTProjectIdMismatch">
            <summary>
              Looks up a localized string similar to The project identifier associated with the selected file does not match that of the current configuration..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTProjectIdMismatchMultipleImport">
            <summary>
              Looks up a localized string similar to The project identifier associated with &apos;{0}&apos; does not match that of the current configuration. This file will not be imported..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTQueryEventLogSave">
            <summary>
              Looks up a localized string similar to Do you want to save the current events before proceeding?.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTQueryModifyFaultLogParameters">
            <summary>
              Looks up a localized string similar to Are you sure that you want to modify the data stream parameters to the selected setting?.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTSaveDataStreamsFailed">
            <summary>
              Looks up a localized string similar to The operation has been cancelled as the data stream associated with the &apos;{0}&apos; event could not be downloaded..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTSetFaultFlagsFailed">
            <summary>
              Looks up a localized string similar to Unable to update the event flag associated with the &apos;{0}&apos; event..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTShowFaultLogFailed">
            <summary>
              Looks up a localized string similar to Unable to display the data stream..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTUserCancelled">
            <summary>
              Looks up a localized string similar to The operation was cancelled by the user..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTViewEventLogFailed">
            <summary>
              Looks up a localized string similar to Unable to display the event logs..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.MBTWatchVariableNotDefined">
            <summary>
              Looks up a localized string similar to The specified watch variable is not defined in the current data dictionary..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.Modify">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.Save">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMCommunicationFaultPortLocked">
            <summary>
              Looks up a localized string similar to Communication Fault - Port Locked..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMCommunicationFaultReadTimeout">
            <summary>
              Looks up a localized string similar to Communication Fault - Read Timeout..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMDataStreamSaveXofY">
            <summary>
              Looks up a localized string similar to Saving &apos;{0}&apos; log data stream {1} of {2}..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMDataStreamsSave">
            <summary>
              Looks up a localized string similar to Saving the &apos;{0}&apos; log data streams..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMEventListEmpty">
            <summary>
              Looks up a localized string similar to There are no events..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMEventLogRetrieve">
            <summary>
              Looks up a localized string similar to Retrieving the &apos;{0}&apos; log..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMEventLogsClear">
            <summary>
              Looks up a localized string similar to Clearing the &apos;{0}&apos; log..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMEventLogsInitialize">
            <summary>
              Looks up a localized string similar to Initializing the &apos;{0}&apos; log..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMLoadFile">
            <summary>
              Looks up a localized string similar to Loading &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMSaveFile">
            <summary>
              Looks up a localized string similar to Saving &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMSortOrdedAscending">
            <summary>
              Looks up a localized string similar to Sorted by &apos;{0}&apos; in ascending order, most recent event first..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMSortOrdedDescending">
            <summary>
              Looks up a localized string similar to Sorted by &apos;{0}&apos; in descending order, oldest event first..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMSortOrderDateTimeAscending">
            <summary>
              Looks up a localized string similar to Sorted by date/time, oldest event first..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.SMSortOrderDateTimeDescending">
            <summary>
              Looks up a localized string similar to Sorted by date/time, most recent event first..
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.TextReset">
            <summary>
              Looks up a localized string similar to Reset.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.TextSet">
            <summary>
              Looks up a localized string similar to Set.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.TitleConfigureFaultLogParameters">
            <summary>
              Looks up a localized string similar to Configure - Data Stream.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.TitleCopyFaultLogWorkset">
            <summary>
              Looks up a localized string similar to Copy - Data Stream Configuration.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.TitleCreateFaultLogWorkset">
            <summary>
              Looks up a localized string similar to Create New - Data Stream Configuration.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.TitleEditFaultLogWorksets">
            <summary>
              Looks up a localized string similar to Configure - Data Stream.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.TitleEventHistory">
            <summary>
              Looks up a localized string similar to Event History.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.TitleFaultLog">
            <summary>
              Looks up a localized string similar to Diagnostics/Data Stream: {0}.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.TitleOpenEventLog">
            <summary>
              Looks up a localized string similar to Open/Event Log: {0}.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.TitleOpenFaultLog">
            <summary>
              Looks up a localized string similar to Open/Data Stream: {0}.
            </summary>
        </member>
        <member name="P:Event.Properties.Resources.TitleRenameFaultLogWorkset">
            <summary>
              Looks up a localized string similar to Rename - Data Stream Configuration.
            </summary>
        </member>
        <member name="T:Event.ThreadPollEvent">
            <summary>
            Polls the target hardware for watch values and logs the retrieved values to a cyclic buffer. Also records the values to a second, larger, cyclic buffer if
            the <c>Record</c> property is asserted.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.NewEventsPerPass">
            <summary>
            The number of new simulated events per pass. Value: 1.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.IntervalMsEventUpdate">
            <summary>
            The interval, in ms, between event updates. Value: 2,000 ms.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.ReadTimeoutCountdown">
            <summary>
            The countdown value associated the read timeout. Value: 3.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.SleepMsCheckPause">
            <summary>
            The thread sleep interval, in ms, between checking the state of the Pause property. Value: 200 ms.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.SleepMsRefreshWatchdog">
            <summary>
            The thread sleep interval, in ms, between watchdog refreshes once a communication fault has been detected.  Value: 50 ms. 
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.m_CommunicationInterface">
            <summary>
            Reference to the selected communication interface.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.m_Pause">
            <summary>
            Flag to control polling of the target hardware. True, inhibits polling of the target hardware; otherwise, false, resumes polling.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.m_PauseFeedback">
            <summary>
            Feedback flag to indicate that the polling of the target hardware has been inhibited.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.m_CommunicationFault">
            <summary>
            Flag used to indicate that there is a communication fault. True, indicates that a fault exists; otherwise, false, indicates that communication is OK.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.m_PacketCount">
            <summary>
            The number of packets that have been received since the class was instantiated;
            </summary>
            <remarks> 
            Used as a thread-safe way of blinking the packet received icon on the main window. The property correponding to this value is read by the display 
            update method on the main thread and provided it has incremented since the previous display update that method will blink the icon. As the method
            is on the same thread on which the icon was created it is inherently safe.
            </remarks>
        </member>
        <member name="F:Event.ThreadPollEvent.m_MutexPause">
            <summary>
            Mutex to control read/write access to the <c>Pause</c> property.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.m_MutexPauseFeedback">
            <summary>
            Mutex to control read/write access to the <c>PauseFeedback</c> property.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.m_MutexCommunicationFault">
            <summary>
            Mutex to control read/write access to the <c>CommunicationFault</c> property.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.m_FormViewEventLog">
            <summary>
            Reference to the calling form.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.m_PollScheduler">
            <summary>
            Reference to the class that schedules polling for new events.
            </summary>
        </member>
        <member name="F:Event.ThreadPollEvent.m_ReadTimeoutCountdown">
            <summary>
            The countdown to the read timeout.
            </summary>
        </member>
        <member name="M:Event.ThreadPollEvent.#ctor(Common.Communication.ICommunicationEvent,Event.Forms.FormViewEventLog)">
            <summary>
            Initializes a new instance of the class. Initializes the communication interface and read/write locks.
            </summary>
            <param name="communicationInterface">Reference to the communication interface used to communicate with the target hardware.</param>
            <param name="formViewEventLog">Reference to the form that called this form.</param>
        </member>
        <member name="M:Event.ThreadPollEvent.Run">
            <summary>
            Poll the target hardware for new events.
            </summary>
            <remarks>Runs on a separate thread.</remarks>
        </member>
        <member name="P:Event.ThreadPollEvent.CommunicationInterface">
            <summary>
            Gets or sets the communication interface that is to be used to communicate with the VCU.
            </summary>
        </member>
        <member name="P:Event.ThreadPollEvent.Pause">
            <summary>
            Gets or sets the flag that controls the polling of the target hardware. True, inhibits polling of the target hardware; otherwise, false, resumes polling.
            </summary>
        </member>
        <member name="P:Event.ThreadPollEvent.PauseFeedback">
            <summary>
            Gets the feedback flag that indicates whether polling of the target hardware has been suspended.  
            </summary>
            <remarks>This flag is asserted when the polling has entered the pause state, i.e. the current communication request is complete and no further requests will 
            be issued until the pause property has been cleared.</remarks>
        </member>
        <member name="P:Event.ThreadPollEvent.CommunicationFault">
            <summary>
            Gets the flag used to indicate that there is a communication fault. True, indicates that a fault exists; otherwise, false, indicates that communication is OK.
            </summary>
        </member>
        <member name="P:Event.ThreadPollEvent.PacketCount">
            <summary>
            Gets the number of packets received since the class was instantiated.
            </summary>
        </member>
        <member name="T:Event.MenuInterfaceEvent">
            <summary>
            Methods called by the menu options associated with the event sub-system - Event.dll.
            </summary>
        </member>
        <member name="M:Event.MenuInterfaceEvent.#ctor(Common.IMainWindow)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="mainWindow">Reference to the main application window interface.</param>
        </member>
        <member name="M:Event.MenuInterfaceEvent.OpenFaultLog">
            <summary>
            Call the <c>ShowDataStreamFile</c> method specifying the parameters associated with a fault log.
            </summary>
        </member>
        <member name="M:Event.MenuInterfaceEvent.OpenEventLog">
            <summary>
            Call the <c>ShowEventLogFiles</c> method specifying the parameters associated with an event log.
            </summary>
        </member>
        <member name="M:Event.MenuInterfaceEvent.ImportEventLogFiles">
            <summary>
            Ask the user to select one or more event log files, import the data contained in each of the files into an event log file structure and return 
            this event log file structure.
            </summary>
            <remarks>The filename and header fileds associated with the new event log file structure will be set to those values associated with 
            the first file included in the list.</remarks>
            <returns>The event log file containing all of the imported event date.</returns>
        </member>
        <member name="M:Event.MenuInterfaceEvent.ShowDataStreamFile(System.String,System.String,System.String,System.String)">
            <summary>
            Ask the user to select a data-stream file, de-serialized this to the appropriate object type and then display the data using the 
            <c>FormDataStreamPlot</c> class.
            </summary>
            <param name="title">The title that is to appear on the <c>OpenFileDialog</c> form.</param>
            <param name="defaultExtension">The default extension associated with the type of log.</param>
            <param name="filterText">The filter text. Used to filter the list of available files.</param>
            <param name="initialDirectory">The initial directory that will be show.</param>
            <returns>A flag to indicate whether a valid watch file was selected. True, indicates that the selected file was valid; otherwise, false.</returns>
        </member>
        <member name="M:Event.MenuInterfaceEvent.ViewEventLog">
            <summary>
            Show the child form which displays the current event logs.
            </summary>
        </member>
        <member name="M:Event.MenuInterfaceEvent.InitializeEventLogs">
            <summary>
            Initialize the event logs.
            </summary>
        </member>
        <member name="M:Event.MenuInterfaceEvent.ConfigureWorksetsFaultLog">
            <summary>
            Show the form which allows the user the configure the worksets associated with the fault log data stream type.
            </summary>
        </member>
        <member name="M:Event.MenuInterfaceEvent.ConfigureDataStream">
            <summary>
            Show the form which allows the user the configure the fault log data stream worksets. The <c>Log</c> parameter associated with the
            <c>FormConfigureFaultLogParameters</c>should be specified as null in this instance an no event log is active when the form is instantiated from the
            'Configure/Data Stream' menu option. To configure the Data Stream associated with a specific event log the user must access this form via the 'F8-Stream'
            ToolStripButton control on the 'Diagnostics/Event Log' screen.
            </summary>
        </member>
        <member name="T:Event.Communication.CommunicationEvent">
            <summary>
            Class to manage the communication with the target hardware with respect to the event sub-system.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEvent.CultureEnglishUS">
            <summary>
            The <c>CultureInfo</c> string used to represent - english (US). Value: "en-US";
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEvent.VCUDataStreamColumnCountMax">
            <summary>
            The maximum number of columns in a workset generated from the parameters of a datastream retrieved from the VCU.
            </summary>
        </member>
        <member name="F:Event.Communication.CommunicationEvent.m_EventStreamMarshal">
            <summary>
            Object that is used to call methods that gather or send information pertaining to events
            and the data streams on the embedded PTU target.
            </summary>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.#ctor(Common.Communication.ICommunicationParent)">
            <summary>
            Initialize a new instance of the class and set the function delegates, properties and member variables to those values associated with the
            specified communication interface.
            </summary>
            <param name="communicationInterface">Reference to the communication interface containing the properties and member variables that are to
            be used to initialize the class.</param>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.ChangeEventLog(Common.Configuration.Log)">
            <summary>
            Change the current event log on the VCU to the specified log and initialize the: DataRecordingRate, ChangeStatus, MaxTasks and
            MaxEventsPerTask properties of the log structure with the values returned from the VCU.
            </summary>
            <param name="log">The required event log.</param>
            <remarks>The identifier field of the specified log must be initialized prior to calling this method. Note: The call to the ChangeEventLog
            () method in PTUDLL32.dll refers to the eventLogIndex, whereas the log structure uses the log identifier. The event log index is zero
            based and is equivalent to the event log identifier - 1.</remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.ChangeEventLog() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.LoadEventLog(System.Int16@,System.UInt32@,System.UInt32@)">
            <summary>
            Load the current event log into memory.
            </summary>
            <param name="eventCount">The number of events that have been loaded into memory.</param>
            <param name="oldIndex">The old event index.</param>
            <param name="newIndex">The new event index.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.LoadFaultlog() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.GetEventRecord(Common.Configuration.Log,System.Int16,Common.Configuration.EventRecord@)">
            <summary>
            Get the event record, including the event variable values, corresponding to the specified event index for the event log that is currently
            loaded into memory.
            </summary>
            <param name="currentEventLog">The event log that has been loaded into memory using the LoadEventLog() method.</param>
            <param name="eventIndex">The event index of the required event record.</param>
            <param name="eventRecord">The event record corresponding to the specified event index.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFaultHdr() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.FreeEventLogMemory">
            <summary>
            Clear the event log memory.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.FreeEventLogMemory() method is
            not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.GetEventLogIndex(System.Int16@,System.Int16@)">
            <summary>
            Get the index of the event log that is currently loaded into memory.
            </summary>
            <param name="eventLogIndex">The index of the event log that is currently loaded into memory.</param>
            <param name="eventLogCount">The number of event logs supported by the VCU.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetEventLog() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.GetFaultVar(System.Int16,System.Int16,System.Int16[],System.Double[]@)">
            <summary>
            Retrieve the event variables associated with the specified event.
            </summary>
            <remarks>The number of events consist of the event variables that are collected for every event plus the event specific variables. The
            event variables that are collected for each event consist of those event variables associated with the structure identifier value of 0
            less those defined as event header variables.</remarks>
            <param name="eventIndex">The index of the event.</param>
            <param name="eventVariableCount">The number of event variable that are to be retrieved.</param>
            <param name="dataTypes">The data types associated with each of the variables.</param>
            <param name="values">The event variable values associated with each event.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFaultVar() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.InitializeEventLog">
            <summary>
            Initialize the event log. Clears all event information stored on battery backed RAM for both the maintenance and engineering logs. This
            also clears both the cumulative history, recent history columns and all data logs. This function is typically used to establish a zero
            event/fault reference base when a replacement VCU is installed in a car.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.InitializeEventLog() method is
            not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.ClearEvent">
            <summary>
            Clear the current event log. Remove all events contained in the active event log.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.ClearEvent() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.ExitEventLog">
            <summary>
            Exit the event sub-system.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.ExitEventLog() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.GetDefaultStreamInformation(System.Int16@,System.Int16@,System.Int16@,System.Int16[]@,System.Int16[]@)">
            <summary>
            Get the parameters associated with the default stream.
            </summary>
            <param name="watchVariableCount">The number of watch variables included in the data stream.</param>
            <param name="sampleCount">The number of data samples associated with the data stream.</param>
            <param name="sampleMultiple">The multiple of the base recording interval (60ms) at which the data is sampled.</param>
            <param name="watchIdentifiers">The watch identifiers of the watch variables contained within the data stream.</param>
            <param name="dataTypes">The data types corresponding to each of the watch variables contained within the data stream.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetDefaultStreamInformation()
            method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.GetStreamInformation(System.Int16,System.Int16@,System.Int16@,System.Int16@,System.Int16[]@,System.Int16[]@)">
            <summary>
            Get the parameters associated with the specified stream.
            </summary>
            <param name="streamNumber">The stream number.</param>
            <param name="watchVariableCount">The number of watch variables included in the data stream.</param>
            <param name="sampleCount">The number of data samples associated with the data stream.</param>
            <param name="sampleMultiple">The multiple of the base recording interval (60ms) at which the data is sampled.</param>
            <param name="watchIdentifiers">The watch identifiers of the watch variables contained within the data stream.</param>
            <param name="dataTypes">The data type corresponding to each watch variable contained within the data stream.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetStreamInformation() method is
            not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.GetStream(Common.Configuration.EventRecord)">
            <summary>
            Get the fault log/snapshot log data stream corresponding to the specified record.
            </summary>
            <param name="eventRecord">The event record associated with the data stream that is to be downloaded.</param>
            <returns>The data stream corresponding to the specified event record.</returns>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the calls to the PTUDLL32.GetStreamInformation() or PTUDLL32Event.GetStream()
            methods is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.SetDefaultStreamInformation(System.Int16,System.Collections.Generic.List{System.Int16})">
            <summary>
            Set the default stream parameters.
            </summary>
            <param name="sampleMultiple">The sample multiple of the recording interval at which the data is to be recorded.</param>
            <param name="oldIdentifierList">The list of old identifiers associated with the watch variables that are to be recorded in the fault log,
            in the order in which they are to appear.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.SetDefaultStreamInformation()
            method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.CheckFaultLogger(System.Int16@,System.UInt32@,System.UInt32@)">
            <summary>
            Check the current event log for new events.
            </summary>
            <param name="eventCount">The number of new events that have been added to the event log.</param>
            <param name="newIndex">The new index of the latest event.</param>
            <param name="newEventsLogged">The number of new events logged since the last call using this method.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.CheckFaultlogger() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.GetFltFlagInfo(System.Int16[],System.Int16[]@,System.Int16[]@,System.Int16)">
            <summary>
            Get the status of the flags that control: (a) whether the event type is enabled and (b) whether the event type triggers the recoding of a
            data stream.
            </summary>
            <param name="validFlags">An array of flags that define which of the available event types are valid for the current log. The total length
            of the array is the maximum number of events per task multiplied by the maximum number of tasks and the array element corresponding to a
            particular event type is defined as: {task identifier} * {maximum number of events per task} + {event identifier}. True, indicates that
            the event type is valid; otherwise, false.</param>
            <param name="enabledFlags">An array of flags that indicate whether the event type is enabled. True, indicates that the event type is
            enabled; otherwise, false.</param>
            <param name="streamTriggeredFlags">An array of flags that indicate whether the event type triggers the recording of a data stream.
            True, indicates that the event type triggers the recording of a data stream; otherwise false.</param>
            <param name="eventCount">The maximum number of event types i.e. the maximum number of event types per task multiplied by the maximum
            number of tasks.</param>
            <remarks>The size of the <paramref name="enabledFlags"/> and <paramref name="streamTriggeredFlags"/> arrays is equal to the number of
            defined event types associated with the current log. The array index is mapped to a table that is derived by sorting the records of the
            EVENTS table of the data dictionary corresponding to the LOGID field associated with the current log by the TASKID, EVENTID fields, in
            ascending order. </remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFltFlagInfo() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.SetFaultFlags(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the flag that controls: (a) whether the specified event type is enabled and (b) whether the event type triggers the recoding of a data
            stream.
            </summary>
            <param name="taskIdentfier">The task identifier associated with the event type.</param>
            <param name="eventIdentifier">The event identifier associated with the event type.</param>
            <param name="enabledFlag">A flag to control whether the event type corresponding to the specified task and event identifiers is to be
            enabled. True, if the event type is to be enabled; otherwise, false.</param>
            <param name="streamTriggeredFlag">A flag to control whether the event type corresponding to the specified task and event identifiers is to
            trigger the recording of a data stream. True, if the event type is to trigger the recording of a data stream; otherwise, false.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.SetFaultFlags() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.GetFltHistInfo(System.Int16[],System.Int16[]@,System.Int16[]@,System.Int16,System.Int16)">
            <summary>
            Get the event history associated with the current log.
            </summary>
            <param name="validFlags">An array of flags that define which of the available event types are valid for the current log. The total length
            of the array is the maximum number of events per task multiplied by the maximum number of tasks and the array element corresponding to a
            particular event type is defined as: {task identifier} * {maximum number of events per task} + {event identifier}. True, indicates that
            the event type is valid; otherwise, false.</param>
            <param name="cumulativeHistoryCounts">An array that contains the cumulative number of events of each event type, not including recent
            history.</param>
            <param name="recentHistoryCounts">An array that contains the recent number of events of each event type.</param>
            <param name="maxTasks">The maximum number of tasks that are supported by the current event log.</param>
            <param name="maxEventsPerTask">The maximum number of events per task that are supported by the current event log.</param>
            <remarks>The size of the <paramref name="cumulativeHistoryCounts"/> and <paramref name="recentHistoryCounts"/> arrays is equal to the
            number of defined event types associated with the current log. The array index is mapped to a table that is derived by sorting the records
            of the EVENTS table of the data dictionary corresponding to the LOGID field associated with the current log by the TASKID, EVENTID fields,
            in ascending order. </remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFltHistInfo() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.ConvertToWatchFrameList(System.DateTime,System.Int16,System.Int16,System.Int32[],System.Int16[],Common.Configuration.Workset_t)">
            <summary>
            Convert the data stream values retrieved from the VCU to a format that can be plotted by the <c>FormViewDataStream</c> class.
            </summary>
            <remarks>
            The value array retrieved by from the VCU is initially mapped to the WatchIdentifierList property of Column[0] of the workset, however,
            the WatchElement array associated with each frame must be mapped to the WatchElementList property of the workset.
            </remarks>
            <param name="startTime">The start time of the fault log.</param>
            <param name="sampleCount">The number of samples in the data stream.</param>
            <param name="frameIntervalMs">The interval, in ms, between consecutive data frames.</param>
            <param name="values">The point values corresponding to each variable.</param>
            <param name="dataTypes">The data types associated with each value.</param>
            <param name="workset">The workset that is to be used to define the output format.</param>
            <returns>The watch variable values in the format that can be plotted by the <c>FormViewDataStream</c> class.</returns>
            <exception cref="T:System.ArgumentException">Thrown if one or more of the the watch identifiers defined in the WatchElementList property of the
            workset does nor exist.</exception>
        </member>
        <member name="M:Event.Communication.CommunicationEvent.ConvertToWorkset(System.String,System.Int16[],System.Int16)">
            <summary>
            Convert the specified data stream watch variable identifiers/parameters into a valid workset.
            </summary>
            <remarks>
            All of the watch identifiers returned from the VCU s are added to Column[0] of the workset in the order in which they appear in
            <paramref name="variableIdentifiers"/> and the security level of the workset is set to the lowest security level.
            </remarks>
            <param name="name">The name of the workset.</param>
            <param name="variableIdentifiers">The array of watch identifiers.</param>
            <param name="sampleMultiple">The multiple of the recording interval at which the data is recorded.</param>
            <returns>The watch identifiers contained within <paramref name="variableIdentifiers"/> as a valid workset.</returns>
        </member>
    </members>
</doc>
