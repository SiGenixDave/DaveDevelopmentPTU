<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="T:Common.UserControls.VariableControlSize_t">
            <summary>
            The structure used to define the size of any user control derived from the <c>VariableControl</c> user control.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControlSize_t.Margin">
            <summary>
            The margins around the control.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControlSize_t.WidthVariableNameField">
            <summary>
            The width of the variable name field of the user control, in pixels.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControlSize_t.WidthValueField">
            <summary>
            The width of the value field of the user control, in pixels.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControlSize_t.WidthUnitsField">
            <summary>
            The width of the units field of the user control, in pixels.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControlSize_t.Height">
            <summary>
            The height of the user control, in pixels.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControlSize_t.Size">
            <summary>
            Gets the <c>Size</c> of the user control.
            </summary>
        </member>
        <member name="T:Common.UserControls.UserControlSize_t">
            <summary>
            The structure used to define the size of any user control.
            </summary>
        </member>
        <member name="F:Common.UserControls.UserControlSize_t.Margin">
            <summary>
            The margins to be applied to the control.
            </summary>
        </member>
        <member name="F:Common.UserControls.UserControlSize_t.Size">
            <summary>
            The <c>Size</c> of the user control, in pixels.
            </summary>
        </member>
        <member name="T:Common.UserControls.Margin_t">
            <summary>
            The margins around the usercontrol.
            </summary>
        </member>
        <member name="F:Common.UserControls.Margin_t.left">
            <summary>
            Left hand side.
            </summary>
        </member>
        <member name="F:Common.UserControls.Margin_t.top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:Common.UserControls.Margin_t.right">
            <summary>
            Right hand side.
            </summary>
        </member>
        <member name="F:Common.UserControls.Margin_t.bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="F:Common.UserControls.Margin_t.vertical">
            <summary>
            The combined top and bottom margin.
            </summary>
        </member>
        <member name="F:Common.UserControls.Margin_t.horizontal">
            <summary>
            The combined left and right margin.
            </summary>
        </member>
        <member name="P:Common.UserControls.Margin_t.Left">
            <summary>
            Gets or sets the left margin.
            </summary>
        </member>
        <member name="P:Common.UserControls.Margin_t.Right">
            <summary>
            Gets or sets the right margin.
            </summary>
        </member>
        <member name="P:Common.UserControls.Margin_t.Horizontal">
            <summary>
            Gets the combined left and right margin.
            </summary>
        </member>
        <member name="P:Common.UserControls.Margin_t.Top">
            <summary>
            Gets or sets the top margin.
            </summary>
        </member>
        <member name="P:Common.UserControls.Margin_t.Bottom">
            <summary>
            Gets or sets the bottom margin.
            </summary>
        </member>
        <member name="P:Common.UserControls.Margin_t.Vertical">
            <summary>
            Gets the combined top and bottom margin.
            </summary>
        </member>
        <member name="T:Common.UserControls.WatchControl">
            <summary>
            The watch variable user control. This user control is the parent of all the user controls that are used to display the fields associated with the VCU 
            watch variables 
            </summary>
            <remarks>The value can be the live value retrieved from the target hardware or the value retrieved from a saved data file.</remarks>
        </member>
        <member name="T:Common.UserControls.VariableControl">
            <summary>
            The generic VCU variable user control. This user control is the parent of all the user controls that are used to display the fields associated 
            with all VCU variables 
            </summary>
            <remarks>The value can be the live value retrieved from the target hardware or the value retrieved from a saved data file.</remarks>
        </member>
        <member name="F:Common.UserControls.VariableControl.FormatStringNumericString">
            <summary>
            The .NET format string used to display the Value property of the scalar user control.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.HexValueIdentifier">
            <summary>
            Identifier used to identify a value as a hexadecimal value.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.FormatStringFieldGeneralNumber">
            <summary>
            The format string, converted to lower case, used in the data dictionary to represent a general number. Value: "general number";
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.FormatStringFieldHexadecimal">
            <summary>
            The format string, converted to lower case, used in the data dictionary to represent a hexadecimal number. Value: "hexadecimal";
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.FormatStringHex">
            <summary>
            The format string to display a value using hexadecimal format e.g. 0F0A. Value: "X".
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.DefaultWidthVariableNameField">
            <summary>
            The default width of the variable name field. Value: 200.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.DefaultWidthValueField">
            <summary>
            The default width of the value field. Value: 100.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.DefaultWidthUnitsField">
            <summary>
            The default width of the units field. Value: 100.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.WidthVerticalScrollBar">
            <summary>
            The width, in pixels, of the vertical scroll bar. Value: 28.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_IsDisposed">
            <summary>
            Flag to indicate whether the Dispose() method has been called. True indicates that the Dispose() method has been called; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_Highlight">
            <summary>
            Background colour associated with highlighted text.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_HighlightText">
            <summary>
            Foreground colour associated with highlighted text.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_BackColor">
            <summary>
            The background colour associated with the variable name field and the units field.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_ForeColor">
            <summary>
            The foreground colour associated with the variable name field and the units field. 
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_BackColorValueFieldZero">
            <summary>
            The background colour associated with the value field for a value of zero.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_ForeColorValueFieldZero">
            <summary>
            The foreground colour associated with the value field for a value of zero.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_BackColorValueFieldNonZero">
            <summary>
            The background colour associated with the value field for any value other than zero.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_ForeColorValueFieldNonZero">
            <summary>
            The foreground colour associated with the value field for a value other than zero.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_ClientForm">
            <summary>
            Reference to the client form.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_ClientFont">
            <summary>
            The <c>Font</c> associated with the client form.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_Identifier">
            <summary>
            The identifier of the watch variable associated with the control.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_AttributeFlags">
            <summary>
            The variable attribute flags that are mapped to this control.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_WriteEnabled">
            <summary>
            A flag to indicate whether the variable mapped to the control is write-enabled.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_Value">
            <summary>
            The value of the variable that has been mapped to this control.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_DecimalPlaces">
            <summary>
            The number of decimal places to be used when displaying the data.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_PreviousSecurityLevel">
            <summary>
            The previous value of the <c>SecurityLevel</c> enumerator for this control.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_InvalidValue">
            <summary>
            A static flag to indicate that the data associated with the <c>Value</c> field is currently invalid. This will apply to all user controls derived from this class.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_ReadOnly">
            <summary>
            A static control flag used to force all user controls derived from this user control to be read-only. This will apply to all user controls derived from this class.
            </summary>
        </member>
        <member name="M:Common.UserControls.VariableControl.#ctor">
            <summary>
            Initializes a new instance of the user control.
            </summary>
        </member>
        <member name="M:Common.UserControls.VariableControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.VariableControl.WatchControl_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the user control <c>Click</c> event. Sets the focus to the current user control to ensure that: (a) the <c>Leave</c> event handler for
            the previously selected user control is called and (b) the <c>GotFocus</c> event handler for this control is called.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.VariableControl.WatchControl_GotFocus(System.Object,System.EventArgs)">
            <summary>
            Event handler for the user control <c>GotFocus</c>  event. Highlights the user control.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.VariableControl.WatchControl_Leave(System.Object,System.EventArgs)">
            <summary>
            Event handler for the user control <c>Leave</c> event. Sets the background and foreground colours back to the original values.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.VariableControl.WatchControl_ForeColorChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>ForeColorChanged</c> event. Ensure that the <c>ForeColor</c> properties of the variable name field and units field labels are 
            updated and that the default forecolor variable is updated.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.VariableControl.WatchControl_BackColorChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>BackColorChanged</c> event. Ensure that the <c>BackColor</c> properties of the variable name field and units field labels are 
            updated and the default backcolor variable is updated.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.VariableControl.CheckWriteEnabledStatus(Common.Communication.AttributeFlags,Common.SecurityLevel)">
            <summary>
            If the read-only property is not asserted, check the write-enabled status of the watch variable and set/clear the <c>WriteEnabled</c> property accordingly. 
            The current state is determined by the specified <paramref name="attributeFlags"/> and <paramref name="securityLevel"/> parameters. True, indicates that the 
            watch variable is currently write enabled; false, indicates that the watch variable is currently read-only.
            </summary>
            <param name="attributeFlags">The attribute flags associated with the watch variable.</param>
            <param name="securityLevel">The current security level.</param>
        </member>
        <member name="M:Common.UserControls.VariableControl.SetWriteEnabledProperty(System.Boolean)">
            <summary>
            Set the state of the <c>WriteEnabled</c> property and perform any associated logic.
            </summary>
            <param name="writeEnabled">The required state of the WriteEnabled property.</param>
        </member>
        <member name="F:Common.UserControls.VariableControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.VariableControl.Finalize">
            <summary>
            Destructor / Finalizer. Because Dispose() calls the GC.SuppressFinalize() method, this method is called by the garbage collection process only
            if the consumer of the object doesn't call the Dispose() method, as it should.
            </summary>
        </member>
        <member name="M:Common.UserControls.VariableControl.Dispose">
            <summary>
            Public implementation of the IDisposable.Dispose method, called by the consumer of the object in order to free unmanaged resources
            deterministically.
            </summary>
        </member>
        <member name="M:Common.UserControls.VariableControl.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.VariableControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_LabelNameField">
            <summary>
            The label corresponding to the variable name field.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_LabelValueField">
            <summary>
            The label corresponding to the value field.
            </summary>
        </member>
        <member name="F:Common.UserControls.VariableControl.m_LabelUnitsField">
            <summary>
            The label corresponding to the units field.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.IsDisposed">
            <summary>
            Gets or sets the flag which indicates whether the Dispose() method has been called. True, indicates that the Dispose() method has been called; otherwise, 
            false.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.VariableNameFieldText">
            <summary>
            Gets or sets the text that appears in the variable name field.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.ValueFieldText">
            <summary>
            Gets or sets the text that appears in the value field.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.UnitsFieldText">
            <summary>
            Gets or sets the text that appears in the units field.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.BackColorValueFieldZero">
            <summary>
            Gets or sets the background colour of the the value field for a value of zero.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.ForeColorValueFieldZero">
            <summary>
            Gets or sets the foreground colour of the value field for a value of zero.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.BackColorValueFieldNonZero">
            <summary>
            Gets or sets the background colour of the the value field for any value other than zero.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.ForeColorValueFieldNonZero">
            <summary>
            Gets or sets the foreground colour of the value field for any value other than zero.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.WidthVariableNameField">
            <summary>
            Gets or sets the width of the variable name field, in pixels.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.WidthValueField">
            <summary>
            Gets or sets the width of the value field, in pixels.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.WidthUnitsField">
            <summary>
            Gets or sets the width of the units field, in pixels.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.Value">
            <summary>
            Gets or sets the current value of the variable.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.Identifier">
            <summary>
            Gets or sets the identifier of the watch variable associated with the control.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.AttributeFlags">
            <summary>
            Gets or sets the variable attribute flags associated with the control.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.WriteEnabled">
            <summary>
            Gets the state of the write-enabled flag. True, if the watch variable value can be updated; otherwise, false, to indicate that the value is read-only.
            </summary>
            <remarks>The state of the write-enabled flag is determined by the attribute flags associated with the variable and the current security level.</remarks>
        </member>
        <member name="P:Common.UserControls.VariableControl.ClientForm">
            <summary>
            Gets or sets the client form associated with the control.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.InvalidValue">
            <summary>
            Gets or sets the static control flag used to force the data associated with the <c>Value</c> field to be marked as invalid. This will apply to all user controls derived  
            from this class.
            </summary>
        </member>
        <member name="P:Common.UserControls.VariableControl.ReadOnly">
            <summary>
            Gets or sets the the static control flag used to force all user controls derived from this user control to be read-only. This will apply to all user controls derived  
            from this class.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchControl.#ctor">
            <summary>
            Initializes anew instance of the class.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.WatchControl.ShowHelpPopup">
            <summary>
            Show the watch variable definition using the Windows help pop-up.
            </summary>
        </member>
        <member name="P:Common.UserControls.WatchControl.Identifier">
            <summary>
            Gets or sets the old identifier of the watch variable associated with the control and updates the name and units field accordingly.
            </summary>
        </member>
        <member name="T:Common.UserControls.EventControl">
            <summary>
            The event variable user control. This user control is the parent of all the user controls that are used to display the fields associated with the VCU 
            event variables 
            </summary>
            <remarks>The value can be the live value retrieved from the target hardware or the value retrieved from a saved data file.</remarks>
        </member>
        <member name="M:Common.UserControls.EventControl.#ctor">
            <summary>
            Initializes anew instance of the class.
            </summary>
        </member>
        <member name="M:Common.UserControls.EventControl.m_MenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Definition' context menu option <c>Click</c> event. Call the ShowHelpPopup() method.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.EventControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.EventControl.ShowHelpPopup">
            <summary>
            Show the event variable definition using the Windows help pop-up.
            </summary>
        </member>
        <member name="F:Common.UserControls.EventControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.EventControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Common.UserControls.EventControl.Identifier">
            <summary>
            Gets or sets the event variable identifier of the event variable associated with the control and updates the name and units field accordingly.
            </summary>
        </member>
        <member name="T:Common.UserControls.WatchBitmaskControl">
            <summary>
            The bitmask watch variable user control. Displays the asserted flags corresponding to the specified <c>Value</c> property for the bit mask watch variable specified
            by the <c>Identifier</c> property.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchBitmaskControl.m_ValueUINT">
            <summary>
            The value cast to a uint.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchBitmaskControl.#ctor">
            <summary>
            Initializes a new instance of the bit mask control.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchBitmaskControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.WatchBitmaskControl.m_MenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Definition' context menu option <c>Click</c> event. Call the ShowHelpPopup() method.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.WatchBitmaskControl.m_MenuItemChangeValue_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Change Value' context menu option <c>Click</c> event. If applicable, shows the form which allows the user to change the value of the 
            enumerator watch variable.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.WatchBitmaskControl.m_MenuItemShowFlags_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Flags' context menu option <c>Click</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.WatchBitmaskControl.m_LabelValueField_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>DoubleClick</c> event associated with the value field label. Check whether the watch variable is write-enabled and, if so, 
            simulate the user selecting the 'Change Value' context menu option; otherwise, report a warning.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.WatchBitmaskControl.SetWriteEnabledProperty(System.Boolean)">
            <summary>
            Set the state of the <c>WriteEnabled</c> property and perform any associated logic.
            </summary>
            <param name="writeEnabled">The required state of the WriteEnabled property.</param>
        </member>
        <member name="F:Common.UserControls.WatchBitmaskControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchBitmaskControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchBitmaskControl.m_ContextMenu">
            <summary>
            Reference to the context menu associated with this user control.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchBitmaskControl.m_MenuItemShowDefinition">
            <summary>
            Reference to the 'Show Definition' menu option of the context menu.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchBitmaskControl.m_MenuItemShowFlags">
            <summary>
            Reference to the 'Show Flags' menu option of the context menu.
            </summary>
        </member>
        <member name="P:Common.UserControls.WatchBitmaskControl.WidthUnitsField">
            <summary>
            Gets or sets the width of the units field, in pixels.
            </summary>
        </member>
        <member name="P:Common.UserControls.WatchBitmaskControl.Value">
            <summary>
            Gets or sets the current value of the bit mask watch variable.
            </summary>
        </member>
        <member name="T:Common.UserControls.FormShowFlags">
            <summary>
            Form to display the state of the individual bits within a bit mask watch variable.
            </summary>
        </member>
        <member name="T:Common.Forms.FormPTUDialog">
            <summary>
            Parent form for the PTU dialog box form.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTUDialog.m_MainWindow">
            <summary>
            Reference to the main application window i.e. the multi document interface reference.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTUDialog.m_VisualStudio">
            <summary>
            Flag to indicate that the form was instantiated by the Visual Studio development environment.
            </summary>
            <remarks>This flag can be inspected in the <c>Shown</c> event handler to ensure that inappropriate classes are not instantiated under these circumstances.</remarks>
        </member>
        <member name="F:Common.Forms.FormPTUDialog.m_IsDisposed">
            <summary>
            Flag to indicate whether the Dispose() method has been called. True indicates that the Dispose() method has been called; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTUDialog.m_Security">
            <summary>
            Reference to the <c>Security</c> class associated with the PTU.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTUDialog.m_CalledFrom">
            <summary>
            Reference to the form that called this dialog.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPTUDialog.#ctor">
            <summary>
            Initializes a new instance of the form.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPTUDialog.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormPTUDialog.FormPTUDialog_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the form <c>Shown</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTUDialog.FormPTUDialog_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Event handler for the <c>FormClosing</c> event. Force disposal of the form.
            </summary>
            <remarks>If the user closes the form using the [X] icon at the top right hand side of the form the Dispose() method is not always called immediately which
            can cause proplems on dialog forms which communicate with the target hardware.
            </remarks>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTUDialog.PauseCommunication``1(``0,System.Boolean)">
            <summary>
            Suspend or resume polling of the vehicle control unit by the multiple document interface child form that is currently being displayed.
            </summary>
            <remarks>
            If the MainWindow property of this form i.e. the reference to the main application window is not defined then the call to this method will be ignored.
            </remarks>
            <typeparam name="T">The communication interface type.</typeparam>
            <param name="communicationInterface">Reference to the communication interface.</param>
            <param name="pause">A flag to control whether polling of the VCU by the multiple document interface child form is to be resumed or suspended. True, 
            suspends polling of the VCU; false, resumes polling of the VCU.</param>
        </member>
        <member name="F:Common.Forms.FormPTUDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPTUDialog.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormPTUDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTUDialog.IsDisposed">
            <summary>
            Gets or sets the flag which indicates whether the Dispose() method has been called. True indicates that the Dispose() method has been called; otherwise, false.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTUDialog.CalledFrom">
            <summary>
            Gets or sets the reference to the form that called this dialog.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTUDialog.MainWindow">
            <summary>
            Gets the reference to the main application window.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTUDialog.Security">
            <summary>
            Gets the reference to the system security class.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.KeyTableLayoutPanel">
            <summary>
            The key associated with the <c>TableLayoutPanel</c> control for each tab page. Value: "m_TableLayoutPanel".
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.FormatStringHex">
            <summary>
            The format string to display a value using hexadecimal format e.g. 0F0A. Value: "X".
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.FormatStringHexHeader">
            <summary>
            The string that is to appear before a value displayed in hexadecimal format e.g.0x0A. Value: "0x".
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.IntervalDisplayUpdateMs">
            <summary>
            The interval, in ms, between successive display updates. Value: 500ms.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.BindingMessage">
            <summary>
            The binding string used when appending a supplemental message to an existing message. Value: " - ".
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.AdjustY">
            <summary>
            The Y coordinate adjustment to be applied when determining the preferred location. Value 15px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.AdjustX">
            <summary>
            The X coordinate adjustment to be applied when determining the preferred location. Value: 15px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.AdjustXFlipForm">
            <summary>
            The X coordinate adjustment to be applied when flipping the form over to the other side of the control. Value: 20px. 
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.MarginTopLabel">
            <summary>
            The top margin between the label and the next control. Value: 1px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.MarginBottomLabel">
            <summary>
            The bottom margin between the label and the next control. Value: 1px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.PaddingAll">
            <summary>
            The padding arount the label. Value 2px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.PaddingTableLayoutPanelHorizontal">
            <summary>
            The horizontal padding associated with the layout panel, used to determine the size of the form. Value: 8px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.PaddingTableLayoutPanelWithScrollBarHorizontal">
            <summary>
            The horizontal padding associated with the layout panel, used to determine the size of the form. Value: 25px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.PaddingTableLayoutPanelVertical">
            <summary>
            The vertical padding associated with the layout panel, used to determine the size of the form. Value: 6px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.BorderSizeableVertical">
            <summary>
            Vertical form border associated with a sizeable form. Value: 10px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.BorderSizeableHorizontal">
            <summary>
            Horizontal form border associated with a sizeable form. Value: 10 px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.HeightAdjust">
            <summary>
            The height to subtract from the the primary screen display height when adjusting the form height to fit within the bounds of the primry screen. Value: 25.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.WidthLabel">
            <summary>
            The width of each label, in pixels. Value: 250px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.HeightLabel">
            <summary>
            The height of each label, in pixels. Value: 23px.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_PreviousValue">
            <summary>
            The previous value of the <c>BitmaskUserControl</c> that showed this form. Used to determine if the value has changed since the previous update.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_TableLayoutPanel">
            <summary>
            Reference to the <c>TableLayoutPanel</c> control used to layout the list of flags.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_VariableControl">
            <summary>
            Reference to the bit mask user control that showed this form.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_WatchVariable">
            <summary>
            Reference to the watch variable associated with the user control that called this form.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_ClientAsFormPTU">
            <summary>
            Reference to the client form as type <c>FormPTU</c>.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_OldIdentifier">
            <summary>
            The old identifier of the bitmask watch variable associated with the user control that called this form.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_WatchVariableName">
            <summary>
            The name of the watch variable that appears in the form title.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_ClientAsIDataUpdate">
            <summary>
            Reference to the client form as type <c>IDataUpdate</c>.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_Dragging">
            <summary>
            Tracks whether the form is in drag mode. If it is, mouse movement over the control will be translated into form movements.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_PointClicked">
            <summary>
            Stores the offset where the control is clicked.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_BackColorAssertedState">
            <summary>
            The <c>BackColor</c> associated with the flag if the flag is in the asserted state. Value: Color.Yellow.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_ForeColorAssertedState">
            <summary>
            The <c>ForeColor</c> associated with the flag if the flag is in the asserted state. Value: Color.Black.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_BackColorClearState">
            <summary>
            The <c>BackColor</c> associated with the flag if the flag is NOT in the asserted state i.e. it is clear. Value: Color.WhiteSmoke.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_ForeColorClearState">
            <summary>
            The <c>ForeColor</c> associated with the flag if the flag is NOT in the asserted state i.e. it is clear. Value: Color.Black.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.#ctor">
            <summary>
            Initializes a new instance of the form. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.#ctor(Common.UserControls.VariableControl)">
            <summary>
            Initializes a new instance of the form. (1) Positions the form; (2) displays the watch variable and current value; (3) displays the flag state 
            corresponding to the current value of the watch variable.
            </summary>
            <param name="bitmaskControl">Reference to the bit mask control that called this form.</param>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.m_ButtonClose_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the close button <c>Click</c> event. Closes the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.DataUpdate(System.Object,System.EventArgs)">
            <summary>
            Event handler associated with the <c>DataUpdate</c> event. Determine if the bitmask control value has changed and, if so, update flags state.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.m_PanelWatchVariable_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            <c>MouseDown</c> event handler. Initiates the dragging process.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.m_PanelWatchVariable_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            <c>MouseMove</c> event handler. Processes dragging movements if the form is in drag mode.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.m_PanelWatchVariable_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            <c>MouseUp</c> event handler. Terminates the drag process.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.ConstructLayoutPanel">
            <summary>
            Instantiates and initializes a new <c>TableLayoutPanel</c> control. This panel will be used to layout the plotter controls required to display the 
            watch variable data associated with the specified display column of the workset.
            </summary>
            <returns>The initialized <c>TableLayoutPanel</c> control.</returns>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.ConfigureTableLayoutPanel(System.Windows.Forms.TableLayoutPanel,System.Collections.Generic.List{Common.Configuration.FlagState_t})">
            <summary>
            Add the flag labels used to display the flag information to the specified layout panel.
            </summary>
            <param name="tableLayoutPanel">The layout panel to which the flag labels are to be added.</param>
            <param name="flagStateList">The list defining the flags that are to be shown.</param>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.GetValue">
            <summary>
            Get the current value of the bitmask variable associated with the user control that called this form.
            </summary>
            <returns>The current value of the bitmask watch variable.</returns>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.UpdateTitle(System.String,System.UInt32)">
            <summary>
            Update the form title, this shown the watch variable name and the current value.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.UpdateFlagStates(System.Windows.Forms.TableLayoutControlCollection,System.Collections.Generic.List{Common.Configuration.FlagState_t})">
            <summary>
            Update the <c>BackColor</c> and <c>ForeColor</c> properties  of each flag to reflect the current state.
            </summary>
            <param name="flagStateList">The list defining the current flag states.</param>
            <param name="controlCollection">The collection of label controls used to display the flag states.</param>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.CheckHeight">
            <summary>
            Check whether the the auto-sized height of the <c>TableLayoutPanel</c> exceeds the height of the primary screen and, if so, adjusts it appropriately such 
            that the panel containing the flags will scroll.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.PositionTheForm(Common.UserControls.VariableControl)">
            <summary>
            Position the form relative to the position of the bitmask control that called the form.
            </summary>
            <param name="bitmaskControl">The bitmask user control that alled this form.</param>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormShowFlags.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlags.m_PanelFlagList">
            <summary>
            Reference to the <c>Panel</c> containing the list of flags.
            </summary>
        </member>
        <member name="T:Common.UserControls.FormChangeEnumerator">
            <summary>
            Form used to change the value of a write-enabled enumerator watch variable.
            </summary>
        </member>
        <member name="T:Common.UserControls.FormChangeWatch">
            <summary>
            Form used to change the value of a write-enabled scalar watch variable.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.SleepApplyChange">
            <summary>
            The sleep period,in ms, after asserting the Pause property before applying the change.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_WatchControl">
            <summary>
            Reference to the <c>WatchControl</c> derived user control that showed this form.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_WatchVariable">
            <summary>
            Reference to the watch variable associated with the user control that called this form
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_OldIdentifier">
            <summary>
            The old identifier of the watch variable associated with the user control that called this form.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_WatchVariableName">
            <summary>
            The name of the watch variable that appears in the form title.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_ICommunicationInterface">
            <summary>
            Reference to the class that implements the <c>ICommunicationInterface</c> interface.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_IDataUpdate">
            <summary>
            Reference to the class that implements the <c>IDataUpdate</c> interface.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_IPollTarget">
            <summary>
            Reference to the class that implements the <c>IPollTarget</c> interface.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeWatch.#ctor">
            <summary>
            Zero parameter constructor. Required for Visual Studio.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeWatch.#ctor(Common.UserControls.WatchControl)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="watchControl">The watch control derived user control that called this form.</param>
            <exception cref="T:System.Exception">Thrown if the old Identifier associated with the control that called this form is not defined in the current data dictionary.</exception>
        </member>
        <member name="M:Common.UserControls.FormChangeWatch.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeWatch.m_ButtonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the OK button <c>Click</c> event. If a new value has been specified but has not been applied, apply the change and then close the form; 
            otherwise just close the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeWatch.m_ButtonCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Cancel button <c>Click</c> event. Close the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeWatch.m_ButtonApply_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Apply button <c>Click</c> event. Logic is defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeWatch.DataUpdate(System.Object,System.EventArgs)">
            <summary>
            Event handler associated with the <c>DataUpdate</c> event. Update the form with the latest watch value.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeWatch.UploadValue(Common.Communication.ICommunicationWatch,System.Int16,System.Double)">
            <summary>
            Upload the specified value to the specified watch variable.
            </summary>
            <param name="communicationInterface">Reference to the selected communication interface.</param>
            <param name="oldIdentifier">The old identifier associated with the watch variable.</param>
            <param name="value">The value that is to be uploaded to the VCU.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the communication interface is not specified.</exception>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeWatch.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_PanelOuter">
            <summary>
            Referece to the outer <c>Panel</c>.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_ButtonOK">
            <summary>
            Reference to to OK <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_ButtonCancel">
            <summary>
            Reference to to Cancel <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_ButtonApply">
            <summary>
            Reference to to Apply <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_LabelAllowableRangeUpperValue">
            <summary>
            Reference to the <c>Label</c> used to display the value of the upper range.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeWatch.m_LabelAllowableRangeLowerValue">
            <summary>
            Reference to the <c>Label</c> used to display the value of the lower range.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeEnumerator.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeEnumerator.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeEnumerator.m_NewEnumeratorValue">
            <summary>
            The new value for the enumerator watch variable that is to be downloaded to the VCU.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeEnumerator.m_CurrentEnumeratorValue">
            <summary>
            The current value of the enumerator watch variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeEnumerator.#ctor">
            <summary>
            Zero parameter constructor. Required for Visual Studio.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeEnumerator.#ctor(Common.UserControls.WatchEnumeratorControl)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="enumeratorControl">The <c>WatchControl</c> derived user control that called this form.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeEnumerator.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeEnumerator.m_ButtonApply_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Apply button <c>Click</c> event. If a new value has been specified, apply the change.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeEnumerator.m_ComboBox_SelectedValueChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>SelectedValueChanged</c> event associated with the <c>ComboBox</c> control used to enter the new enumerated text. Enable the Apply 
            button.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="T:Common.DataType_HistoricDataManager">
            <summary>
            The different types of data that may be retrieved from the monitor card.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.Unassigned">
            <summary>
            Unassigned data type.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.MinuteLog">
            <summary>
            Minute Log.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.HourLog">
            <summary>
            Hour Log.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.DayLog">
            <summary>
            Day Log.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.FaultLog">
            <summary>
            Fault Log.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.SimulatedFaultLog">
            <summary>
            Simulated Fault Log.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.RTD">
            <summary>
            Real Time Data.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.EventLog">
            <summary>
            Event Log.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.EventCount">
            <summary>
            Event Count.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.Configuration">
            <summary>
            Configuration Data.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.SnapshotLog">
            <summary>
            Snapshot Log.
            </summary>
        </member>
        <member name="F:Common.DataType_HistoricDataManager.TestMode">
            <summary>
            Test Mode.
            </summary>
        </member>
        <member name="T:Common.LogStatus">
            <summary>
            The status of the data analysed by the <c>VerifyLog</c> method.
            </summary>
        </member>
        <member name="F:Common.LogStatus.Unassigned">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:Common.LogStatus.ValidFaultLog">
            <summary>
            Valid fault log.
            </summary>
        </member>
        <member name="F:Common.LogStatus.ValidStartUpFaultLog">
            <summary>
            Valid start-up fault log.
            </summary>
        </member>
        <member name="F:Common.LogStatus.ValidSnapshotLog">
            <summary>
            Valid snapshot log.
            </summary>
        </member>
        <member name="F:Common.LogStatus.ValidStartUpSnapshotLog">
            <summary>
            Valid start-up snapshot log.
            </summary>
        </member>
        <member name="F:Common.LogStatus.ValidRTD">
            <summary>
            Valid general purpose real-time-data.
            </summary>
        </member>
        <member name="F:Common.LogStatus.InvalidDataInterval">
            <summary>
            The interval between one or more frames of the specified fault/snapshot log was not equal to the expected data interval but was within acceptable limits.
            </summary>
        </member>
        <member name="F:Common.LogStatus.InvalidDataIntervalOutsideLimits">
            <summary>
            The interval between one or more frames of the specified fault/snapshot log was outside the acceptable limits.
            </summary>
        </member>
        <member name="F:Common.LogStatus.InvalidDataIntervalNegative">
            <summary>
            The interval between one or more frames of the specified fault/snapshot log was negative.
            </summary>
        </member>
        <member name="F:Common.LogStatus.InvalidEmptyLogEntry">
            <summary>
            The data contained invalid empty log entries, but was plottable.
            </summary>
        </member>
        <member name="T:Common.HistoricDataManager">
            <summary>
            Supports the display of historic data, allowing the time range to be zoomed in and out. Creates a subset of frames to be included in the plot
            defined by the <c>StartTime</c> and <c>EndTime</c> properties.
            </summary>
        </member>
        <member name="T:Common.IHistoricDataManager">
            <summary>
            Interface to support the display of historic data, allowing the time range to be zoomed in and out. Creates a subset of frames to be included in the plot
            defined by the <c>StartTime</c> and <c>EndTime</c> properties.
            </summary>
        </member>
        <member name="M:Common.IHistoricDataManager.GetWatchElementIndex(System.Int16)">
            <summary>
            Get the watch element index corresponding to the specified old identifier. 
            </summary>
            <remarks>This method uses the AutoScaleWatchI</remarks>
            <returns>NotFound, if the watch index corresponding to the specified old identifier cannot be found; otherwise, returns the watch element index 
            corresponding to the specified old identifier.
            </returns>
        </member>
        <member name="M:Common.IHistoricDataManager.Reset">
            <summary>
            Reset the: <c>StartTime</c>; <c>StopTime</c> and <c>FramesToDisplay</c> properties to their initial values.
            </summary>
        </member>
        <member name="M:Common.IHistoricDataManager.UpdateFrames">
            <summary>
            Updates the <c>FramesToDisplay</c> list with those records that have a date/time that is greater than or equal to the <c>StartTime</c> property
            value but less than or equal to the <c>StopTime</c> property value.
            </summary>
        </member>
        <member name="M:Common.IHistoricDataManager.ContainsTime(System.DateTime)">
            <summary>
            Searches through the <c>FramesToDisplay</c> list to match the entry associated with <paramref name="time"/> +(DataIntervalMs)-(0ms). 
            </summary>
            <returns>
            NotFound (-1) if the specified time cannot be found in the generic list; otherwise, returns the index of the array list that
            contains the specified time.
            </returns>
        </member>
        <member name="P:Common.IHistoricDataManager.StopTime">
            <summary>
            Gets or sets the stop time associated with the plot.
            </summary>
        </member>
        <member name="P:Common.IHistoricDataManager.StartTime">
            <summary>
            Gets or sets the start time associated with the plot.
            </summary>
        </member>
        <member name="P:Common.IHistoricDataManager.FramesToDisplay">
            <summary>
            Gets the list of watch element frames associated with the specified start and stop times.
            </summary>
        </member>
        <member name="P:Common.IHistoricDataManager.AllFrames">
            <summary>
            Gets the list of all watch element frames.
            </summary>
        </member>
        <member name="P:Common.IHistoricDataManager.LogType">
            <summary>
            Gets the type of log associated with the data.
            </summary>
        </member>
        <member name="P:Common.IHistoricDataManager.Workset">
            <summary>
            Gets the workset associated with the data.
            </summary>
        </member>
        <member name="F:Common.HistoricDataManager.NotFound">
            <summary>
            The index value returned if an entry cannot be found. Value: -1.
            </summary>
        </member>
        <member name="F:Common.HistoricDataManager.m_WatchFile">
            <summary>
            Reference to the structure containing the watch file information.
            </summary>
        </member>
        <member name="F:Common.HistoricDataManager.m_FramesAll">
            <summary>
            List containing ALL of the data frames in the set.
            </summary>
        </member>
        <member name="F:Common.HistoricDataManager.m_FramesToPlot">
            <summary>
            List containing the data frames associated with the specified start and stop times.
            </summary>
        </member>
        <member name="F:Common.HistoricDataManager.m_StartTime">
            <summary>
            The start time associated with the plot.
            </summary>
        </member>
        <member name="F:Common.HistoricDataManager.m_StopTime">
            <summary>
            The stop time associated with the plot.
            </summary>
        </member>
        <member name="F:Common.HistoricDataManager.m_LogType">
            <summary>
            The type of log associated with the data.
            </summary>
        </member>
        <member name="F:Common.HistoricDataManager.m_FrameIntervalMs">
            <summary>
            The interval, in ms, between successive frames.
            </summary>
        </member>
        <member name="F:Common.HistoricDataManager.m_AutoScaleWatchValueList">
            <summary>
            A list of the AutoScale values associated with the watch file. This is used to determine the watch element index corresponding to a specified old identifier.
            </summary>
        </member>
        <member name="F:Common.HistoricDataManager.m_Workset">
            <summary>
            The workset associated with the data.
            </summary>
        </member>
        <member name="M:Common.HistoricDataManager.#ctor(Common.WatchFile_t)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="watchFile">The file structure of the log that was saved to disk.</param>
        </member>
        <member name="M:Common.HistoricDataManager.GetWatchElementIndex(System.Int16)">
            <summary>
            Get the watch element index corresponding to the specified old identifier. 
            </summary>
            <remarks>This method uses the information in the <c>AutoScaleWatchValues</c>property of the <c>DataStream</c> associated with the watch file to determine 
            the watch element index corresponding to the specified old identifier in the saved data file.</remarks>
            <returns>NotFound, if the watch element index associated with the specified old identifier cannot be found; otherwise, returns the watch element index 
            corresponding to the specified old identifier.
            </returns>
        </member>
        <member name="M:Common.HistoricDataManager.Reset">
            <summary>
            Reset the: <c>StartTime</c>; <c>StopTime</c> and <c>FramesToDisplay</c> properties to their initial values.
            </summary>
        </member>
        <member name="M:Common.HistoricDataManager.UpdateFrames">
            <summary>
            Updates the <c>FramesToDisplay</c> list with those records that have a date/time that is greater than or equal to the <c>StartTime</c> property
            value but less than or equal to the <c>StopTime</c> property value.
            </summary>
        </member>
        <member name="M:Common.HistoricDataManager.ContainsTime(System.DateTime)">
            <summary>
            Searches through the <c>FramesToDisplay</c> list to match the entry associated with <paramref name="time"/> +(DataIntervalMs)-(0ms). 
            </summary>
            <returns>
            NotFound (-1) if the specified time cannot be found in the generic list; otherwise, returns the index of the array list that
            contains the specified time.
            </returns>
        </member>
        <member name="P:Common.HistoricDataManager.StopTime">
            <summary>
            Gets or sets the stop time associated with the plot.
            </summary>
        </member>
        <member name="P:Common.HistoricDataManager.StartTime">
            <summary>
            Gets or sets the start time associated with the plot.
            </summary>
        </member>
        <member name="P:Common.HistoricDataManager.FramesToDisplay">
            <summary>
            Gets the list of watch element frames associated with the specified start and stop times.
            </summary>
        </member>
        <member name="P:Common.HistoricDataManager.AllFrames">
            <summary>
            Gets the list of all watch element frames.
            </summary>
        </member>
        <member name="P:Common.HistoricDataManager.LogType">
            <summary>
            Gets the type of log associated with the data.
            </summary>
        </member>
        <member name="P:Common.HistoricDataManager.Workset">
            <summary>
            Gets the workset associated with the data.
            </summary>
        </member>
        <member name="T:Common.WorkerThread">
            <summary>
            WorkerThread is a wrapper class around an underlying managed thread. It provides easy to use overloaded constructors, Kill() and Start() methods.
            </summary>
        </member>
        <member name="F:Common.WorkerThread.DefaultMutexWaitDurationMs">
            <summary>
            The default number of ms to wait before releasing the mutex. Value: 2,000 ms.
            </summary>
        </member>
        <member name="F:Common.WorkerThread.TimeoutMsJoin">
            <summary>
            The timeout, in ms, associated with the thread Join() method. Value: 500 ms.
            </summary>
        </member>
        <member name="F:Common.WorkerThread.ThreadName">
            <summary>
            The name of the underlying thread. Value: "Worker Thread".
            </summary>
        </member>
        <member name="F:Common.WorkerThread.m_IsDisposed">
            <summary>
            Flag to indicate whether the Dispose() method has been called. True indicates that the Dispose() method has been called; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.WorkerThread.m_ThreadHandle">
            <summary>
            Used to notify waiting threads that an event has occurred.
            </summary>
        </member>
        <member name="F:Common.WorkerThread.m_Thread">
            <summary>
            Reference to the underlying thread.
            </summary>
        </member>
        <member name="F:Common.WorkerThread.m_StopThread">
            <summary>
            A flag used to control thread execution. True, to stop thread execution; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.WorkerThread.m_Watchdog">
            <summary>
            A watchdog counter that continually increments if the thread is still executing.
            </summary>
        </member>
        <member name="M:Common.WorkerThread.#ctor">
            <summary>
            Initialize a new instance of the class without starting the underlying thread.
            </summary>
            <example>   
            <code>
            workerThread workerThread = new WorkerThread();
            workerThread.Start();
            /* When you are done */
            workerThread.Kill();
            </code>
            </example>
        </member>
        <member name="M:Common.WorkerThread.GetHashCode">
            <summary>
            Get the managed hash code associated with the underlying thread.
            </summary>
            <value></value>
        </member>
        <member name="M:Common.WorkerThread.Equals(System.Object)">
            <summary>
            Determine if the specified object is equal to the current thread.
            </summary>
            <param name="obj">The object against which the thread is to be tested.</param>
            <returns>True, if the thread is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="M:Common.WorkerThread.Start">
             <summary>
            Start the underlying thread.
             </summary>
        </member>
        <member name="M:Common.WorkerThread.Dispose">
            <summary>
            Dispose of the thread.
            </summary>
        </member>
        <member name="M:Common.WorkerThread.Run">
            <summary>
            The code that is to be executed by the thread. The code is defined in the child class.
            </summary>
            <example>
            Example of the Run method code that should be included in the child class.
            <code>
            protected override void Run(object parameter)
            {
                try
               {
                   int i = 0;
                   while (EndLoop == false)
                   {
                       Trace.WriteLine("Thread is alive, Counter is " + i);
                       i++;
                       Thread.Sleep(0);
                   }
               }
               finally
               {
                   m_ThreadHandle.Set();
               }
            }
            </code>
            </example>
        </member>
        <member name="M:Common.WorkerThread.Kill">
            <summary>
            Kill the underlying thread.
            </summary>
        </member>
        <member name="M:Common.WorkerThread.Join">
            <summary>
            Block the calling thread until the underlying thread terminates.
            </summary>
        </member>
        <member name="M:Common.WorkerThread.Join(System.Int32)">
            <summary>
            Block the calling thread until the underlying thread terminates or the specified number of milliseconds elapses.
            </summary>
            <param name="timeoutMs">The number of milliseconds to wait for the underlying thread to terminate</param>
            <returns>True, if the underlying thread has terminated; false, if the timeout has elapsed.</returns>
        </member>
        <member name="M:Common.WorkerThread.Join(System.TimeSpan)">
            <summary>
            Block the calling thread until the underlying thread terminates or the specified time span elapses.
            </summary>
            <param name="timeout">A TimeSpan set to the amount of time to wait for the underlying thread to terminate</param>
            <returns>True, if the underlying thread has terminated; false, if the timeout has elapsed.</returns>
        </member>
        <member name="P:Common.WorkerThread.ManagedThreadId">
            <summary>
            Gets the managed thread ID associated with the underlying thread.
            </summary>
            <value></value>
        </member>
        <member name="P:Common.WorkerThread.Name">
            <summary>
            Gets or sets the name of the underlying thread.
            </summary>
        </member>
        <member name="P:Common.WorkerThread.IsAlive">
            <summary>
            Gets the flag that indicates whether the underlying thread is alive or not. True, if the thread is alive; otherwise, false.
            </summary>
        </member>
        <member name="P:Common.WorkerThread.Handle">
            <summary>
            Gets a waitable handle representing the underlying thread. You can combine the handle in wait operations with other handles. The handle is signaled 
            when the thread terminates. 
            </summary>
        </member>
        <member name="P:Common.WorkerThread.Thread">
            <summary>
            Gets the underlying Thread object, used for calling Suspend(), Resume(), etc.
            </summary>
        </member>
        <member name="P:Common.WorkerThread.StopThread">
            <summary>
            Gets or sets the flag used to control thread execution.
            </summary>
        </member>
        <member name="P:Common.WorkerThread.Watchdog">
            <summary>
            Gets the current value of the watchdog counter.
            </summary>
        </member>
        <member name="T:Common.SecurityLevel">
            <summary>
            Defines the security clearance level.
            </summary>
        </member>
        <member name="F:Common.SecurityLevel.Level0">
            <summary>
            Level 0
            </summary>
        </member>
        <member name="F:Common.SecurityLevel.Level1">
            <summary>
            Level 1
            </summary>
        </member>
        <member name="F:Common.SecurityLevel.Level2">
            <summary>
            Level 2
            </summary>
        </member>
        <member name="F:Common.SecurityLevel.Level3">
            <summary>
            Level 3
            </summary>
        </member>
        <member name="F:Common.SecurityLevel.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Common.SecurityConfiguration_t">
            <summary>
            Structure to store the parameters used to configure the Security class.
            </summary>
        </member>
        <member name="F:Common.SecurityConfiguration_t.m_DescriptionLevel0">
            <summary>
            The description associated with security level 0.
            </summary>
        </member>
        <member name="F:Common.SecurityConfiguration_t.m_DescriptionLevel1">
            <summary>
            The description associated with security level 1.
            </summary>
        </member>
        <member name="F:Common.SecurityConfiguration_t.m_DescriptionLevel2">
            <summary>
            The description associated with security level 2.
            </summary>
        </member>
        <member name="F:Common.SecurityConfiguration_t.m_DescriptionLevel3">
            <summary>
            The description associated with security level 3.
            </summary>
        </member>
        <member name="F:Common.SecurityConfiguration_t.m_SecurityLevelBase">
            <summary>
            The base security level, i.e. the security level that the PTU is set to on startup.
            </summary>
        </member>
        <member name="F:Common.SecurityConfiguration_t.m_SecurityLevelHighest">
            <summary>
            The highest security level appropriate to the client.
            </summary>
        </member>
        <member name="M:Common.SecurityConfiguration_t.#ctor(System.String,System.String,System.String,System.String,Common.SecurityLevel,Common.SecurityLevel)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="descriptionLevel0">The description associated with security level 0.</param>
            <param name="descriptionLevel1">The description associated with security level 1.</param>
            <param name="descriptionLevel2">The description associated with security level 2.</param>
            <param name="descriptionLevel3">The description associated with security level 3.</param>
            <param name="securityLevelBase">The base security level, i.e. the security level that the PTU is set to on startup.</param>
            <param name="securityLevelHighest">The highest security level appropriate to the client.</param>
        </member>
        <member name="P:Common.SecurityConfiguration_t.SecurityLevelBase">
            <summary>
            Gets or sets the base security level, i.e. the security level that the PTU is set to on startup.
            </summary>
        </member>
        <member name="P:Common.SecurityConfiguration_t.SecurityLevelHighest">
            <summary>
            Gets or sets the highest security level appropriate to the client.
            </summary>
        </member>
        <member name="P:Common.SecurityConfiguration_t.DescriptionLevel0">
            <summary>
            Get or sets the description associated with security level 0.
            </summary>
        </member>
        <member name="P:Common.SecurityConfiguration_t.DescriptionLevel1">
            <summary>
            Get or sets the description associated with security level 1.
            </summary>
        </member>
        <member name="P:Common.SecurityConfiguration_t.DescriptionLevel2">
            <summary>
            Get or sets the description associated with security level 2.
            </summary>
        </member>
        <member name="P:Common.SecurityConfiguration_t.DescriptionLevel3">
            <summary>
            Get or sets the description associated with security level 3.
            </summary>
        </member>
        <member name="T:Common.Security">
            <summary>
            Class to manage the security permissions.
            </summary>
        </member>
        <member name="F:Common.Security.DefaultHashCodeLevel0">
            <summary>
            The default password hash code associated with security level 0, not used.
            </summary>
        </member>
        <member name="F:Common.Security.DefaultHashCodeLevel1">
            <summary>
            The default password hash code associated with security level 1.
            </summary>
        </member>
        <member name="F:Common.Security.DefaultHashCodeLevel2">
            <summary>
            The default password hash code associated with security level 2.
            </summary>
        </member>
        <member name="F:Common.Security.DefaultHashCodeLevel3">
            <summary>
            The default password hash code associated with security level 3.
            </summary>
        </member>
        <member name="F:Common.Security.m_SecurityLevelBase">
            <summary>
            The base security level, i.e. the security level that the PTU is set to on startup.
            </summary>
        </member>
        <member name="F:Common.Security.m_SecurityLevelHighest">
            <summary>
            The highest security level appropriate to the client.
            </summary>
        </member>
        <member name="F:Common.Security.m_DefaultDescriptionLevel0">
            <summary>
            The default description associated with the security level 0.
            </summary>
        </member>
        <member name="F:Common.Security.m_DefaultDescriptionLevel1">
            <summary>
            The default description associated with the security level 1.
            </summary>
        </member>
        <member name="F:Common.Security.m_DefaultDescriptionLevel2">
            <summary>
            The default description associated with the level security 2.
            </summary>
        </member>
        <member name="F:Common.Security.m_DefaultDescriptionLevel3">
            <summary>
            The default description associated with the level security 3.
            </summary>
        </member>
        <member name="F:Common.Security.m_DefaultHashCodeArray">
            <summary>
            An array containing the default password hash codes for each security level.
            </summary>
        </member>
        <member name="F:Common.Security.m_HashCodeArray">
            <summary>
            An array containing the password hash codes for each security level.
            </summary>
        </member>
        <member name="F:Common.Security.m_DefaultDescriptionArray">
            <summary>
            An array containing the default descriptions for each security level.
            </summary>
        </member>
        <member name="F:Common.Security.m_DescriptionArray">
            <summary>
            An array containing the descriptions for each security level.
            </summary>
        </member>
        <member name="F:Common.Security.m_SecurityLevelCurrent">
            <summary>
            The current security level.
            </summary>
        </member>
        <member name="F:Common.Security.m_Description">
            <summary>
            The description associated with the current security level.
            </summary>
        </member>
        <member name="F:Common.Security.m_HashCode">
            <summary>
            The hash code associated with the current security level.
            </summary>
        </member>
        <member name="M:Common.Security.#cctor">
            <summary>
            Static constructor. Initialize the class properties.
            </summary>
        </member>
        <member name="M:Common.Security.Initialize">
            <summary>
            Initialize the class properties using the security configuration parameters defined in the data dictionary.
            </summary>
        </member>
        <member name="M:Common.Security.GetSecurityDescription(Common.SecurityLevel)">
            <summary>
            Get the description corresponding to the specified security level.
            </summary>
            <param name="securityLevel">The security level for which the description is required.</param>
            <returns>The security description corresponding to the specified security level.</returns>
        </member>
        <member name="M:Common.Security.SetDescriptions(System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description associated with each security level to the specified values.
            </summary>
            <param name="descriptionLevel0">The description associated with security level 0.</param>
            <param name="descriptionLevel1">The description associated with security level 1.</param>
            <param name="descriptionLevel2">The description associated with security level 2.</param>
            <param name="descriptionLevel3">The description associated with security level 2.</param>
        </member>
        <member name="M:Common.Security.SetLevel(Common.SecurityLevel)">
            <summary>
            Sets the current security clearance level to the specified value.
            </summary>
            <param name="securityLevel">The new security level.</param>
        </member>
        <member name="M:Common.Security.SetHashCode(Common.SecurityLevel,System.Int64)">
            <summary>
            Sets the password hash code for the specified security level to the specified value and updates the application settings.
            </summary>
            <param name="securityLevel">The security level for which the password hash code is to be set.</param>
            <param name="newHashCode">The new password hash code.</param>
        </member>
        <member name="M:Common.Security.SetHashCodeToDefault(Common.SecurityLevel)">
            <summary>
            Sets the password hash code for the specified security level to the default value and updates the application settings.
            </summary>
            <param name="securityLevel">The security level for which the password hash code is to be reset.</param>
        </member>
        <member name="M:Common.Security.SaveHashCode(Common.SecurityLevel,System.Int64)">
            <summary>
            Saves the hash code associated with the specified security level to the user settings.
            </summary>
            <param name="securityLevel">The security level associated with the hash code.</param>
            <param name="hashCode">The password hash code.</param>
        </member>
        <member name="M:Common.Security.GetHashCode(System.String)">
            <summary>
            Gets the hash code corresponding to the specified password string.
            </summary>
            <remarks>This is used during development to determine the hashcode associated with the desired default password.</remarks>
            <param name="password">The password string for which the hash code is required.</param>
            <returns>The password hash code.</returns>
        </member>
        <member name="P:Common.Security.SecurityLevelBase">
            <summary>
            Gets or sets the base security level, i.e. the security level that the PTU is set to on startup.
            </summary>
        </member>
        <member name="P:Common.Security.SecurityLevelHighest">
            <summary>
            Gets or sets the highest security level appropriate to the client.
            </summary>
        </member>
        <member name="P:Common.Security.DescriptionLevel0">
            <summary>
            Gets or sets the description associated with security level 0.
            </summary>
        </member>
        <member name="P:Common.Security.DescriptionLevel1">
            <summary>
            Gets or sets the description associated with security level 1.
            </summary>
        </member>
        <member name="P:Common.Security.DescriptionLevel2">
            <summary>
            Gets or sets the description associated with security level 2.
            </summary>
        </member>
        <member name="P:Common.Security.DescriptionLevel3">
            <summary>
            Gets or sets the description associated with security level 3.
            </summary>
        </member>
        <member name="P:Common.Security.HashCodeLevel0">
            <summary>
            Gets or sets the password hash code associated with security level 0.
            </summary>
        </member>
        <member name="P:Common.Security.HashCodeLevel1">
            <summary>
            Gets or sets the password hash code associated with security level 1.
            </summary>
        </member>
        <member name="P:Common.Security.HashCodeLevel2">
            <summary>
            Gets or sets the password hash code associated with security level 2.
            </summary>
        </member>
        <member name="P:Common.Security.HashCodeLevel3">
            <summary>
            Gets or sets the password hash code associated with security level 3.
            </summary>
        </member>
        <member name="P:Common.Security.SecurityLevelCurrent">
            <summary>
            Gets or sets the current security level.
            </summary>
        </member>
        <member name="P:Common.Security.Description">
            <summary>
            Gets the description associated with the current security level.
            </summary>
        </member>
        <member name="P:Common.Security.HashCode">
            <summary>
            Gets the password hash code associated with the current security level.
            </summary>
        </member>
        <member name="T:Common.UserControls.PlotterBitmask">
            <summary>
            A user control to plot the state of a specified bit of a bitmask watch variable over a specified time period.
            </summary>
        </member>
        <member name="T:Common.UserControls.IPlotterBitmask">
            <summary>
            Interface associated with a user control that is used to plot individual bits of a bitmask watch variables.
            </summary>
        </member>
        <member name="T:Common.UserControls.IPlotterWatch">
            <summary>
            Interface associated with any user control which can be used to plot historic data.
            </summary>
        </member>
        <member name="M:Common.UserControls.IPlotterWatch.Dispose">
            <summary>
            Dispose of the user control.
            </summary>
        </member>
        <member name="M:Common.UserControls.IPlotterWatch.Reset">
            <summary>
            Reset the <c>Plotter</c> user control. Erases the graph and gets ready to start the whole plotting process again.
            </summary>
        </member>
        <member name="M:Common.UserControls.IPlotterWatch.Start">
            <summary>
            Start plotting.
            </summary>
        </member>
        <member name="M:Common.UserControls.IPlotterWatch.Stop">
            <summary>
            Stop plotting. The user can now view the graphs
            </summary>
        </member>
        <member name="M:Common.UserControls.IPlotterWatch.UpdateDisplay">
            <summary>
            Update the graph display. Call this method once all the data values have been set so that the changes are displayed on the graph.	
            </summary>
        </member>
        <member name="M:Common.UserControls.IPlotterWatch.SetHighlight(System.Boolean)">
            <summary>
            Set the <c>UserControl</c> to the specified highlighted state.
            </summary>
            <param name="value">True, to highlight the <c>UserControl</c>; otherwise, false.</param>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.Plot">
            <summary>
            Gets the reference to <c>Plotter</c> user control; enables the programmer to access the <c>Plotter</c> properties and events.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.Channels">
            <summary>
            Gets the channel collection associated with the plot.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.Description">
            <summary>
            Gets or sets the description text associated with the watch variable.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.Identifier">
            <summary>
            Gets or sets the watch identifier associated with the watch variable that is to be plotted.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.IsFaultLog">
            <summary>
            Gets or sets the flag used to indicate that the data corresponds to a fault log.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.PlotIntervalMs">
            <summary>
            Gets or sets the time interval, in ms, between successive plots. Used when displaying live data.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.StartTime">
            <summary>
            Gets or sets the start time of the plot.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.XRange">
            <summary>
            Gets or sets the time span of the X axis.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.TripTime">
            <summary>
            Gets or sets the time of the actal trip.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.TimeDisplayStyle">
            <summary>
            Gets or sets the display style of the time axis.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.BackColor">
            <summary>
            Gets or sets the BackColor of the user control.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.Font">
            <summary>
            Gets or sets the Font of the user control.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.Size">
            <summary>
            Gets or sets the size of the control, in pixels.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.Removed">
            <summary>
            Gets or sets the flag that indicates whether the user has removed this plot from the display.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.Visible">
            <summary>
            Gets or sets the flag that determines whether the <c>Control</c> is visible or hidden.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterWatch.RemoveSelectedPlot">
            <summary>
            Gets the ToolStripMenuItem control associated with the 'Remove Selected Plot(s)' context menu option.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterBitmask.AlarmState">
            <summary>
            Gets or sets the alarm state associated with the plot. The default state is true i.e. a low to high transition represents an alarm.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterBitmask.Bit">
            <summary>
            Gets or sets the bit of the watch variable value that is to be plotted.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterBitmask.KeyToolStripMenuItemRemoveSelected">
            <summary>
            The key string used to access the 'Remove Selected Plot(s)' context menu item. Value: "m_ToolStripMenuItemRemoveSelected".
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterBitmask.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.Finalize">
            <summary>
            Destructor / Finalizer. Because Dispose() calls the GC.SuppressFinalize() method, this method is called by the garbage collection process only
            if the consumer of the object doesn't call the Dispose() method, as it should.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.Dispose">
            <summary>
            Public implementation of the IDisposable.Dispose method. Called by the consumer of the object in order to free unmanaged resources
            deterministically.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.Dispose(System.Boolean)">
            <summary>
            Clean up any resources that are currently being used.
            </summary>
            <param name="disposing">True, if the managed resources should be disposed of; otherwise, false.</param>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterBitmask.m_IsDisposed">
            <summary>
            Flag to indicate whether the object has been disposed. True, indicates that the object has already been disposed; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterBitmask.m_Description">
            <summary>
            The text associated with the description field.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterBitmask.m_Identifier">
            <summary>
            The bitmask watch variable identifier associated with the control.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterBitmask.m_Bit">
            <summary>
            The bit of the watch variable value that is to be plotted.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterBitmask.m_Removed">
            <summary>
            A flag that indicates whether the user has removed this plot from the display.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.#ctor(System.Int16,System.Byte)">
            <summary>
            Initializes a new instance of the class. Initializes the description
            </summary>
            <param name="oldIdentifier">The old identifier of the bitmask watch variable that is to be plotted.</param>
            <param name="bit">The bit of the bitmask watch variable value that is to be plotted.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the specified watch variable has not been defined in the data dictionary.</exception>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.#ctor">
            <summary>
            Initializes a new instance of the UserControl.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the user control.
            </summary>
            <param name="disposing">True, to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.m_ToolStripMenuItemRemoveSelected_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for 'Remove' context menu option. Remove all of the selected controls from the plot display.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.m_ToolStripMenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Definition' context menu. Show the diagnostic help information associated with the control.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.m_Plotter_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event handler for the <c>MouseDown</c> event associated with the <c>Plotter</c> control. Check the state of the control key and if this is pressed, add or 
            remove the control from the list of selected controls, depending upon whether the control is already in the list of selected controls. If the control 
            key is clear then clear the existing list and add the control to the new list.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.ContextMenuStrip_Opened(System.Object,System.EventArgs)">
            <summary>
            Event handler for the context menu Opened event. Check whether multiple controls are selected and, if so, ensure that only the 'Remove Selected Plot(s)' 
            context menu option is enabled.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.Start">
            <summary>
            Start plotting.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.Stop">
            <summary>
            Stop plotting. This allows the user to view the graphs.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.UpdateDisplay">
            <summary>
            Update the graph display. Call this method once all the data values have been set so that the changes are displayed on the graph.
            </summary>		
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.Reset">
            <summary>
            Reset the <c>Plotter</c> user control. Erases the graph and gets ready to start the whole plotting process again.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.SetHighlight(System.Boolean)">
            <summary>
            Set the <c>UserControl</c> to the specified highlighted state.
            </summary>
            <param name="value">True, to highlight the <c>UserControl</c>; otherwise, false.</param>
        </member>
        <member name="M:Common.UserControls.PlotterBitmask.ShowHelpPopup">
            <summary>
            Show the watch variable definition using the Windows help pop-up.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.IsDisposed">
            <summary>
            Gets or sets the flag which indicates whether the Dispose() method has been called. True, indicates that the Dispose() method has been called; otherwise, 
            false.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.Plot">
            <summary>
            Gets the reference to <c>Plotter</c> user control; enables the programmer to access the <c>Plotter</c> properties and events.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.StartTime">
            <summary>
            Gets or sets the start time of the plot.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.TripTime">
            <summary>
            Gets or sets the time of the actal trip.
            </summary>
            <remarks>Will display a vertical line at the time of the actual trip.</remarks>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.IsFaultLog">
            <summary>
            Gets or sets the flag used to indicate that the data corresponds to a fault log.
            </summary>
            <remarks>If the data corresponds to a fault log a vertical line will be drawn at the time specified by the <c>TripTime</c> property.</remarks>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.XRange">
            <summary>
            Gets or sets the time span of the X axis.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.TimeDisplayStyle">
            <summary>
            Gets or sets the display style of the time axis.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.PlotIntervalMs">
            <summary>
            Gets or sets the time interval, in ms, between successive plots. Used when displaying live data.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.Description">
            <summary>
            Gets or sets the description text associated with watch variable flag/bit.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.Identifier">
            <summary>
            Gets or sets the bitmask watch variable identifier associated with the control.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.Bit">
            <summary>
            Gets or sets the bit of the watch variable value that is to be plotted.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.AlarmState">
            <summary>
            Gets or sets the alarm state associated with the plot. The default state is true i.e. a low to high transition represents an alarm.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.Channels">
            <summary>
            Gets the channel collection associated with the plot.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.Size">
            <summary>
            Gets or sets the size of the control, in pixels.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.Removed">
            <summary>
            Gets or sets the flag that indicates whether the user has removed this plot from the display.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterBitmask.RemoveSelectedPlot">
            <summary>
            Gets the ToolStripMenuItem control associated with the 'Remove Selected Plot(s)' context menu option.
            </summary>
        </member>
        <member name="T:Common.IDataUpdate">
            <summary>
            Interface for any form that publishes a DataUpdate event to indicate that the data that is being displayed on the form has been updated.
            </summary>
        </member>
        <member name="E:Common.IDataUpdate.DataUpdate">
            <summary>
            Occurs whenever the data on display is updated.
            </summary>
        </member>
        <member name="T:Common.Forms.FormWorksetDefine">
            <summary>
            Form to allow the user to define: (a) the watch variables that are associated with a workset and (b) the order and column in which they are to be displayed.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.HeaderLengthMax">
            <summary>
            The maximum number of characters associated with the header text. Value: 50.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_PanelOuter">
            <summary>
            Reference to the Remove watch variable <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LegendName1">
            <summary>
            Reference to the <c>Label</c> corresponding to the 'Watch Window' legend.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LegendName2">
            <summary>
            Reference to the <c>Label</c> corresponding to the 'Configuration' legend.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TextBoxName">
            <summary>
            Reference to the <c>TextBox</c> used to specify/display the name of the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LegendSecurity">
            <summary>
            Reference to the 'Security' legend.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TextBoxSecurityLevel">
            <summary>
            Reference to the <c>TextBox</c> contol used to display the security level.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_GroupBoxWorkset">
            <summary>
            Reference to the <c>GroupBox</c> control associated with the list of watch variables in the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TabControlColumn">
            <summary>
            Reference to the <c>TabControl</c> used to define the workset column entries.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TabPageColumn1">
            <summary>
            Reference to the <c>TabPage</c> used to define the entries associated with column 1 of the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TabPageColumn2">
            <summary>
            Reference to the <c>TabPage</c> used to define the entries associated with column 2 of the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TabPageColumn3">
            <summary>
            Reference to the <c>TabPage</c> used to define the entries associated with column 3 of the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ListBox1">
            <summary>
            Reference to the <c>ListBox</c> control that displays the entries associated with column 1.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ListBox2">
            <summary>
            Reference to the <c>ListBox</c> control that displays the entries associated with column 2.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ListBox3">
            <summary>
            Reference to the <c>ListBox</c> control that displays the entries associated with column 3.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LabelCount1">
            <summary>
            Reference to the <c>Label</c> that display the number of entries associated with column 1.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LabelCount2">
            <summary>
            Reference to the <c>Label</c> that display the number of entries associated with column 2.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LabelCount3">
            <summary>
            Reference to the <c>Label</c> that display the number of entries associated with column 3.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LabelCountTotal">
            <summary>
            Reference to the <c>Label</c> that displays the total number of entries that have been added to the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LegendHeader1">
            <summary>
            Reference to the Header legend associated with column 1.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TextBoxHeader1">
            <summary>
            Reference to the <c>TextBox</c> used to specify/display the header text associated with column 1.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LegendHeader2">
            <summary>
            Reference to the Header legend associated with column 2.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TextBoxHeader2">
            <summary>
            Reference to the <c>TextBox</c> used to specify/display the header text associated with column 2.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LegendHeader3">
            <summary>
            Reference to the Header legend associated with column 3.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TextBoxHeader3">
            <summary>
            Reference to the <c>TextBox</c> used to specify/display the header text associated with column 3.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_GroupBoxAvailable">
            <summary>
            Reference to the <c>GroupBox</c> control associated with the list of available watch variables.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TabControlAvailable">
            <summary>
            Reference to the <c>TabControl</c> associated with the list of available watch variables.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TabPageAll">
            <summary>
            Reference to the <c>TabPage</c> associated with the list of available watch variables.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ListBoxAvailable">
            <summary>
            Reference to the <c>ListBox</c> control that displays the available entries.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LabelAvailableCount">
            <summary>
            Reference to the <c>Label</c> that display the number of available entries.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ButtonRemove">
            <summary>
            Reference to the 'Add' <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ButtonMoveUp">
            <summary>
            Reference to the 'Move Up' <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ButtonMoveDown">
            <summary>
            Reference to the 'Move Down' <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ButtonOK">
            <summary>
            Reference to the OK <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ButtonCancel">
            <summary>
            Reference to the Cancel <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ButtonApply">
            <summary>
            Reference to the Apply <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ButtonAdd">
            <summary>
            Reference to the 'Remove' <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ContextMenuColumns">
            <summary>
            Reference to the 'Columns' <c>ContextMenuStrip</c> control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ContextMenuAll">
            <summary>
            Reference to the 'Available' <c>ContextMenuStrip</c> control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_MenuItemChangeChartScaleFactor">
            <summary>
            Reference to the 'Change Chart Scale' <c>ToolStripMenuItem</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_MenuItemConfigureBitmaskPlot">
            <summary>
             Reference to the 'Configure Bitmask Plots' <c>ToolStripMenuItem</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ListBox1RowHeader">
            <summary>
            Reference to the <c>ListBox</c> control displaying the row header text for column 1.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ListBox3RowHeader">
            <summary>
            Reference to the <c>ListBox</c> control displaying the row header text for column 1.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ListBox2RowHeader">
            <summary>
            Reference to the <c>ListBox</c> control displaying the row header text for column 1.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LabelListBox1ColumnHeader">
            <summary>
            Reference to the header <c>Label</c> associated with the <c>ListBox</c> control displaying the items defined in column 1 of the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LabelListBox2ColumnHeader">
            <summary>
            Reference to the header <c>Label</c> associated with the <c>ListBox</c> control displaying the items defined in column 2 of the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LabelListBox3ColumnHeader">
            <summary>
            Reference to the header <c>Label</c> associated with the <c>ListBox</c> control displaying the items defined in column 3 of the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LabelListBoxAvailableColumnHeader">
            <summary>
            Reference to the header <c>Label</c> associated with the <c>ListBox</c> control displaying the available items.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_PanelStatusMessage">
            <summary>
            Reference to the <c>Panel</c> control associated with the status message.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ButtonClear">
            <summary>
            Reference to the 'Clear/Search' <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LegendSearch">
            <summary>
            Reference to the 'Search' <c>Label</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_TextBoxSearch">
            <summary>
            Reference to the 'Search' <c>TextBox</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_MenuItemShowDefinition">
            <summary>
            Reference to the 'Show Definition' <c>ToolStripMenuItem</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_MenuItemShowDefinitionAll">
            <summary>
            Reference to the 'Show Definition All' <c>ToolStripMenuItem</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ErrorProvider">
            <summary>
            Reference to the <c>ErrorProvider</c> control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LabelStatusMessage">
            <summary>
            Reference to the 'Status Message' <c>Label</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_LegendImageStatusMessage">
            <summary>
            Reference to the 'Status Message' image <c>Label</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ScreenOffset">
            <summary>
            The screenOffset is used to account for any desktop bands that may be at the top or left side of the screen when determining when to cancel the drag-drop 
            operation.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_DragBoxFromMouseDown">
            <summary>
            Used to determine if a drag-drop operation has been started. If the mouse moves outside of this rectangle with the left-mouse key still depressed then
            a drag-drop operation has been deemed to have started.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_CreateMode">
            <summary>
            Flag indicating whether the form is to be used to: (a) create a new workset or (b) edit an existing workset. True, indicates create new workset; otherwise, 
            false to indicate edit an existing workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_WatchItems">
            <summary>
            An array of all watch variables contained within the data dictionary, sorted by watch identifer. Used to keep track of which watch identifiers have been 
            added to the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ListItemCount">
            <summary>
            The combined number of list items associated with the target <c>ListBox</c> controls.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_WorksetCollection">
            <summary>
            The workset collection that is to be managed.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ListBoxSelected">
            <summary>
            A reference to the <c>ListBox</c> associated with the currently selected 'Column' <c>TabPage</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_ModifyEnabled">
            <summary>
            A flag that controls whether the user is able to modify the current workset. True, to allow the user to modify the workset; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_DefaultNewWorksetName">
            <summary>
            The default name for any new workset that is created.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_AddedWatchVariables">
            <summary>
            A list of the watch variables that have been added to the workset. Used to correct any changes made by the user if the Cancel button is selected.
            </summary>
            <remarks>If the code gets changed to not close the form when clicking OK or Apply, this could become an issue because we are not currently explicitly
            clearing the list in such cases.</remarks>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_RemovedWatchVariables">
            <summary>
            A list of the watch variables that have been removed from the workset. Used to correct any changes made by the user if the Cancel button is selected.
            </summary>
            <remarks>If the code gets changed to not close the form when clicking OK or Apply, this could become an issue because we are not currently explicitly
            clearing the list in such cases.</remarks>
        </member>
        <member name="F:Common.Forms.FormWorksetDefine.m_EntryCountMax">
            <summary>
            The maximum number of watch variables that the workset can support.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.#ctor">
            <summary>
            Initializes an new instance of the form. Zero parameter constructor, required by Visual Studio.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.#ctor(Common.Configuration.WorksetCollection)">
            <summary>
            Initializes an new instance of the form. This constructor is used when a new workset is being created. Populates the 'Available' 
            <c>ListBox</c> controls with the appropriate watch variables.
            </summary>
            <param name="worksetCollection">The workset collection that is to be managed.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.#ctor(Common.Configuration.WorksetCollection,Common.Configuration.Workset_t,System.Boolean)">
            <summary>
            <para>
            Initializes an new instance of the form for use when EDITing a workset. Populates the 'Configuration' ListBoxes with the data associated with the 
            specified configuration and populates the 'Available' ListBoxes with the remaining data i.e. the difference between the configuration and the default data.
            </para>
            <para>
            If the <paramref name="applyVisible"/> parameter is set to true the form will include an apply button so that the user can update the workset without closing
            the form between updates. This is especially useful when modifying the active workset while the workset is on display.
            </para>
            </summary>
            <param name="worksetCollection">The workset collection that is to be managed.</param>
            <param name="workset">The workset that is to be edited.</param>
            <param name="applyVisible">Flag to specify whether the Apply button is to be visible; True, displays the Apply button, false, hides the Apply button.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ListBoxTarget_DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Event handler for the <c>DragDrop</c> event associated with the target <c>ListBox</c>. The drag-drop operation is complete, move the selected items.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ListBoxSource_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event handler for the <c>MouseDown</c> event associated the source <c>ListBox</c>. Keep a record of the drag-drop rectangle for the current mouse
            coordinates to determine if a drag-drop operation is about to take place.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ListBoxSource_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event handler for the <c>MouseUp</c> event associated with the source <c>ListBox</c>. Reset the drag-drop operation.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ListBoxSource_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event handler for the <c>MouseMove</c> event associated with the source <c>ListBox</c>. Check if a drag-drop operation has been started and, if so, call
            the DoDragDrop() method of the <c>ListBox</c>.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ListBoxTarget_DragEnter(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Evnt handler for the <c>DragEnter</c> event associated with the target <c>ListBox</c>.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ListBoxAvailable_Enter(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Enter' event associated with the 'Available' ListBox control. Clears any selected items associated with the ListBox
            controls for Column 1, Column 2, and Column 3.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ListBoxWorkset_Enter(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Enter' events associated with the ListBox controls for Column 1, Column 2, or Column 3. Clears any selected items associated
            with the 'Available' ListBox control.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ButtonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the OK button <c>Click</c> event. Add the defined workset to the to list of available worksets.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ButtonCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Cancel button <c>Click</c> event. Close the form and restore the <c>m_WatchItems</c> array to its initial state.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ButtonApply_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Apply button <c>Click</c> event. Add the defined workset to the to list of available worksets.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ButtonMoveUp_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler associated with the 'Move Up' button <c>Click</c> event. Move the selected item up the list.
            </summary>
            <remarks>Only one item may be selected at a time. If more than one item is selected the action will be ignored.</remarks>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ButtonMoveDown_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler associated with the 'Move Down' button <c>Click</c> event. Move the selected item down the list.
            </summary>
            <remarks>Only one item may be selected at a time. If more than one item is selected the action will be ignored.</remarks>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ButtonClear_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Clear Search' button <c>Click</c> event. Clears the search textbox.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ButtonAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Add button <c>Click</c> event. Add the selected watch variables to the workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ButtonRemove_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Remove button <c>Click</c> event. Remove the selected watch variables from the workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_TabControlColumns_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Column' <c>TabControl</c> <c>SelectedIndexChanged</c> event. Activate the <c>ListBox</c> control associated with the 
            selected tab page. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.FormWorksetDefine_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Event handler for key events. If the user has pressed the delete key, removes the selected item from the list that currently has focus (source) and moves it 
            to the curently active destination list.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.TextBoxColumnHeader_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Event handler for the column header TextBox controls <c>KeyPress</c> event. Checks if the user entered a [CR] and, if so, moves the focus to the next
            <c>TextBox</c> control on the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.TextBox_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Event handler for ALL TextBox <c>Validating</c> events. Validates the user entry and warns the user, using an ErrorProvider control, if
            the value entered is outside the valid range.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_TxtSearch_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Search' TextBox <c>TextChanged</c> event. Filters the list of available watch variable names using the text entered into the 
            'Search' text box.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_TextBoxName_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Name' TextBox <c>TextChanged</c> event. If the form is in create mode, check whether the specified workset name exists and if so, 
            prevent the user from saving the workset by disabling the OK button.
            </summary>
            <remarks>As the Apply button is only visible when editing an existing workset, the enabled state of the Apply button is not modified by this method.</remarks>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_ContextMenuColumns_Opened(System.Object,System.EventArgs)">
            <summary>
            Event handler for the context menu <c>Opened</c> event. The logic is defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_MenuItemShowDefinitionColumn_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Click</c> event associated with the 'Show Definition' context menu option attached to the <c>ListBox</c> containing the watch 
            variables that have been added to the workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_MenuItemChangeChartScaleFactor_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Click</c> event associated with the 'Change Chart Scale' context menu option attached to the <c>ListBox</c> containing the watch 
            variables that have been added to the workset. The logic is defined in the child class. 
            </summary>
            <remarks>This menu option is only relevant to the child form used to configure the chart recorder.</remarks>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_MenuItemConfigureBitmaskPlot_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Click</c> event associated with the 'Configure Bitmask Plot' context menu option. The logic is defined in the child class.
            </summary>
            <remarks>This menu option is only relevant to the child form used to configure the plot layout.</remarks>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.m_MenuItemShowDefinitionAll_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Click</c> event associated with the 'Show Definition' context menu option attached to the <c>ListBox</c> containing the available 
            watch variables.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.Add(System.Windows.Forms.ListBox@,System.Windows.Forms.ListBox@)">
            <summary>
            Add the selected items from the specified source <c>ListBox</c> control to the specified destination <c>ListBox</c> control.
            </summary>
            <param name="listSource">The source <c>ListBox</c> control.</param>
            <param name="listDestination">the destination <c>ListBox</c> control.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.Remove(System.Windows.Forms.ListBox@,System.Windows.Forms.ListBox@)">
            <summary>
            Remove the selected item(s) from the specified source <c>ListBox</c> control and add the item(s) to the specified destination <c>ListBox</c> control,
            in the correct watch identifier order.
            </summary>
            <remarks>This method should only be used when removing entries from the workset.</remarks>
            <param name="listSource">The source <c>ListBox</c> control.</param>
            <param name="listDestination">The destination <c>ListBox</c> control.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.AddSupplementalFields(System.Int32)">
            <summary>
            Add any supplemental workset fields specific to the child class. The logic is defined in the child class.
            </summary>
            <param name="oldIdentifier">The old identifier of the watch variable that is to be added.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.RemoveSupplementalFields(System.Int32)">
            <summary>
            Remove any supplemental workset fields specific to the child class. The logic is defined in the child class.
            </summary>
            <param name="removeAtIndex">The index of the ListBox row that is to be removed.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.UpdateCount">
            <summary>
            Update the count labels that show the number of watch variables that are available and the number that have been added to each column of the workset.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.WatchItemAddRange(System.Windows.Forms.ListBox,Common.Configuration.Column_t)">
            <summary>
            Add the watch variables defined in the specified list of old identifiers to the specified <c>ListBox</c> control.
            </summary>
            <param name="listBox">The <c>ListBox</c> to which the items are to be added.</param>
            <param name="worksetColumn">The column of the workset that is to be added to the <c>ListBox</c> control.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.UpdateListBoxAvailable(Common.Configuration.WatchItem_t[])">
            <summary>
            Update the <c>ListBox</c> control that displays the list of available watch variables that match the current search criteria with the list of currently 
            available watch variables, sorted alpha-numerically. 
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.Save">
            <summary>
            Save the workset information to disk.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.CompareWatchItemsByVariableName(System.Object,System.Object)">
            <summary>
            Comparison function used to compare alphanumerically the watch variable names associated with the specified <seealso cref="T:Common.Configuration.WatchItem_t"/> parameters. 
            Although the parameters are passed as objects they are cast to <seealso cref="T:Common.Configuration.WatchItem_t"/> types.
            </summary>
            <remarks>The parameters must be passed as object types rather than <c>WatchItem_t</c> types as the generic list that is to be sorted is an array of 
            objects.</remarks>
            <param name="first">The first <c>WatchItem_t</c> parameter, as an object reference.</param>
            <param name="second">The second <c>WatchItem_t</c> parameter, as an object reference.</param>
            <returns>-1 if the watch variable name associated with <paramref name="first"/> is less than the watch variable name associated with 
            <paramref name="second"/>; 0 is the watch variable names associated with both comparands are equal and +1 if the watch variable name associated
            with <paramref name="first"/> is greater than the watch variable name associated with <paramref name="second"/>.</returns>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.ContainsSearchText(System.Object)">
            <summary>
            Predicate function called by the <c>List.FindAll()</c> method to determine if the watch variable name associated with the OldIdentifier field of the 
            specified item in the list 'Contains' the text specified in the search text box.
            </summary>
            <param name="item">The list item that is to be processed.</param>
            <returns>True if the specified item meets the logic requirements given in the function; otherwise false.</returns>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.ClearStatusMessage">
            <summary>
            Clear the status message label.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.WriteStatusMessage(System.String)">
            <summary>
            Write the specified message to the status message label.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.DisableApplyAndOKButtons(System.String)">
            <summary>
            Disable the Apply and OK buttons and, if <c>message != string.Empty</c>, display the specified status message.
            </summary>
            <param name="message">The message text. If the message is string.Empty no warning icon or message text will be displayed.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.EnableApplyAndOKButtons">
            <summary>
            Enable the Apply and OK buttons and clear the status message provided at least one watch variable has been selected and the workset name has been
            defined; otherwise, disable the Apply and OK buttons and write a status message.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetDefine.OnDataUpdate(System.Object,System.EventArgs)">
            <summary>
            Raise a <c>DataUpdate</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="eventArgs">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="E:Common.Forms.FormWorksetDefine.DataUpdate">
            <summary>
            Occurs whenever the workset is updated.
            </summary>
        </member>
        <member name="P:Common.Forms.FormWorksetDefine.DefaultNewWorksetName">
            <summary>
            Gets the default name for any new workset that is created.
            </summary>
        </member>
        <member name="P:Common.Forms.FormWorksetDefine.ModifyEnabled">
            <summary>
            Gets or sets the flag that controls whether the user is able to modify the current workset. True, to allow the user to modify the workset; otherwise, false.
            </summary>
        </member>
        <member name="P:Common.Forms.FormWorksetDefine.EntryCountMax">
            <summary>
            Gets the maximum number of watch variables that the workset can support.
            </summary>
        </member>
        <member name="T:Common.UserControls.PlotterEnumerator">
            <summary>
            A user control to plot the text associated with an enumerator watch variable over a specified time period.
            </summary>
        </member>
        <member name="T:Common.UserControls.IPlotterEnumerator">
            <summary>
            Interface associated with a user control that is used to plot scalar watch variables.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterEnumerator.Units">
            <summary>
            Gets or sets the engineering units associated with the watch variable.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumerator.KeyToolStripMenuItemRemoveSelected">
            <summary>
            The key string used to access the 'Remove Selected Plot(s)' context menu item. Value: "m_ToolStripMenuItemRemoveSelected".
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumerator.ButtonXBorder">
            <summary>
            The X axis border to allow when positioning the limit changing buttons. Value: 10.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumerator.BorderXUnits">
            <summary>
            The border between the location of the Units label and the size of the control.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumerator.DefaultGraduationsY">
            <summary>
            The default number of graduations on the Y axis.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumerator.m_IsDisposed">
            <summary>
            Flag to indicate whether the object has been disposed. True, indicates that the object has already been disposed; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumerator.m_Description">
            <summary>
            The text associated with the description field.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumerator.m_Units">
            <summary>
            The engineering units associated with the Y axis.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumerator.m_Identifier">
            <summary>
            The watch variable identifier associated with the control.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumerator.m_Removed">
            <summary>
            A flag that indicates whether the user has removed this plot from the display.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.#ctor(System.Int16,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the class. Initializes the description, units and the upper and lower limits, in engineering units, of the Y axis.
            </summary>
            <param name="oldIdentifier">The old identifier of the enumerator watch variable that is to be plotted.</param>
            <param name="upperDisplayLimit">The upper limit, in engineering units, of the Y axis.</param>
            <param name="lowerDisplayLimit">The lower limit, in engineering units, of the Y axis..</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the specified watch variable has not been defined in the data dictionary.</exception>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.#ctor">
            <summary>
            Initializes a new instance of the UserControl.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the user control.
            </summary>
            <param name="disposing">True, to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.m_ToolStripMenuItemRemoveSelected_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for 'Remove' context menu option. Remove all of the selected controls from the plot display.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.m_ToolStripMenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Definition' context menu. Show the diagnostic help information associated with the control.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.m_Plotter_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event handler for the <c>MouseDown</c> event associated with the <c>Plotter</c> control. Check the state of the control key and if this is pressed, add or 
            remove the control from the list of selected controls, depending upon whether the control is already in the list of selected controls. If the control 
            key is clear then clear the existing list and add the control to the new list.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.ContextMenuStrip_Opened(System.Object,System.EventArgs)">
            <summary>
            Event handler for the context menu Opened event. Check whether multiple controls are selected and, if so, ensure that only the 'Remove Selected Plot(s)' 
            context menu option is enabled.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.Start">
            <summary>
            Start plotting.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.Stop">
            <summary>
            Stop plotting. The user can now view the graphs
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.UpdateDisplay">
            <summary>
            Update the graph display. Call this method once all the data values have been set so that the changes are displayed on the graph.
            </summary>		
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.Reset">
            <summary>
            Reset the <c>Plotter</c> user control. Erases the graph and gets ready to start the whole plotting process again.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.SetHighlight(System.Boolean)">
            <summary>
            Set the <c>UserControl</c> to the specified highlighted state.
            </summary>
            <param name="value">True, to highlight the <c>UserControl</c>; otherwise, false.</param>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.ShowHelpPopup">
            <summary>
            Show the watch variable definition using the Windows help pop-up.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumerator.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.Finalize">
            <summary>
            Destructor / Finalizer. Because Dispose() calls the GC.SuppressFinalize() method, this method is called by the garbage collection process only
            if the consumer of the object doesn't call the Dispose() method, as it should.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.Dispose">
            <summary>
            Public implementation of the IDisposable.Dispose method. Called by the consumer of the object in order to free unmanaged resources
            deterministically.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources that are currently being used.
            </summary>
            <param name="disposing">True, if the managed resources should be disposed of; otherwise, false.</param>
        </member>
        <member name="M:Common.UserControls.PlotterEnumerator.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.IsDisposed">
            <summary>
            Gets or sets the flag which indicates whether the Dispose() method has been called. True, indicates that the Dispose() method has been called; otherwise, 
            false.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.Plot">
            <summary>
            Gets the reference to <c>Plotter</c> user control; enables the programmer to access the <c>Plotter</c> properties and events.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.StartTime">
            <summary>
            Gets or sets the start time of the plot.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.TripTime">
            <summary>
            Gets or sets the time of the actal trip.
            </summary>
            <remarks>Will display a vertical line at the time of the actual trip.</remarks>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.IsFaultLog">
            <summary>
            Gets or sets the flag used to indicate that the data corresponds to a fault log.
            </summary>
            <remarks>If the data corresponds to a fault log a vertical line will be drawn at the time specified by the <c>TripTime</c> property.</remarks>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.XRange">
            <summary>
            Gets or sets the time span of the X axis.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.TimeDisplayStyle">
            <summary>
            Gets or sets the display style of the time axis.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.PlotIntervalMs">
            <summary>
            Gets or sets the time interval, in ms, between successive plots. Used when displaying live data.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.Description">
            <summary>
            Gets or sets the description text associated with the watch variable.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.Units">
            <summary>
            Gets or sets the engineering units associated with the watch variable.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.Identifier">
            <summary>
            Gets or sets the watch variable identifier associated with the control.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.Channels">
            <summary>
            Gets the channel collection associated with the plot.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.Size">
            <summary>
            Gets or sets the size of the control, in pixels.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.ClientForm">
            <summary>
            Gets or sets the client form associated with the control.
            </summary>
            <remarks>The client form must inherit from the FormPTU class.</remarks>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.Removed">
            <summary>
            Gets or sets the flag that indicates whether the user has removed this plot from the display.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumerator.RemoveSelectedPlot">
            <summary>
            Gets the ToolStripMenuItem control associated with the 'Remove Selected Plot(s)' context menu option.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataStreamTypeParameters_t">
            <summary>
            Structure containing the fields that define the different types of data streams that can be logged.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataStreamTypeParameters_t.Identifier">
            <summary>
            The primary key identifier associated with this type of data stream.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataStreamTypeParameters_t.TripIndex">
            <summary>
            The sample index corresponding to the time of the trip.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataStreamTypeParameters_t.WatchVariablesMax">
            <summary>
            The maximum number of watch variables associated with the data stream.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataStreamTypeParameters_t.Name">
            <summary>
            The name of the datastream type.
            </summary>
        </member>
        <member name="M:Common.Configuration.DataStreamTypeParameters_t.SetToDefaulDataStreamType">
            <summary>
            Set the parameters to those associated with the default data stream type.
            </summary>
            <remarks>The parameters associated with the default data stream type are defined in the Parameter class.</remarks>
        </member>
        <member name="T:Common.UserControls.WatchEnumeratorControl">
            <summary>
            The enumerator watch variable user control. Displays the enumerator text corresponding to the specified <c>Value</c> property for the enumerator watch variable 
            specified by the <c>Identifier</c> property.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchEnumeratorControl.m_ValueUINT">
            <summary>
            The value cast to a uint.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchEnumeratorControl.m_ClientAsFormPTU">
            <summary>
            Reference to the client form as type <c>FormPTU</c>.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchEnumeratorControl.#ctor">
            <summary>
            Initializes a new instance of the enumerator user control.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchEnumeratorControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.WatchEnumeratorControl.m_MenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Definition' context menu option <c>Click</c> event. Call the ShowHelpPopup() method.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.WatchEnumeratorControl.m_MenuItemChangeValue_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Change Value' context menu option <c>Click</c> event. If applicable, shows the form which allows the user to change the value of the 
            enumerator watch variable.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.WatchEnumeratorControl.m_LabelValueField_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>DoubleClick</c> event associated with the value field label. Check whether the watch variable is write-enabled and, if so, 
            simulate the user selecting the 'Change Value' context menu option; otherwise, report a warning.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.WatchEnumeratorControl.SetWriteEnabledProperty(System.Boolean)">
            <summary>
            Set the state of the <c>WriteEnabled</c> property and perform any associated logic.
            </summary>
            <param name="writeEnabled">The required state of the WriteEnabled property.</param>
        </member>
        <member name="F:Common.UserControls.WatchEnumeratorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchEnumeratorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchEnumeratorControl.m_ContextMenu">
            <summary>
            Reference to the context menu associated with this user control.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchEnumeratorControl.m_MenuItemShowDefinition">
            <summary>
            Reference to the 'Show Definition' menu option of the context menu.
            </summary>
        </member>
        <member name="P:Common.UserControls.WatchEnumeratorControl.Value">
            <summary>
            Gets or sets the current value of the enumerator watch variable.
            </summary>
        </member>
        <member name="P:Common.UserControls.WatchEnumeratorControl.ClientForm">
            <summary>
            Gets or sets the client form associated with the control.
            </summary>
        </member>
        <member name="T:Common.UserControls.PlotterEnumeratorParent">
            <summary>
            User control to plot enumerator watch variables.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumeratorParent.TransparencyXYText">
            <summary>
            The transparency of the XYText. Value: 130.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumeratorParent.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterEnumeratorParent.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumeratorParent.m_OldIdentifier">
            <summary>
            The old identifier of the enumerator watch variable that is to be plotted. User to determine the text that is to be displayed corresponding to the 
            current value.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumeratorParent.m_ClientAsFormPTU">
            <summary>
            Reference to the client form as type <c>FormPTU</c>.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterEnumeratorParent.m_WatchVariable">
            <summary>
            The watch variable that is to be plotted;
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterEnumeratorParent.#ctor">
            <summary>
            Initializes a new instance of the user control.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterEnumeratorParent.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the user control.
            </summary>
            <param name="disposing">True, to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.PlotterEnumeratorParent.DrawXYText(System.Drawing.Graphics)">
            <summary>
            Draw the X and Y coordinates for the active channel.
            </summary>
            <remarks>The plotter must be in stop mode and the mouse hover coordinates must be within the graph area.</remarks>
            <param name="graphics">Reference to the GDI+ drawing surface.</param>
        </member>
        <member name="M:Common.UserControls.PlotterEnumeratorParent.DrawYAxisValues(System.Drawing.Graphics)">
            <summary>
            Draws the y axis value for the currently selected channel
            </summary>
            <param name="graphics">Reference to the GDI+ drawing surface.</param>
        </member>
        <member name="P:Common.UserControls.PlotterEnumeratorParent.OldIdentifier">
            <summary>
            Gets or sets the old identifier of the enumerator watch variable that is to be plotted. User to determine the text that is to be displayed corresponding to the 
            current value.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterEnumeratorParent.ClientForm">
            <summary>
            Gets or sets the client form associated with the control.
            </summary>
            <remarks>The client form must inherit from the FormPTU class.</remarks>
        </member>
        <member name="T:Common.IWatchFile">
            <summary>
            Interface for any class that plots saved watch data.
            </summary>
        </member>
        <member name="M:Common.IWatchFile.SaveWatchFile">
            <summary>
            Save the WatchFile_t structure to disk.
            </summary>
        </member>
        <member name="P:Common.IWatchFile.WatchFile">
            <summary>
            Gets or sets the de-serialized recorded watch data that is to be displayed.
            </summary>
        </member>
        <member name="T:Common.Forms.FormPlotDefine">
            <summary>
            A form class to allow the user to define how saved watch files and fault logs are to be plotted.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPlotDefine.m_Workset">
            <summary>
            The workset associated with the saved watch data.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPlotDefine.m_TextBoxHeaders">
            <summary>
            An array of <c>TextBox</c> controls representing the <c>TextBox</c> controls used to input the header information associated with each column of the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPlotDefine.m_ListBoxes">
            <summary>
            An array of <c>ListBox</c> controls representing the <c>ListBox</c> controls used to define the watch variables associated with each <c>PlotTabPage</c>of the 
            workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPlotDefine.m_RestoreDefault">
            <summary>
            Flag to control whether the default plot layout is to be restored. True, if the default plot values are to be restored; otherwise, false.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.#ctor">
            <summary>
            Initializes a new instance of the form. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.#ctor(Common.Configuration.Workset_t)">
            <summary>
            Initializes a new instance of the form.
            </summary>
            <param name="workset">The workset associated with the saved data.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.FormPlotDefine_Shown(System.Object,System.EventArgs)">
            <summary>
            The event handler for the <c>Shown</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.FormPlotDefine_DataUpdate(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>DataUpdate</c> event raised by the FormWorksetDefine class. This event is raised if the workset parameters are modified.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.m_ButtonApply_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Apply button <c>Click</c> event. Update the workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.m_ButtonCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Cancel button <c>Click</c> event. Close the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.m_ButtonRestoreDefaults_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show All' button <c>Click</c> event. Set the PlotTabPages field of the workset to the default values i.e. base the layout of the plot 
            screen upon the contents of the Column field of the workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.m_ContextMenuColumns_Opened(System.Object,System.EventArgs)">
            <summary>
            Event handler for the context menu <c>Opened</c> event. Check whether the selected watch variable is a bitmask and, if so, enable the 'Configure 
            Bitmask Plot' context menu; otherwise, disable it.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.m_MenuItemConfigureBitmaskPlot_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Click</c> event associated with the 'Configure Bitmask Plot' context menu option. Show the form that allows the user to define 
            which bits of the selected bitmask watch variable are to be plotted.
            </summary>
            <remarks>This menu option is only relevant to the child form used to configure the plot layout.</remarks>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.m_ListBoxTarget_DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Event handler for the <c>DragDrop</c> event associated with the target <c>ListBox</c>. The drag-drop operation is complete, move the selected items.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.Add(System.Windows.Forms.ListBox@,System.Windows.Forms.ListBox@)">
            <summary>
            Add the selected items from the specified source <c>ListBox</c> control to the specified destination <c>ListBox</c> control.
            </summary>
            <param name="listSource">The source <c>ListBox</c> control.</param>
            <param name="listDestination">the destination <c>ListBox</c> control.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.Remove(System.Windows.Forms.ListBox@,System.Windows.Forms.ListBox@)">
            <summary>
            Remove the selected item(s) from the specified source <c>ListBox</c> control and add the item(s) to the specified destination <c>ListBox</c> control, in the
            correct watch identifier order.
            </summary>
            <remarks>This method should only be used when removing entries from the workset.</remarks>
            <param name="listSource">The source <c>ListBox</c> control.</param>
            <param name="listDestination">The destination <c>ListBox</c> control.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.UpdateCount">
            <summary>
            Update the count labels that show the number of watch variables that are available and the number that have been added to each column of the workset.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.UpdateListBoxAvailable(Common.Configuration.WatchItem_t[])">
            <summary>
            Update the <c>ListBox</c> control that displays the list of available watch variables that match the current search criteria with the list of currently 
            available watch variables, sorted alpha-numerically. 
            </summary>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.EnableApplyAndOKButtons">
            <summary>
            Enable the Apply and OK Buttons without carrying out any checks on the workset. 
            </summary>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.ConvertToWorkset(System.String)">
            <summary>
            Convert the current user setting to a workset.
            </summary>
            <param name="worksetName">The name of the workset.</param>
            <returns>The user settings converted to a workset.</returns>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.WatchItemAddRange(System.Windows.Forms.ListBox,Common.Configuration.PlotTabPage_t)">
            <summary>
            Add the watch variables defined in the specified list of old identifiers to the specified <c>ListBox</c> control.
            </summary>
            <param name="listBox">The <c>ListBox</c> to which the items are to be added.</param>
            <param name="plotTabPage">The plot tab page of the workset that is to be added to the <c>ListBox</c> control.</param>
        </member>
        <member name="F:Common.Forms.FormPlotDefine.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPlotDefine.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPlotDefine.m_ButtonRestoreDefault">
            <summary>
            Reference to the 'Restore Default' <c>Button</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPlotDefine.configureBitmaskToolStripMenuItem">
            <summary>
            Reference to the 'Configure Bitmask' <c>ToolStripMenuItem</c>.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPlotDefine.EntryCountMax">
            <summary>
            For plots, we allow MaxInt entries, essentially no limit.
            </summary>
        </member>
        <member name="T:Common.Configuration.LogTable">
            <summary>
            A class to help access the event log records contained within the <c>LOGS</c> table of the data dictionary. The records are accessed using 
            the log identifier value.
            </summary>
        </member>
        <member name="T:Common.Configuration.Table`2">
            <summary>
            Generic abstract class to help the programmer create child classes that simplify access to all primary key data tables in the data dictionary.
            </summary>
            <typeparam name="R">The class/interface that defines the fields associated with the records of the data table.</typeparam>
            <typeparam name="T">The primary key data table, <seealso cref="T:Common.Configuration.Record"/>, of the data dictionary that is to be processed.</typeparam>
        </member>
        <member name="F:Common.Configuration.Table`2.m_IdentifierMax">
            <summary>
            The maximum value of the primary key identifier, <seealso cref="T:Common.Configuration.Record"/>, in the specified data table.
            </summary>
        </member>
        <member name="F:Common.Configuration.Table`2.m_Records">
            <summary>
            An array of the records in the specified table. The array index corresponds to the record identifier.
            </summary>
        </member>
        <member name="F:Common.Configuration.Table`2.m_RecordList">
            <summary>
            A generic list of the records in the specified table, ordered by record identifier.
            </summary>
        </member>
        <member name="M:Common.Configuration.Table`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Common.Configuration.Table`2.BuildDataTable(`1)">
            <summary>
            Builds an array of the records contained within the specified data table and determines the maximum value of the primary key identifier associated with the 
            data table.
            </summary>
            <param name="dataTable">The primary key data table of the data dictionary that is to be processed.</param>
            <returns>An array of the records in the specified data table.</returns>
        </member>
        <member name="P:Common.Configuration.Table`2.Items">
            <summary>
            Gets an indexed array of the records in the specified data table. The array index corresponds to the unique identifier.
            </summary>
        </member>
        <member name="P:Common.Configuration.Table`2.RecordList">
            <summary>
            Gets a generic list of the records in the specified data table, ordered by unique identifier.
            </summary>
        </member>
        <member name="P:Common.Configuration.Table`2.IdentifierMax">
            <summary>
            Gets the maximum value of the primary key identifier, <seealso cref="T:Common.Configuration.Record"/>, in the specified data table
            </summary>
        </member>
        <member name="F:Common.Configuration.LogTable.m_DataStreamTypes">
            <summary>
            An array of <c>DataStreamTypeParameters_t</c> structures that define the parameters associated with each type of data stream.
            </summary>
        </member>
        <member name="F:Common.Configuration.LogTable.m_LogsDataTable">
            <summary>
            Reference to the specified events data table from the data dictionary.
            </summary>
        </member>
        <member name="M:Common.Configuration.LogTable.#ctor(Common.Configuration.DataDictionary.LOGSDataTable,Common.Configuration.DataDictionary.DataStreamTypesDataTable)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="dataTable">Reference to the <c>LOGS</c> table of the data dictionary.</param>
            <param name="dataStreamTypesDataTable">Reference to the <c>DataStreamTypes</c> table of the data dictionary i.e. the data stream parameters associated with each log.</param>
        </member>
        <member name="M:Common.Configuration.LogTable.BuildDataTable(Common.Configuration.DataDictionary.LOGSDataTable)">
            <summary>
            Build an array of the event log records contained within the <c>LOGS</c> table of the data dictionary. This array is used to access the 
            parameters associated with the event logs defined in the table. The array element is mapped to the log identifier field of the table.
            </summary>
            <param name="dataTable">Reference to the <c>LOGS</c> data table of the data dictionary.</param>
            <returns>An array of the event log records contained within the <c>LOGS</c> table of the data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.LogTable.BuildDataStreamTypeParametersTable(Common.Configuration.DataDictionary.DataStreamTypesDataTable)">
            <summary>
            Build an array of the records contained within the <c>DataStreamTypes</c> table of the data dictionary. This is used to access the data stream parameters 
            associated with a particular log. The array element is mapped to the data stream type identifier field of the table.
            </summary>
            <param name="dataStreamTypesDataTable">Reference to the <c>DataStreamTypes</c> table of the data dictionary.</param>
            <returns>An array of the records contained within the <c>DataStreamTypes</c> table of the data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="T:Common.Communication.WatchFrame_t">
            <summary>
            The watch element data associated with an individual frame.
            </summary>
            <remarks>A frame corresponds to all the watch elements retrieved from a single communiation transaction.</remarks>
        </member>
        <member name="F:Common.Communication.WatchFrame_t.m_CurrentDateTime">
            <summary>
            The date/time associated with the current frame as a .NET <c>DateTime</c> object.
            </summary>
        </member>
        <member name="F:Common.Communication.WatchFrame_t.m_WatchElements">
            <summary>
            The array of watch elements retrieved from the target hardware.
            </summary>
        </member>
        <member name="P:Common.Communication.WatchFrame_t.CurrentDateTime">
            <summary>
            Gets or sets the date/time associated with the current frame.
            </summary>
        </member>
        <member name="P:Common.Communication.WatchFrame_t.WatchElements">
            <summary>
            Gets or sets the array of watch elements retrieved from the target hardware.
            </summary>
        </member>
        <member name="T:Common.Configuration.Parameter">
            <summary>
            Class to manage the PTU configurable parameters.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.YearCodeSizeLong">
            <summary>
            The number of year code digits associated with the long year code format. Value: 4.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.YearCodeSizeShort">
            <summary>
            The number of year code digits associated with the short year code format. Value: 2.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.SecondsPerMinute">
            <summary>
            The number of seconds in a minute. Value: 60.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.WatchSizeChartRecorder">
            <summary>
             The number of watch variables supported by the chart recorder. Value: 8.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.SizeTestList">
            <summary>
            The number of self tests that can be defined in a test list. Value: 40.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.WatchSizeInteractiveTest">
            <summary>
            The number of self test variables that can be supported by each interactive self test. Value: 16.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.IntervalWatchMs">
            <summary>
            The default interval, in ms, between successive polls to the VCU for watch variable data. Value: 240ms.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DurationPageMinutes">
            <summary>
            The duration, in minutes, of a single page worth of recorded data. Value: 30 minutes.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DurationMsSimulatedFaultLog">
            <summary>
            The total duration, in ms, of the simulated fault log data-stream. Value: 20,000 ms.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DurationPostTripMsSimulatedFaultLog">
            <summary>
            The duration, in ms, of the simulated fault log data stream following the trip. VAlue: 5,000 ms.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.PaddingTopWorkingArea">
            <summary>
            The padding to be applied to the top of the <c>Screen.PrimaryScreen.WorkingArea</c>.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.PaddingBottomWorkingArea">
            <summary>
            The padding to be applied to the bottom of the <c>Screen.PrimaryScreen.WorkingArea</c>.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.PaddingVerticalWorkingArea">
            <summary>
            The combined top and bottom padding.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.PaddingLeftWorkingArea">
            <summary>
            The padding to be applied to the left of the <c>Screen.PrimaryScreen.WorkingArea</c>.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.PaddingRightWorkingArea">
            <summary>
            The padding to be applied to the right of the <c>Screen.PrimaryScreen.WorkingArea</c>.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.PaddingHorizontalWorkingArea">
            <summary>
            The combined left and right padding.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultDataStreamTypeIdentifier">
            <summary>
            The identifier associated with the default data stream type. Value: 0.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultDataStreamTypeTripIndex">
            <summary>
            The sample index corresponding to the time of the trip that is associated with the default data stream type. Value: 75.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultDataStreamTypeWatchVariablesMax">
            <summary>
            The number of recorded watch variables associated with the default data stream type. Value: 8.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultYearCodeSize">
            <summary>
            The default <c>YearCodeSize</c>. Value: 2.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultWatchSize">
            <summary>
            The default <c>WatchSize</c> supported by the target hardware. Value: 20.
            </summary>
            <remarks>The <c>WatchSize</c> is the number of watch variables that can be downloaded from the target hardware in a single transaction.
            </remarks>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultWatchSizeFaultLog">
            <summary>
            The default number of watch variables that can be recorded by each event log.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultWibuBoxPortId">
            <summary>
            The default port identifier associated with the WibuBox security device. Value: 38.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultFontFamilyXP">
            <summary>
            The default font for Windows XP systems. Value: "Tahoma".
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultFontSizeXP">
            <summary>
            The default font size for Windows XP systems. Value: 8F.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultFontFamilyWin7">
            <summary>
            The default font for Windows 7 systems. Value: "Segoe UI".
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultFontSizeWin7">
            <summary>
            The default font size for Windows 7 systems. Value: 9F.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultSecurityLevelBase">
            <summary>
            The default base security level, i.e. the security level that the PTU is set to on startup.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.DefaultSecurityLevelHighest">
            <summary>
            The default highest security level appropriate to the client.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_GenerateCSV">
            <summary>
            A flag to specify whether the event log is to be saved as a CSV file as well as an XML file. True, if a CSV file of the event log is to be created; otherwise, 
            false.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_ShowLogName">
            <summary>
            A flag to specify whether saved event logs are to display the log name associated with the event or not. True, if the log name is to be displayed; otherwise,
            false.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_Use4DigitYearCode">
            <summary>
            A flag to specify whether the Vehicle Control Unit for the current project uses a 2 digit year code or a 4 digit year code. True, if the Vehicle Control
            Unit for the current project uses a 4 digit year code; otherwise, false.
            <para>Valid 2 digit year code values are within the range 0 to 99, where 0 to 69 represent years 2000 to 2069, and 70 to 99 represent years 1970
            to 1999. Valid 4 digit year codes are within the range 1900 to 2199.</para>
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_FunctionFlags">
            <summary>
            <para>A bitmask used to specify which programmable function options are to be used.</para>
            Bit 7   -   Not Used.
            Bit 6   -   Not Used.
            Bit 5   -   Not Used.
            Bit 4   -   Not Used.
            Bit 3   -   Not Used.
            Bit 2   -   GenerateCSF - Flag to specify whether the event log is to be saved as a CSV file as well as an XML file. True, if a CSV file of the event log is
                                      to be created.
            <para>
            Bit 1   -   ShowLogName - Flag to specify whether the event log name field is to be shown when saved event logs are displayed. True, if the
                                      log name is to be displayed; otherwise, false.
            </para>
            <para>
            Bit 0   -   Use4DigitYearCode - Flag to specify whether the project VCU uses a 2 or 4 digit year code. True, if the project uses a 4 digit year code;
                        otherwise, false.
            </para>
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_WatchSize">
            <summary>
            The <c>WatchSize</c> supported by the target hardware.
            </summary>
            <remarks>The <c>WatchSize</c> is the number of watch variables that can be downloaded from the target hardware in a single transaction.
            </remarks>
        </member>
        <member name="F:Common.Configuration.Parameter.m_WatchSizeFaultLog">
            <summary>
            The number of watch variables that can be recorded by each event log.
            </summary>
            <remarks>On most systems this value is the same for each event log, however, if the event log sub-system supports more than one datastream
            type then this value is set to the maximum value. For example, the CTA project support two types of event log, the snapshot log and the
            normal log. The datastream corresponding to the snapshot log supports 20 watch variables and the datastream corresponding to the normal
            event logs supports 16 watch variables. For this project this value is set to 20.</remarks>
        </member>
        <member name="F:Common.Configuration.Parameter.m_SupportsMultipleDataStreamTypes">
            <summary>
            A flag that indicates whether the event log sub-system supports multiple datastream types.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_ProjectInformation">
            <summary>
            The project parameters associated with the current data dictionary i.e. the fields associated with the FILEINFO table.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_WibuBox">
            <summary>
            The parameters associated with the WibuBox security device, if applicable.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_PathPTUApplicationData">
            <summary>
            The specified path for PTU Application Data directory.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_URIList">
            <summary>
            List of URIs to try when connecting if the network option is set.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_CommunicationType">
            <summary>
            Setting as to whether the PTU will attempt to make access via Ethernet, the RS232 port, or both.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_DefaultDescriptionLevel0">
            <summary>
            The default description associated with the security level 0.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_DefaultDescriptionLevel1">
            <summary>
            The default description associated with the security level 1.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_DefaultDescriptionLevel2">
            <summary>
            The default description associated with the security level 2.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_DefaultDescriptionLevel3">
            <summary>
            The default description associated with the security level 3.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_SecurityConfiguration">
            <summary>
            The parameters used to configure the security class.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_DisplayArea">
            <summary>
            The display area associated with the application.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_InvalidDateTime">
            <summary>
            The <c>DateTime</c> value that is used to represent an invalid date/time value.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.m_Font">
            <summary>
            The <c>Font</c> associated with the PTU.
            </summary>
        </member>
        <member name="M:Common.Configuration.Parameter.#cctor">
            <summary>
            Static constructor. Initialize the class properties to their default values.
            </summary>
        </member>
        <member name="M:Common.Configuration.Parameter.SetToDefault">
            <summary>
            Set the data dictionary defined parameters to their default values.
            </summary>
        </member>
        <member name="M:Common.Configuration.Parameter.Initialize(Common.Configuration.DataDictionary)">
            <summary>
            Initializes the class properties to the parameter values contained within the specified configuration file. If any configuration file
            parameters are invalid all properties associated with the table to which the parameter belongs will be left at their default values.
            </summary>
            <param name="dataDictionary">The <c>DataSet</c> corresponding to the current data dictionary.</param>
        </member>
        <member name="P:Common.Configuration.Parameter.GenerateCSV">
            <summary>
            Get the flag that specifies whether the event log is to be saved as a CSV file as well as an XML file. True, if a CSV file of the event log is to be created;
            otherwise, false.
            </summary>
        </member>
        <member name="P:Common.Configuration.Parameter.ShowLogName">
            <summary>
            Get the flag that specifies whether saved event logs are to display the log name associated with the event or not. True, if the log name is to be displayed;
            otherwise, false.
            </summary>
        </member>
        <member name="P:Common.Configuration.Parameter.Use4DigitYearCode">
            <summary>
            <para>Get the flag that specifies whether the Vehicle Control Unit for the current project uses a 2 digit year code or a 4 digit year code. True, if the
            Vehicle Control Unit for the current project uses a 4 digit year code; otherwise, false.</para>
            <para>Valid 2 digit year code values are within the range 0 to 99, where 0 to 69 represent years 2000 to 2069, and 70 to 99 represent years 1970
            to 1999. Valid 4 digit year codes are within the range 1900 to 2199.</para>
            </summary>
        </member>
        <member name="P:Common.Configuration.Parameter.WatchSize">
            <summary>
            Get the <c>WatchSize</c> supported by the target hardware.
            </summary>
            <remarks>The <c>WatchSize</c> is the number of watch variables that can be downloaded from the target hardware in a single transaction.</remarks>
        </member>
        <member name="P:Common.Configuration.Parameter.WatchSizeFaultLog">
            <summary>
            The number of watch variables that can be recorded by each event log.
            </summary>
            <remarks>On most systems this value is the same for each event log, however, if the event log sub-system supports more than one datastream
            type then this value is set to the maximum value. For example, the CTA project support two types of event log, the snapshot log and the
            normal log. The datastream corresponding to the snapshot log supports 20 watch variables and the datastream corresponding to the normal
            event logs supports 16 watch variables.</remarks>
        </member>
        <member name="P:Common.Configuration.Parameter.SupportsMultipleDataStreamTypes">
            <summary>
            A flag to indicate whether the event log sub-system supports multiple datastream types.
            </summary>
        </member>
        <member name="P:Common.Configuration.Parameter.ProjectInformation">
            <summary>
            Gets the project parameters i.e. the fields associated with the FILEINFO table of the data dictionary.
            </summary>
        </member>
        <member name="P:Common.Configuration.Parameter.WibuBox">
            <summary>
            Gets the parameters associated with the WibuBox.
            </summary>
        </member>
        <member name="P:Common.Configuration.Parameter.SecurityConfiguration">
            <summary>
            Gets the parameters used to configure the security class.
            </summary>
        </member>
        <member name="P:Common.Configuration.Parameter.PathPTUApplicationData">
            <summary>
            Gets the specified path for the PTU Application Data directory.
            </summary>
            <remarks>An empty string is used to represent the Windows default path.</remarks>
        </member>
        <member name="P:Common.Configuration.Parameter.URIList">
            <summary>
            Gets the list of URIs to check if IP Access is indicated.
            </summary>
        </member>
        <member name="P:Common.Configuration.Parameter.CommunicationType">
            <summary>
            Gets the enumeration indicating whether access is indicated for RS232, IP, or both channels.
            </summary>
            <remarks>An empty string is used to represent the Windows default path.</remarks>
        </member>
        <member name="P:Common.Configuration.Parameter.DisplayArea">
            <summary>
            Gets the display area associated with the application.
            </summary>
        </member>
        <member name="P:Common.Configuration.Parameter.InvalidDateTime">
            <summary>
            Gets the <c>DateTime</c> value that is used to represent an invalid date/time value.
            </summary>
        </member>
        <member name="P:Common.Configuration.Parameter.Font">
            <summary>
            Get or sets the font associated with the PTU application.
            </summary>
        </member>
        <member name="T:Common.Configuration.Parameter.CommunicationTypeEnum">
            <summary>
            An enumeration tracking the type of PTU communication being done
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.CommunicationTypeEnum.RS232">
            <summary>
            Standard RS232 TCMS protocol. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.CommunicationTypeEnum.TCPIP">
            <summary>
            TCPIP protocol. Value: 2.
            </summary>
        </member>
        <member name="F:Common.Configuration.Parameter.CommunicationTypeEnum.Both">
            <summary>
            Both TCPIP and RS232 TCMS protocol. Value: 0.
            </summary>
        </member>
        <member name="T:Common.IPollTarget">
            <summary>
            An interface to control polling of the target hardware. 
            </summary>
            <remarks>The interface in independent of the type of command used to poll the target hardware.</remarks>
        </member>
        <member name="M:Common.IPollTarget.StartPolling">
            <summary>
            Start polling the target hardware.
            </summary>
        </member>
        <member name="M:Common.IPollTarget.StopPolling">
            <summary>
            Stop polling the target hardware. 
            </summary>
        </member>
        <member name="M:Common.IPollTarget.SetPauseAndWait(System.Int32)">
            <summary>
            Set the Pause property and wait until the feedback signal is received or until the timeout has elapsed.
            </summary>
            <param name="timeoutMs">The timeout period, in ms.</param>
            <returns>A flag to indicate whether the pause feedback signal was asserted within the specified timeout. True, if the pause feedback signal was asserted 
            within the specified timeout; otherwise, false.</returns>
        </member>
        <member name="P:Common.IPollTarget.Pause">
            <summary>
            Gets or sets the flag that controls the polling of the target hardware. True, inhibits polling of the target hardware; otherwise, false, resumes polling.
            </summary>
        </member>
        <member name="P:Common.IPollTarget.PauseFeedback">
            <summary>
            Gets the feedback flag that indicates whether polling of the target hardware has been suspended.  
            </summary>
            <remarks>This flag is asserted when the class has entered the pause state, i.e. the current communication request is complete and 
            no further requests will be issued until the pause property has been cleared.</remarks>
        </member>
        <member name="T:Common.Header_t">
            <summary>
            A structure to store the header information that is included in all data files that are saved to disk;
            </summary>
        </member>
        <member name="F:Common.Header_t.Available">
            <summary>
            Flag to indicate whether header information is available. True indicates that header information is available; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.Header_t.ProjectInformation">
            <summary>
            The project information associated with the downloaded data.
            </summary>
        </member>
        <member name="F:Common.Header_t.TargetConfiguration">
            <summary>
            The configuration information associated with the target hardware.
            </summary>
        </member>
        <member name="F:Common.Header_t.UserName">
            <summary>
            The name of the user who requested the download.
            </summary>
        </member>
        <member name="F:Common.Header_t.Comments">
            <summary>
            Any engineer comments associated with the downloaded data.
            </summary>
        </member>
        <member name="F:Common.Header_t.DateTimeCreated">
            <summary>
            The date and time when the file was created.
            </summary>
        </member>
        <member name="F:Common.Header_t.ProductName">
            <summary>
            The <c>ProductName</c> reference of the PTU application used to collect and save the file.
            </summary>
        </member>
        <member name="F:Common.Header_t.ProductVersion">
            <summary>
            The <c>ProductVersion</c> reference of the PTU application used to collect and save the file.
            </summary>
        </member>
        <member name="M:Common.Header_t.SetToDiagnostic">
            <summary>
            Sets the header to reflect diagnostic mode status i.e. all target configuration parameters will be cleared.
            </summary>
        </member>
        <member name="T:Common.FileHeader">
            <summary>
            Class to manage the header information associated with each of the data files.
            </summary>
        </member>
        <member name="F:Common.FileHeader.m_HeaderCurrent">
            <summary>
            Header information associated with data downloaded from the target hardware.
            </summary>
        </member>
        <member name="F:Common.FileHeader.m_HeaderLastRetrieved">
            <summary>
            Header information associated with the last file retrieved from disk.
            </summary>
        </member>
        <member name="F:Common.FileHeader.m_HeaderSaveAll">
            <summary>
            Header information used by the Save All menu option.
            </summary>
        </member>
        <member name="M:Common.FileHeader.Initialize(Common.Header_t@)">
            <summary>
            Initializes the specified header as unavailable.
            </summary>
            <param name="header">The header that is to be marked as unavailable.</param>
        </member>
        <member name="P:Common.FileHeader.HeaderCurrent">
            <summary>
            Gets or sets the header information associated with the data downloaded from the target hardware. 
            </summary>
            <remarks>All values will be null or 0, as appropriate, until valid communications is established.</remarks>
        </member>
        <member name="P:Common.FileHeader.HeaderLastRetrieved">
            <summary>
            Gets or sets the header information associated with the last file retrieved from disk.
            </summary>
            <remarks>All values will be null or 0, as appropriate, until valid communications is established. </remarks>
        </member>
        <member name="P:Common.FileHeader.HeaderSaveAll">
            <summary>
            Gets or sets the header information used by the Save All menu option.
            </summary>
            <remarks>All values will be null or 0, as appropriate, until valid communications is established. </remarks>
        </member>
        <member name="T:Common.CyclicQueue`1">
            <summary>
            <para>A CyclicQueue is a queue with a fixed size. It is called 'cyclic' because when an item is added to a full queue, the 'oldest' item in the queue 
            is removed to free space for the new item (so the internal buffer can be regarded as a cyclic buffer).</para>
            
            <para>The CyclicQueue provides similar functionality to the System.Collections.Queue, except for the limit on the buffer size and the behavior it imposes.</para>
            </summary>
            <remarks>
            Note: This implementation does not support wrap-around of the internal indices at present. In other words, if you plan to call Enqueue more than long.MaxValue 
            times, the behavior is undefined.
            </remarks>
        </member>
        <member name="F:Common.CyclicQueue`1.Empty">
            <summary>
            Value corresponding to the index entry being empty.
            </summary>
        </member>
        <member name="F:Common.CyclicQueue`1.m_TailIndex">
            <summary>
            Index of the last inserted item.
            </summary>
        </member>
        <member name="F:Common.CyclicQueue`1.m_HeadIndex">
            <summary>
            Index of the last extracted item.
            </summary>
        </member>
        <member name="F:Common.CyclicQueue`1.m_CyclicBuffer">
            <summary>
            The generic buffer that holds the items.
            </summary>
        </member>
        <member name="F:Common.CyclicQueue`1.m_Size">
            <summary>
            The size of the cyclic buffer. 
            </summary>
        </member>
        <member name="M:Common.CyclicQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class with the specified number of elements.
            </summary>
            <param name="bufferSize">The maximum number of elements in the cyclic queue.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if bufferSize is less than or equal to 0.</exception>
        </member>
        <member name="M:Common.CyclicQueue`1.Clear">
            <summary>
            Removes all entries from the CyclicQueue.
            </summary>
        </member>
        <member name="M:Common.CyclicQueue`1.Contains(`0)">
            <summary>
            Determines whether an element is in the CyclicQueue.
            </summary>
            <param name="queueEntry">The entry that is to be checked.</param>
            <returns>True if the specified object was found; otherwise, false.</returns>
        </member>
        <member name="M:Common.CyclicQueue`1.Dequeue">
            <summary>
            Removes and returns the entry at the beginning of the CyclicQueue.
            </summary>
            <returns>The entry found at the beginning of the queue.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the method is called whilst the queue is empty.</exception>
        </member>
        <member name="M:Common.CyclicQueue`1.Enqueue(`0)">
            <summary>
            Adds the specified entry to the end of the CyclicQueue. If the CyclicQueue is full, the entry at the beginning of the CyclicQueue 
            is removed prior to adding the new entry.
            </summary>
            <param name="queueEntry">The entry to be added to the queue.</param>
        </member>
        <member name="M:Common.CyclicQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the CyclicQueue without removing it.
            </summary>
            <returns>The object at the beginning of the queue.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the method is called whilst the queue is empty.</exception>
        </member>
        <member name="M:Common.CyclicQueue`1.ToArray">
            <summary>
            Copies the CyclicQueue elements to a new array. 
            </summary>
            <returns>A generic array of the objects contained within the queue.</returns>
        </member>
        <member name="M:Common.CyclicQueue`1.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements in the CyclicQueue. After this method is
            called the buffer's size may have been decreased, and adding additional items to the CyclicQueue
            will cause the removal of the items at the beginning of the CyclicQueue.
            </summary>
        </member>
        <member name="M:Common.CyclicQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the CyclicQueue elements to an existing one-dimensional Array, starting at the specified array index.
            </summary>
            <param name="array">Tha array where the cyclic queue is to be copied to.</param>
            <param name="index">The starting index of the array where the cyclic queue is to be copied to, normally 0.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the specified array is null.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the specified array is smaller than the number of elements in the cyclic queue OR the array is not
            a one dimensional array.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the specified start index is less than 0.</exception>
        </member>
        <member name="M:Common.CyclicQueue`1.Clone">
            <summary>
            Creates an exact copy of the CyclicQueue.
            </summary>
            <returns>An exact copy of the cyclic queue.</returns>
        </member>
        <member name="P:Common.CyclicQueue`1.TailIndex">
            <summary>
            The current Tail index of the Cyclic Queue.
            </summary>
        </member>
        <member name="P:Common.CyclicQueue`1.HeadIndex">
            <summary>
            The current Head index of the Cyclic Queue.
            </summary>
        </member>
        <member name="P:Common.CyclicQueue`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the CyclicQueue is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Common.CyclicQueue`1.Count">
            <summary>
            Gets the number of elements contained in the CyclicQueue.
            </summary>
        </member>
        <member name="P:Common.CyclicQueue`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the CyclicQueue.
            </summary>
        </member>
        <member name="P:Common.CyclicQueue`1.Size">
            <summary>
            Gets the size of the cyclic buffer.
            </summary>
        </member>
        <member name="T:Common.UserControls.FormChangeScalar">
            <summary>
            Form used to change the value of a write-enabled scalar watch variable.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeScalar.FormatStringNumericString">
            <summary>
            The .NET format string used to display the upper and lower bounds.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeScalar.HexValueIdentifier">
            <summary>
            Identifier used to identify a value as a hexadecimal value.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeScalar.FormatStringGeneralNumber">
            <summary>
            The format string, converted to lower case, used in the data dictionary to represent a general number. Value: "general number";
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeScalar.FormatStringHexadecimal">
            <summary>
            The format string, converted to lower case, used in the data dictionary to represent a hexadecimal number. Value: "hexadecimal";
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeScalar.m_CurrentEngineeringValue">
            <summary>
            The current engineering value of the scalar watch variable.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeScalar.m_DecimalPlaces">
            <summary>
            The number of decimal places to be used when displaying the data.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeScalar.m_HexFormat">
            <summary>
            Flag to indicate whether the scalar is to be specified and displayed in hexadecimal format. True, indicated hexadecimal format; otherwise, false indicates 
            general format.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeScalar.m_InhibitApplyEnabled">
            <summary>
            A flag to inhibit the Apply button from being enabled in the ValueChanged event handler associated with the NumericUpDown control. This is used to stop the 
            Apply button being re-enabled if the user modifies the value manually and then presses the Apply button.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeScalar.#ctor">
            <summary>
            Zero parameter constructor. Required for Visual Studio.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeScalar.#ctor(Common.UserControls.WatchScalarControl)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="scalarControl">The <c>WatchControl</c> derived user control that called this form.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeScalar.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeScalar.m_ButtonApply_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Apply button <c>Click</c> event. If a new value has been specified, apply the change.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeScalar.m_NumericUpDown_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>ValueChanged</c> event associated with the <c>NumericUpDown</c> control used to enter the new watch value. Enable the Apply button.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeScalar.m_NumericUpDownNewValue_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Event handler for the <c>KeyPress</c>event associated with the <c>NumericUpDown</c> control used to enter the new watch value. Enable the Apply button if the 
            user enters a numeric character.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="F:Common.UserControls.FormChangeScalar.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeScalar.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Common.UserControls.FormChangeBitmask">
            <summary>
            Form used to change the value of a write-enabled bitmask watch variable.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.FormatStringHex">
            <summary>
            The format string used to display a hexadecimal value e.g. 0F0A. Value: "X".
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.FormatStringDecimal">
            <summary>
            The .NET format string used to display a decimal value. Value: "###,###,##0".
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.FormatStringHexHeader">
            <summary>
            The string that is to appear before a value displayed in hexadecimal format e.g.0x0A. Value: "0x".
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.SleepApplyChange">
            <summary>
            The sleep period,in ms, after asserting the Pause property before applying the change. Value: 250 ms.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_OldIdentifier">
            <summary>
            The watch variable old identifier associated with the bitmask user control that called this form.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_WatchVariable">
            <summary>
            Reference to the watch variable associated with the user control that called this form
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_ICheckBoxUInt32">
            <summary>
            Reference to the class that implements the ICheckBoxUInt32 interface.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_WatchControl">
            <summary>
            Reference to the <c>WatchControl</c> derived user control that showed this form.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_ICommunicationInterface">
            <summary>
            Reference to the class that implements the <c>ICommunicationInterface</c> interface.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_IDataUpdate">
            <summary>
            Reference to the class that implements the <c>IDataUpdate</c> interface.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_IPollTarget">
            <summary>
            Reference to the class that implements the <c>IPollTarget</c> interface.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_InhibitApplyEnabled">
            <summary>
            A flag to inhibit the Apply button from being enabled in the ValueChanged event handler associated with the NumericUpDown control. This is used to stop the 
            Apply button being re-enabled if the user modifies the value manually and then presses the Apply button.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.#ctor">
            <summary>
            Zero parameter constructor. Required for Visual Studio.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.#ctor(Common.UserControls.WatchBitmaskControl)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="bitmaskControl">The <c>WatchControl</c> derived user control that called this form.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.DataUpdate(System.Object,System.EventArgs)">
            <summary>
            Event handler associated with the <c>DataUpdate</c> event. Update the form using the latest watch value. The format of the display is determined by 
            the state of the <c>Checked</c> property of the hex radio button.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.m_ButtonApply_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Apply button <c>Click</c> event. Apply the changes.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.m_ButtonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the OK button <c>Click</c> event. If a new value has been specified but has not been applied, apply the change and then close the form; 
            otherwise just close the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.m_ButtonCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Cancel button <c>Click</c> event. Close the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.m_RadioButtonDecimal_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>CheckedChanged</c> event associated with the radio button used to select the decimal format display. Set the <c>Hexadecimal</c> 
            property of the <c>NumericUpDown</c> control according to the <c>Checked</c> property of the hex radio button and then update the display by calling the 
            <c>DataUpdate()</c> event handler.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.m_NumericUpDown_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>ValueChanged</c> event associated with the <c>NumericUpDown</c> control used to enter the new watch value. Update the <c>Checked</c> 
            <c>BackColor</c> and <c>ForeColor</c> properties of each <c>CheckBox</c> control associated with the member variable <see cref="F:Common.UserControls.FormChangeBitmask.m_ICheckBoxUInt32"/> to reflect the 
            <c>Value</c> field of the <c>NumericUpDown</c> control and then enable the Apply button.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.m_NumericUpDown_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Event handler for the <c>KeyPress</c>event associated with the <c>NumericUpDown</c> control used to enter the new watch value. Enable the Apply button if the 
            user enters a numeric character.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.CheckBox_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for each <c>CheckBox</c> control associated with the member variable <see cref="F:Common.UserControls.FormChangeBitmask.m_ICheckBoxUInt32"/>.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.ConfigureCheckBoxes(System.Windows.Forms.CheckBox[]@)">
            <summary>
            Configure the <c>CheckBox</c> array.
            </summary>
            <param name="checkBoxes">Reference to the 32 element array of <c>CheckBox</c> controls where each <c>CheckBox</c> control represents an individual 
            bit of a 32 bit bitmask watch variable.</param>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormChangeBitmask.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_PanelOuter">
            <summary>
            Reference to the outer <c>Panel</c> control.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_ButtonOK">
            <summary>
            Reference to the OK <c>Button</c> control.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_ButtonCancel">
            <summary>
            Reference to the Cancel <c>Button</c> control.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_ButtonApply">
            <summary>
            Reference to the Apply <c>Button</c> control.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_GroupBoxFormat">
            <summary>
            Reference to the <c>GroupBox</c> control that allows the user to specify the display format.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_GroupBoxCurrentValue">
            <summary>
            Reference to the <c>GroupBox</c> control that displays the current value.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_GroupBoxNewValue">
            <summary>
            Reference to the <c>GroupBox</c> control that displays the new value.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormChangeBitmask.m_GroupBoxBitValues">
            <summary>
            Reference to the <c>GroupBox</c> control that displays the <c>CheckBox</c> controls representing the individual flags of the bitmask.
            </summary>
        </member>
        <member name="T:Common.PollScheduler">
            <summary>
            Used by the <c>WorkerThread</c> derived classes that are used to poll the VCU to ensure that polling occurs at a specific interval.
            </summary>
            <remarks>Uses the <c>winmm.dll</c> dynamic link library to control the timing.</remarks>
        </member>
        <member name="F:Common.PollScheduler.m_TimePreviousPass">
            <summary>
            The time, as returned from the call to the timeGetTime() method of winmm.dll, associated with the previous call to the Wait() method. 
            </summary>
        </member>
        <member name="F:Common.PollScheduler.m_TerminateFlag">
            <summary>
            The flag that can terminate the Wait() method immediately. True, to terminate the Wait() method immediately; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.PollScheduler.m_IsFirstCall">
            <summary>
            The flag to indicate whether the current call to the Wait() method is the first call since the class was instantiated.
            </summary>
        </member>
        <member name="M:Common.PollScheduler.Wait(System.Int32)">
            <summary>
            Wait on the current thread until: (a) <paramref name="intervalMs"/> ms has elapsed since the last call to the Wait() method or (b) the TerminateFlag property 
            is asserted.
            </summary>
            <param name="intervalMs">The number of ms to wait since the last call to the Wait() method before continuing.</param>
        </member>
        <member name="P:Common.PollScheduler.TerminateFlag">
            <summary>
            Gets or sets the flag that can terminate the Wait() method immediately. True, to terminate the Wait() method immediately; otherwise, false.
            </summary>
        </member>
        <member name="T:Common.Configuration.Workset">
            <summary>
            A static class used to access the various workset collections used in the PTU application.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset.ColumnCountMaxRecordedWatch">
            <summary>
            The maximum number of display columns that the each workset associated with recorded watch variables can support. Value: 3.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset.ColumnCountMaxFaultLog">
            <summary>
            The maximum number of display columns that the each workset associated with fault log watch variables can support. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset.ColumnCountMaxChartRecorder">
            <summary>
            The maximum number of display columns that the each workset associated with the chart recorder can support. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset.m_WorksetCollectionRecordedWatch">
            <summary>
            The workset collection associated with the recording and displaying of watch variables.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset.m_WorksetCollectionFaultLog">
            <summary>
            The workset collection associated with the recording and displaying of fault log watch variables.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset.m_WorksetCollectionChartRecorder">
            <summary>
            The workset collection associated with the chart recorder.
            </summary>
        </member>
        <member name="M:Common.Configuration.Workset.Initialize">
            <summary>
            Initializes the static instances of the workset collection classes corresponding to each sub-system.
            </summary>
        </member>
        <member name="P:Common.Configuration.Workset.RecordedWatch">
            <summary>
            Gets the collection of worksets associated with the recording and displaying of watch variables.
            </summary>
        </member>
        <member name="P:Common.Configuration.Workset.FaultLog">
            <summary>
            Gets the collection of worksets associated with the recording and displaying of fault log watch variables.
            </summary>
        </member>
        <member name="P:Common.Configuration.Workset.ChartRecorder">
            <summary>
            Gets the collection of worksets associated with the chart recorder.
            </summary>
        </member>
        <member name="T:Common.Configuration.GroupListIdentifier_t">
            <summary>
            A structure to store the fields associated with an entry from the <c>GROUPLISTIDS</c> table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.GroupListIdentifier_t.m_GroupListIdentifier">
            <summary>
            The group list identifier associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.GroupListIdentifier_t.m_SelfTestIdentifier">
            <summary>
            The self test identfier associated with the record. Note: Although the field name is <c>SELFTESTID</c> the contents correspond to the <c>SELFTESTNUMBER</c> 
            field of the <c>SELFTEST</c> table of the data dictionary.
            </summary>
        </member>
        <member name="M:Common.Configuration.GroupListIdentifier_t.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the structure.
            </summary>
            <param name="groupListIdentifier">The group list identifier associated with the record.</param>
            <param name="selfTestIdentifier">The self test identifier associated with the record.</param>
        </member>
        <member name="P:Common.Configuration.GroupListIdentifier_t.GroupListIdentifier">
            <summary>
            Gets or sets the group list identifier associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.GroupListIdentifier_t.SelfTestIdentifier">
            <summary>
            Gets or sets the self test identfier associated with the record. Note: Although the field name is <c>SELFTESTID</c> the contents correspond to the 
            <c>SELFTESTNUMBER</c> field of the <c>SELFTEST</c> table of the data dictionary.
            </summary>
        </member>
        <member name="T:Common.Configuration.SelfTestIdentifier_t">
            <summary>
            A structure to store the fields associated with an entry from the <c>SELFTESTIDS</c> table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestIdentifier_t.m_SelfTestIdentifier">
            <summary>
            The self test identifier associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestIdentifier_t.m_SelfTestNumber">
            <summary>
            The self test number associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestIdentifier_t.m_SelfTestVariableIdentifier">
            <summary>
            The self test variable identifier associated with the record.
            </summary>
        </member>
        <member name="M:Common.Configuration.SelfTestIdentifier_t.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Initialize a new instance of the structure.
            </summary>
            <param name="selfTestIdentifier">The value of the <c>SELFTESTID</c> field.</param>
            <param name="selfTestNumber">The value of the <c>SELFTESTNUMBER</c> field.</param>
            <param name="selfTestVariableIdentifier">The value of the <c>SELFTESTVARID</c> field.</param>
        </member>
        <member name="P:Common.Configuration.SelfTestIdentifier_t.SelfTestIdentifier">
            <summary>
            Gets or sets the self test identifier associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.SelfTestIdentifier_t.SelfTestNumber">
            <summary>
            Gets or sets the self test number associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.SelfTestIdentifier_t.SelfTestVariableIdentifier">
            <summary>
            Gets or sets the self test variable identifier associated with the record.
            </summary>
        </member>
        <member name="T:Common.Forms.FormShowHeaderInformation">
            <summary>
            Form to show the header information associated with a data file.
            </summary>
        </member>
        <member name="F:Common.Forms.FormShowHeaderInformation.m_Header">
            <summary>
            The existing header information.
            </summary>
        </member>
        <member name="M:Common.Forms.FormShowHeaderInformation.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor, required for Visual Studio.
            </summary>
        </member>
        <member name="M:Common.Forms.FormShowHeaderInformation.#ctor(Common.Header_t)">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Common.Forms.FormShowHeaderInformation.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormShowHeaderInformation.m_ButtonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the OK button <c>Click</c> event. Closes the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="F:Common.Forms.FormShowHeaderInformation.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormShowHeaderInformation.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Common.Forms.ScreenCaptureType">
            <summary>
            The screen type associated with the image.
            </summary>
        </member>
        <member name="F:Common.Forms.ScreenCaptureType.Watch">
            <summary>
            Live watch variable screen.
            </summary>
        </member>
        <member name="F:Common.Forms.ScreenCaptureType.Event">
            <summary>
            Event log screen.
            </summary>
        </member>
        <member name="F:Common.Forms.ScreenCaptureType.Plot">
            <summary>
            Plot of saved watch variable values against time screen.
            </summary>
        </member>
        <member name="F:Common.Forms.ScreenCaptureType.Replay">
            <summary>
            Replay of saved watch variables screen.
            </summary>
        </member>
        <member name="F:Common.Forms.ScreenCaptureType.SelfTest">
            <summary>
            Self test screen.
            </summary>
        </member>
        <member name="F:Common.Forms.ScreenCaptureType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Common.Forms.ToolStripMenuItemEnabled_t">
            <summary>
            A structure to store the key access string along with the new and current state of the Enabled property of <c>ToolStripMenuItem</c> control.
            </summary>
            <remarks>Allows the original state of the Enabled property to be restored when the child form is disposed of.</remarks>
        </member>
        <member name="F:Common.Forms.ToolStripMenuItemEnabled_t.Key">
            <summary>
            The key used to access the <c>ToolStripMenuItem</c> i.e. the string value of the <c>Name</c> property.
            </summary>
        </member>
        <member name="F:Common.Forms.ToolStripMenuItemEnabled_t.EnabledCurrent">
            <summary>
            The current state of the <c>Enabled</c> property associated with the <c>ToolStripMenuItem</c> represended by the Key text string.
            </summary>
        </member>
        <member name="F:Common.Forms.ToolStripMenuItemEnabled_t.EnabledNew">
            <summary>
            The new state of the <c>Enabled</c> property associated with the <c>ToolStripMenuItem</c> represended by the Key text string.
            </summary>
        </member>
        <member name="T:Common.Forms.FormPTU">
            <summary>
            Base form from which ALL PTU child forms should be derived.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.KeyToolStripSeparator">
            <summary>
            The key that is to be used to identify the control as a tool strip separator control. Value: "m_TSSeparator".
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.LegendName">
            <summary>
            The name that is to be used to identify the control as a legend label. Value: "m_Legend".
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.SleepCapture">
            <summary>
            The delay, in ms, to allow the save dialog box to clear when capturing the screen. Value: 2000 ms.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.FilterIndexJPG">
            <summary>
            The <c>SaveFileDialog</c>, <c>FilterIndex</c> property corresponding to JPG format. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.FilterIndexBMP">
            <summary>
            The <c>SaveFileDialog</c>, <c>FilterIndex</c> property corresponding to BMP format. Value: 2.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_IsDisposed">
            <summary>
            Flag to indicate whether the Dispose() method has been called. True indicates that the Dispose() method has been called; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_CalledFrom">
            <summary>
            Reference to the form that called this child form.
            </summary>
            <remarks>This form is not usually called by the multiple document interface parent form but by the form used to view the Y value agains time plot
            of the data contained withing the historic data manager class.</remarks>
        </member>
        <member name="F:Common.Forms.FormPTU.m_MainWindow">
            <summary>
            Reference to the main application window.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_KeyEventArgs">
            <summary>
            Reference to the KeyEventArgs object associated with the last recorded key press. 
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_ScreenCaptureType">
            <summary>
            The type of screen that is being captured.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_OpenedDialogBoxList">
            <summary>
            A list of any dialog boxes associated with the child form that remain open.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_ToolStripMenuItemEnabledList">
            <summary>
            A list of the original state of the Enabled property for each menu option that is disabled/enabled by the child form.
            </summary>
            <remarks>Allows the original state of the Enabled property to be restored when the child form is disposed of.</remarks>
        </member>
        <member name="F:Common.Forms.FormPTU.m_ShowEnumeratorAsIntegers">
            <summary>
            Flag to control whether enumerators are displayed as text strings or as integer values. True, displays enumerators as integer values; otherwise,
            enumerators are displayed as their corresponding text strings.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_ToolStripItemCollectionCalledFrom">
            <summary>
            The collection of tool strip items associated with the calling form.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_ToolStripItemCollectionCurrent">
            <summary>
            The collection of tool strip items associated with this form.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_Security">
            <summary>
            Reference to the <c>Security</c> class associated with the PTU.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPTU.#ctor">
            <summary>
            Initializes a new instance of the form.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPTU.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.FormPTU_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Shown</c> event. Functionality is defined in the child form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.FormPTU_Resize(System.Object,System.EventArgs)">
            <summary>
            Event handler for the form <c>Resize</c> event. Close any FormShowFlags forms that may be open.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.FormPTU_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Event handler for the <c>KeyDown</c> event. Maps the Function keys to the <c>ToolStrip</c> buttons.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.FormPTU_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Event handler for the <c>KeyUp</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.Escape_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Escape' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F1_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F1' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F2_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F2-Print Screen' key. Captures the PTU application window and saves the image to the specified file.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F3_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F3' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F4_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F4' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F5_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F5' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F6_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F6' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F7_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F7' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F8_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F8' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F9_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F9' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F10_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F10' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F11_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F11' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.F12_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F12' key. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.ChangeFont(System.Object,System.EventArgs)">
            <summary>
            Change the font of this form and all controls associated with the form to the same font as the main window.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.m_ToolStripComboBox1_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>SelectedIndexChanged</c> event associated with the <c>ToolStripComboBox</c> control. The actions are defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.Exit">
            <summary>
            Close the form cleanly. Simulates the user pressing the Exit button.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPTU.CloseShowFlags">
            <summary>
            Close any FormShowFlags forms that are currently open. The FormShowFlags form displays the state of the individual bits associated with a bit mask variable .
            </summary>
        </member>
        <member name="M:Common.Forms.FormPTU.DisplayFunctionKey(System.Windows.Forms.ToolStripButton,System.String,System.String,System.Drawing.Image)">
            <summary>
            Displays the specified function key and associated separator and sets the Text and Image properties of the key.
            </summary>
            <remarks>For this method to work correctly, the <c>Tag</c> field of the function key must contain the function key reference i.e. Esc, F1, F2 etc and 
            the control name of the associated separator must be derived using this e.g. m_TSSeparatorF1 etc.</remarks>
            <param name="functionKey">The function key to be displayed.</param>
            <param name="text">The text that is to appear on the function key.</param>
            <param name="toolTip">The tool-tip associated with the function key.</param>
            <param name="image">The image that is to appear on the function key.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.DisplayLabel(System.Windows.Forms.Label,System.String,System.Drawing.Color)">
            <summary>
            Displays the specified label and associated legend and sets the background colour of the label.
            </summary>
            <param name="label">The label that is to be displayed.</param>
            <param name="legendText">The legend text that is to appear to the left of the label.</param>
            <param name="color">The background colour of the label.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.RestoreMenuEnabled">
            <summary>
            Restore the <c>Enabled</c> property of all of the menu options that have been modified by the child form to their original state.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPTU.SetMenuEnabled(System.String,System.Boolean)">
            <summary>
            Set the <c>Enabled</c> property of the specified menu option to the specified/new state and keep a record of the original/current state of the property 
            so that the property can be restored to its original state when the child form is disposed of.
            </summary>
            <param name="key">The key text string associated with the menu option that is to be modified.</param>
            <param name="enabled">The state to which the <c>Enabled</c> property is to be set.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.UpdateMenu(Common.Security)">
            <summary>
            Process any form specific changes to the main menu resulting from a change in the security level of the user.
            </summary>
            <param name="security">Reference to the security class.</param>
        </member>
        <member name="F:Common.Forms.FormPTU.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPTU.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormPTU.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_TabControl">
            <summary>
            Reference to the <c>TabControl</c> control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_PanelInformation">
            <summary>
            Reference to the <c>Panel</c> containing the information labels.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_ToolStripFunctionKeysPTU">
            <summary>
            Reference to the <c>ToolStrip</c> control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_ToolStripComboBox1">
            <summary>
            Reference to the only <c>ToolStripComboBox</c> control associated with the <c>ToolStrip</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_ToolStripLegendComboBox1">
            <summary>
            Reference to the <c>ToolStripLabel</c> showing the legend associated with the <c>ComboBox</c> control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPTU.m_TabPage1">
            <summary>
            Reference to the first <c>TabPage</c> control associated with the <c>TabControl</c>.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.IsDisposed">
            <summary>
            Gets or sets the flag which indicates whether the Dispose() method has been called. True indicates that the Dispose() method has been called; otherwise,
            false.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.MainWindow">
            <summary>
            Gets or sets the reference to the main application window.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.Escape">
            <summary>
            Gets the reference to the escape key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F1">
            <summary>
            Gets the reference to the F1 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F2">
            <summary>
            Gets the reference to the F2 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F3">
            <summary>
            Gets the reference to the F3 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F4">
            <summary>
            Gets the reference to the F4 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F5">
            <summary>
            Gets the reference to the F5 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F6">
            <summary>
            Gets the reference to the F6 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F7">
            <summary>
            Gets the reference to the F7 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F8">
            <summary>
            Gets the reference to the F8 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F9">
            <summary>
            Gets the reference to the F9 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F10">
            <summary>
            Gets the reference to the F10 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F11">
            <summary>
            Gets the reference to the F11 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.F12">
            <summary>
            Gets the reference to the F12 function key.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.Legend1">
            <summary>
            Gets the <c>Label</c> associated with the legend for InformationLabel 1.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.Legend2">
            <summary>
            Gets the <c>Label</c> associated with the legend for InformationLabel 2.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.Legend3">
            <summary>
            Gets the <c>Label</c> associated with the legend for InformationLabel 3.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.Legend4">
            <summary>
            Gets the <c>Label</c> associated with the legend for InformationLabel 4.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.Legend5">
            <summary>
            Gets the <c>Label</c> associated with the legend for InformationLabel 5.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.Legend6">
            <summary>
            Gets the <c>Label</c> associated with the legend for InformationLabel 6.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.InformationLabel1">
            <summary>
            Gets the <c>Label</c> associated with InformationLabel 1.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.InformationLabel2">
            <summary>
            Gets the <c>Label</c> associated with InformationLabel 2.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.InformationLabel3">
            <summary>
            Gets the <c>Label</c> associated with InformationLabel 3.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.InformationLabel4">
            <summary>
            Gets the <c>Label</c> associated with InformationLabel 4.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.InformationLabel5">
            <summary>
            Gets the <c>Label</c> associated with InformationLabel 5.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.InformationLabel6">
            <summary>
            Gets the <c>Label</c> associated with InformationLabel 6.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.ScreenCaptureType">
            <summary>
            Gets or sets the type of display that is being captured to disk.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.LastKeyEventArgs">
            <summary>
            Gets the the <c>KeyEventArgs</c> object associated with the last recorded key press.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.Security">
            <summary>
            Gets the reference to the system security class.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.CalledFrom">
            <summary>
            Gets or sets the reference to the form that called this form.
            </summary>
            <remarks>This form is not usually called by the multiple document interface parent form but by the form used to view the Y value agains time plot
            of the data contained withing the historic data manager class.</remarks>
        </member>
        <member name="P:Common.Forms.FormPTU.ToolStripItemCollectionCalledFrom">
            <summary>
            Gets the collection of tool strip items associated with the calling form.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.OpenedDialogBoxList">
            <summary>
            Gets or sets the list of any dialog boxes associated with this form that remain open.
            </summary>
        </member>
        <member name="P:Common.Forms.FormPTU.ShowEnumeratorAsInteger">
            <summary>
            Get or set the flag that controls whether enumerator variables are displayed as text strings or as integer values. True, displays enumerators as
            integer values; otherwise, enumerators are displayed as their corresponding text strings.
            </summary>
        </member>
        <member name="T:Common.Configuration.WorksetItem">
            <summary>
            Workset <c>ListView</c> item definition.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetItem.m_Workset">
            <summary>
            The workset associated with the item.
            </summary>
        </member>
        <member name="M:Common.Configuration.WorksetItem.#ctor">
            <summary>
            Inializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Common.Configuration.WorksetItem.#ctor(Common.Configuration.Workset_t)">
            <summary>
            Inializes a new instance of the class. Used to create an item that has an empty string for the default workset column text.
            </summary>
            <param name="workset">The workset associated with the item.</param>
        </member>
        <member name="M:Common.Configuration.WorksetItem.#ctor(Common.Configuration.Workset_t,System.String)">
            <summary>
            Inializes a new instance of the class. Used to create an item with the specified default workset column text.
            </summary>
            <param name="workset">The workset associated with the item.</param>
            <param name="defaultText">The text to be displayed in the default workset column.</param>
        </member>
        <member name="M:Common.Configuration.WorksetItem.#ctor(Common.Configuration.Workset_t,System.Boolean)">
            <summary>
            Inializes a new instance of the class. Used to create an item that shows a tick icon next to the workset name, depending upon 
            the state of the showTick parameter. True, to display a tick icon; otherwise, false. The tick is used to show that the workset 
            is the default workset.
            </summary>
        </member>
        <member name="M:Common.Configuration.WorksetItem.#ctor(Common.Configuration.Workset_t,System.Boolean,Common.SecurityLevel)">
            <summary>
            Inializes a new instance of the class. Used to create an item that shows a tick icon next to the workset name, depending upon 
            the state of the showTick parameter. True, to display a tick icon; otherwise, false. The tick is used to show that the workset 
            is the default workset. Also displays the description corresponding to the specified workset security level.
            </summary>
        </member>
        <member name="M:Common.Configuration.WorksetItem.#ctor(Common.Configuration.Workset_t,Common.SecurityLevel)">
            <summary>
            Inializes a new instance of the class. Used to create an item that shows a tick icon next to the workset name, depending upon 
            the state of the showTick parameter. True, to display a tick icon; otherwise, false. The tick is used to show that the workset 
            is the default workset. Also displays the description corresponding to the specified workset security level.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetItem.Workset">
            <summary>
            The workset associated with the item.
            </summary>
        </member>
        <member name="T:Common.UserControls.EventBitmaskControl">
            <summary>
            The bitmask event variable user control. Displays the asserted flags corresponding to the specified <c>Value</c> property for the bit mask event variable
            specified by the <c>Identifier</c> property.
            </summary>
        </member>
        <member name="F:Common.UserControls.EventBitmaskControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.EventBitmaskControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.EventBitmaskControl.m_ValueUINT">
            <summary>
            The value cast to a uint.
            </summary>
        </member>
        <member name="M:Common.UserControls.EventBitmaskControl.#ctor">
            <summary>
            Initializes anew instance of the user control.
            </summary>
        </member>
        <member name="M:Common.UserControls.EventBitmaskControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.EventBitmaskControl.m_MenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Definition' context menu option <c>Click</c> event. Call the ShowHelpPopup() method.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.EventBitmaskControl.m_MenuItemShowFlags_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Flags' context menu option <c>Click</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="P:Common.UserControls.EventBitmaskControl.WidthUnitsField">
            <summary>
            Gets or sets the width of the units field, in pixels.
            </summary>
        </member>
        <member name="P:Common.UserControls.EventBitmaskControl.Value">
            <summary>
            Gets or sets the current value of the bit mask event variable.
            </summary>
        </member>
        <member name="T:Common.Forms.FormWatch">
            <summary>
            Form to view the live watch variable data retrieved from the target hardware.
            </summary>
            <summary>
            Form to view and record the watch variables defined by the <c>WorksetManager</c> class.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWatch.KeyBitmaskControlTypeName">
            <summary>
            The type name associated with the <c>BitmaskControl</c> user control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWatch.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWatch.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWatch.m_LabelProgressBar">
            <summary>
            The text that is to be displayed next to the ProgressBar control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWatch.m_ProgressBar">
            <summary>
            The ProgressBar control. Used to display progress of the playback or recording.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWatch.m_Workset">
            <summary>
            The current workset;
            </summary>
        </member>
        <member name="F:Common.Forms.FormWatch.m_WatchControls">
            <summary>
            A jagged array of watch control user controls. Contains the watch controls associated with each column of every workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWatch.m_WatchControlLayout">
            <summary>
            Reference to the class which supports the configuration, drawing and layout of multiple <c>WatchControl</c> derived user controls.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWatch.m_WatchControlSize">
            <summary>
            Size related parameters associated with <c>WatchControl</c> derived user controls.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWatch.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor, required for Visual Studio.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWatch.#ctor(Common.Configuration.Workset_t)">
            <summary>
            Form to view the watch variables in real time.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWatch.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormWatch.TabPage_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Click</c> event associated with each <c>TabPage</c>. (1) Sets the focus to the <c>TabPage</c>, this ensures that the <c>Leave</c>
            event for the selected user control is triggered.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWatch.ConfigureDisplayPanel(Common.Configuration.Workset_t,System.Windows.Forms.Panel,Common.UserControls.VariableControlSize_t)">
            <summary>
            Configure the watch user controls required to display the specified <paramref name="workset"/> and then add these to the specified 
            <paramref name="displayPanel"/>.
            </summary>
            <param name="workset">The workset that is to be used to configure the watch user controls.</param>
            <param name="displayPanel">The <c>Panel</c> to which the configured watch user controls are to be added.</param>
            <param name="watchControlSize">The size to make each watch user control.</param>
            <remarks>This method uses the <c>UserControl</c> class to: (a) layout and initialize all of the controls required to display the watch variables 
            associated with the specified worset and (b) add these to the tabpage/panel associated with the display.
            </remarks>
        </member>
        <member name="M:Common.Forms.FormWatch.UpdateWatchControlValues">
            <summary>
            This method updates the Value property for each of the watch controls associated with the selected workset with the latest values retrieved from the 
            target hardware.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWatch.DisposeOfUserControls">
            <summary>
            Dispose of the user control associated with each element of the user control jagged array.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWatch.OnDataUpdate(System.Object,System.EventArgs)">
            <summary>
            Raise a <c>DataUpdate</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="eventArgs">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="E:Common.Forms.FormWatch.DataUpdate">
            <summary>
            Occurs whenever the data is updated.
            </summary>
        </member>
        <member name="T:Common.Configuration.GroupListTable">
            <summary>
            A class to help access the self test group records contained within the <c>GROUPLIST</c> table of the data dictionary. The records are accessed using 
            the group list identifier value.
            </summary>
        </member>
        <member name="F:Common.Configuration.GroupListTable.m_GroupListIdentifierLists">
            <summary>
            An array containing the lists of those records from the <c>GROUPLISTIDS</c> table associated with each group list identifier. The array index 
            corresponds to the group list identifier e.g. m_GroupListIdentifierLists[3] would return a list of those records that had a value of 3 for the 
            <c>GROUPLISTID</c> field.
            </summary>
        </member>
        <member name="F:Common.Configuration.GroupListTable.m_GroupListDataTable">
            <summary>
            Reference to the <c>GROUPLIST</c> table of the data dictionary.
            </summary>
        </member>
        <member name="M:Common.Configuration.GroupListTable.#ctor(Common.Configuration.DataDictionary.GROUPLISTDataTable,Common.Configuration.DataDictionary.GROUPLISTIDSDataTable)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="dataTable">Reference to the <c>GROUPLIST</c> table of the data dictionary.</param>
            <param name="groupListIdentifiersDataTable">Reference to the <c>GROUPLISTIDS</c> table of the data dictionary. This table defines the self tests associated 
            with each self test group list.</param>
        </member>
        <member name="M:Common.Configuration.GroupListTable.BuildDataTable(Common.Configuration.DataDictionary.GROUPLISTDataTable)">
            <summary>
            Build an array of the records contained within the <c>GROUPLIST</c> table of the data dictionary. This array is used to access the 
            parameters associated with the self test groups defined in the table. The array element is mapped to the group list identifier field of the table.
            </summary>
            <param name="dataTable">Reference to the <c>GROUPLIST</c> table of the data dictionary.</param>
            <returns>An array of the records contained within the <c>GROUPLIST</c> table of the data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.GroupListTable.AddSelfTestRecordLists">
            <summary>
            Add the self tests associated with each group to the <c>SelfTestRecordList</c> property.
            </summary>
            <remarks>
            Externals
            <list type="table">
            <listheader><term>Member Variable/Property</term><description>Description</description></listheader>
            <item><term>Items</term><description>Gets an indexed array of the records contained in the <c>GROUPLIST</c> table.</description></item>
            <item><term>m_GroupListIdentifierLists</term><description>An array containing the lists of those records from the <c>GROUPLISTIDS</c> table associated with
            each group list identifier. The array index corresponds to the group list identifier e.g. m_GroupListIdentifierLists[3] would return a list of those records 
            that had a value of 3 for the <c>GROUPLISTID</c> field.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Common.Configuration.GroupListTable.BuildGroupListIdentifierLists(Common.Configuration.DataDictionary.GROUPLISTIDSDataTable)">
            <summary>
            Build an array of lists of <c>GroupListIdentifier_t</c> records associated with each unique <c>GROUPLISTID</c> value defined in the <c>GROUPLISTIDS</c> 
            table of the data dictionary. The array element is mapped to the <c>GROUPLISTID</c> field of the table.
            </summary>
            <param name="groupListIdentifiersDataTable">Reference to the <c>GROUPLISTIDS</c> table of the data dictionary.</param>
            <returns>An array of lists of <c>GroupListIdentifier_t</c> records associated with each unique <c>GROUPLISTID</c> value in the <c>GROUPLISTIDS</c> table 
            of the data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="T:Common.Configuration.EventVariable">
            <summary>
            A class to store the fields associated with an event variable.
            </summary>
        </member>
        <member name="T:Common.Configuration.Variable">
            <summary>
            A class that is used to store the fields that are common to all variable types associated with the vehicle control unit (VCU).
            </summary>
        </member>
        <member name="T:Common.Configuration.Record">
            <summary>
            A class that is used to store the fields that are common to all record types associated with the vehicle control unit (VCU).
            </summary>
        </member>
        <member name="F:Common.Configuration.Record.m_Identifier">
            <summary>
            The primary key identifier associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.Record.m_HelpIndex">
            <summary>
            The help index associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.Record.Identifier">
            <summary>
            Gets or sets the primary key identifier of the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.Record.HelpIndex">
            <summary>
            Gets or sets the help index associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.Variable.m_Name">
            <summary>
            The name of the variable name.
            </summary>
        </member>
        <member name="F:Common.Configuration.Variable.m_DataType">
            <summary>
            The data type of the variable.
            </summary>
        </member>
        <member name="F:Common.Configuration.Variable.m_VariableType">
            <summary>
            The type of variable: scalar; enumerator or bitmask.
            </summary>
        </member>
        <member name="F:Common.Configuration.Variable.m_ScaleFactor">
            <summary>
            The scaling factor that is to be used to convert the raw value to engineering units.
            </summary>
        </member>
        <member name="F:Common.Configuration.Variable.m_EnumBitIdentifier">
            <summary>
            The enumerator/bit mask identifier that is to be used when displaying the description/flags corresponding to the value field of the variable.
            </summary>
        </member>
        <member name="F:Common.Configuration.Variable.m_IsBitMask">
            <summary>
            A flag that indicates whether the variable is a bit mask. True, if the variable is a bit mask; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.Configuration.Variable.m_Units">
            <summary>
            The engineering units associated with the variable.
            </summary>
            <remarks>This is only relevant to scalar variables.</remarks>
        </member>
        <member name="F:Common.Configuration.Variable.m_FormatString">
            <summary>
            The format string to be used when displaying the value field of the variable.
            </summary>
        </member>
        <member name="F:Common.Configuration.Variable.m_ValueFromTarget">
            <summary>
            The value of the variable retrieved from the target.
            </summary>
        </member>
        <member name="F:Common.Configuration.Variable.m_DataTypeFromTarget">
            <summary>
            The data type of the variable retrieved from the target.
            </summary>
        </member>
        <member name="P:Common.Configuration.Variable.Name">
            <summary>
            Gets or sets the name of the variable.
            </summary>
        </member>
        <member name="P:Common.Configuration.Variable.DataType">
            <summary>
            Gets or sets the data type of the variable.
            </summary>
        </member>
        <member name="P:Common.Configuration.Variable.VariableType">
            <summary>
            Gets or sets the type of variable: scalar, bitmask or enumerator.
            </summary>
        </member>
        <member name="P:Common.Configuration.Variable.ScaleFactor">
            <summary>
            Gets or sets the scaling factor that is to be used to convert the raw value to engineering units.
            </summary>
        </member>
        <member name="P:Common.Configuration.Variable.EnumBitIdentifier">
            <summary>
            Gets or sets the enumerator/bit mask identifier that is to be used when displaying the description/flags corresponding to the variable value.
            </summary>
        </member>
        <member name="P:Common.Configuration.Variable.IsBitMask">
            <summary>
            Gets or sets the flag that indicates whether the variable is a bit mask. True, if the variable is a bit; otherwise, false.
            </summary>
        </member>
        <member name="P:Common.Configuration.Variable.Units">
            <summary>
            Gets or sets the engineering units associated with the variable.
            </summary>
        </member>
        <member name="P:Common.Configuration.Variable.FormatString">
            <summary>
            Gets or sets the format string to be used when displaying the value field of the variable.
            </summary>
        </member>
        <member name="P:Common.Configuration.Variable.ValueFromTarget">
            <summary>
            Gets or sets the value of the variable retrieved from the target.
            </summary>
        </member>
        <member name="P:Common.Configuration.Variable.DataTypeFromTarget">
            <summary>
            Gets or sets the data type of the variable retrieved from the target.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventVariable.m_ConversionFactor">
            <summary>
            The conversion factor that is to be applied to the event variable.
            </summary>
        </member>
        <member name="M:Common.Configuration.EventVariable.CopyTo(Common.Configuration.EventVariable@)">
            <summary>
            Copy all property values to the specified event variable.
            </summary>
            <param name="eventVariable">The event variable that the property values are to be copied to.</param>
        </member>
        <member name="P:Common.Configuration.EventVariable.ConversionFactor">
            <summary>
            Gets or sets the conversion factor that is to be applied to the event variable.
            </summary>
        </member>
        <member name="T:Common.UserControls.PlotterScalar">
            <summary>
            A user control to plot the value of a specified scalar watch variable over a specified time period.
            </summary>
        </member>
        <member name="T:Common.UserControls.IPlotterScalar">
            <summary>
            Interface associated with a user control that is used to plot scalar watch variables.
            </summary>
        </member>
        <member name="P:Common.UserControls.IPlotterScalar.Units">
            <summary>
            Gets or sets the engineering units associated with the watch variable.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterScalar.KeyToolStripMenuItemRemoveSelected">
            <summary>
            The key string used to access the 'Remove Selected Plot(s)' context menu item. Value: "m_ToolStripMenuItemRemoveSelected".
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterScalar.ButtonXBorder">
            <summary>
            The X axis border to allow when positioning the limit changing buttons. Value: 10.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterScalar.BorderXUnits">
            <summary>
            The border between the location of the Units label and the size of the control.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterScalar.m_IsDisposed">
            <summary>
            Flag to indicate whether the object has been disposed. True, indicates that the object has already been disposed; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterScalar.m_Description">
            <summary>
            The text associated with the description field.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterScalar.m_Units">
            <summary>
            The engineering units associated with the Y axis.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterScalar.m_Identifier">
            <summary>
            The watch variable identifier associated with the control.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterScalar.m_Removed">
            <summary>
            A flag that indicates whether the user has removed this plot from the display.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.#ctor(System.Int16,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the class. Initializes the description, units and the upper and lower limits, in engineering units, of the Y axis.
            </summary>
            <param name="oldIdentifier">The old identifier of the scalar watch variable that is to be plotted.</param>
            <param name="upperDisplayLimit">The upper limit, in engineering units, of the Y axis.</param>
            <param name="lowerDisplayLimit">The lower limit, in engineering units, of the Y axis.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the specified watch variable has not been defined in the data dictionary.</exception>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.#ctor">
            <summary>
            Initializes a new instance of the UserControl.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the user control.
            </summary>
            <param name="disposing">True, to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.m_ToolStripMenuItemRemoveSelected_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for 'Remove' context menu option. Remove all of the selected controls from the plot display.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.m_ToolStripMenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Definition' context menu. Show the diagnostic help information associated with the control.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.m_Plotter_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event handler for the <c>MouseDown</c> event associated with the <c>Plotter</c> control. Check the state of the control key and if this is pressed, add or 
            remove the control from the list of selected controls, depending upon whether the control is already in the list of selected controls. If the control 
            key is clear then clear the existing list and add the control to the new list.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.ContextMenuStrip_Opened(System.Object,System.EventArgs)">
            <summary>
            Event handler for the context menu Opened event. Check whether multiple controls are selected and, if so, ensure that only the 'Remove Selected Plot(s)' 
            context menu option is enabled.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.Start">
            <summary>
            Start plotting.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.Stop">
            <summary>
            Stop plotting. The user can now view the graphs
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.UpdateDisplay">
            <summary>
            Update the graph display. Call this method once all the data values have been set so that the changes are displayed on the graph.
            </summary>		
        </member>
        <member name="M:Common.UserControls.PlotterScalar.Reset">
            <summary>
            Reset the <c>Plotter</c> user control. Erases the graph and gets ready to start the whole plotting process again.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.SetHighlight(System.Boolean)">
            <summary>
            Set the <c>UserControl</c> to the specified highlighted state.
            </summary>
            <param name="value">True, to highlight the <c>UserControl</c>; otherwise, false.</param>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.ShowHelpPopup">
            <summary>
            Show the watch variable definition using the Windows help pop-up.
            </summary>
        </member>
        <member name="F:Common.UserControls.PlotterScalar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.Finalize">
            <summary>
            Destructor / Finalizer. Because Dispose() calls the GC.SuppressFinalize() method, this method is called by the garbage collection process only
            if the consumer of the object doesn't call the Dispose() method, as it should.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.Dispose">
            <summary>
            Public implementation of the IDisposable.Dispose method. Called by the consumer of the object in order to free unmanaged resources
            deterministically.
            </summary>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.Dispose(System.Boolean)">
            <summary>
            Clean up any resources that are currently being used.
            </summary>
            <param name="disposing">True, if the managed resources should be disposed of; otherwise, false.</param>
        </member>
        <member name="M:Common.UserControls.PlotterScalar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.IsDisposed">
            <summary>
            Gets or sets the flag which indicates whether the Dispose() method has been called. True, indicates that the Dispose() method has been called; otherwise, 
            false.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.Plot">
            <summary>
            Gets the reference to <c>Plotter</c> user control; enables the programmer to access the <c>Plotter</c> properties and events.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.StartTime">
            <summary>
            Gets or sets the start time of the plot.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.TripTime">
            <summary>
            Gets or sets the time of the actal trip.
            </summary>
            <remarks>Will display a vertical line at the time of the actual trip.</remarks>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.IsFaultLog">
            <summary>
            Gets or sets the flag used to indicate that the data corresponds to a fault log.
            </summary>
            <remarks>If the data corresponds to a fault log a vertical line will be drawn at the time specified by the <c>TripTime</c> property.</remarks>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.XRange">
            <summary>
            Gets or sets the time span of the X axis.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.TimeDisplayStyle">
            <summary>
            Gets or sets the display style of the time axis.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.PlotIntervalMs">
            <summary>
            Gets or sets the time interval, in ms, between successive plots. Used when displaying live data.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.Description">
            <summary>
            Gets or sets the description text associated with the watch variable.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.Units">
            <summary>
            Gets or sets the engineering units associated with the watch variable.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.Identifier">
            <summary>
            Gets or sets the watch variable identifier associated with the control.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.Channels">
            <summary>
            Gets the channel collection associated with the plot.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.Size">
            <summary>
            Gets or sets the size of the control, in pixels.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.Removed">
            <summary>
            Gets or sets the flag that indicates whether the user has removed this plot from the display.
            </summary>
        </member>
        <member name="P:Common.UserControls.PlotterScalar.RemoveSelectedPlot">
            <summary>
            Gets the ToolStripMenuItem control associated with the 'Remove Selected Plot(s)' context menu option.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
            <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="M:Common.Configuration.DataDictionary.WriteDataSetToXml(System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            Populate All tables in the 'DataDictionary' DataSet with data extracted from the specified project PTU configuration database and the specified engineering
            data dictionary database and then write this data to the specified XML file. 
            </summary>
            <param name="oleDbPTUConfigurationConnection">The 'OleDbConnection' connection to a valid Microsoft Access project PTU configuration database.</param>
            <param name="oleDbConnection">The 'OleDbConnection' connection to a valid Microsoft Access engineering data dictionary database (.e1).</param>
            <param name="fullFilename">The fully qualified filename of the output XML file.</param>
        </member>
        <member name="T:Common.Configuration.DataDictionary.WATCHENUMBITDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.WATCHVARIABLESDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.EVENTENUMBITDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.EVENTVARIABLESDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TESTLISTDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TESTLISTIDSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTVARIABLESDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTIDSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTERRMESSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTENUMBITDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TESTMESSAGESDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.MAINTENANCEDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.MACROSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.MACROCMDSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.EVENTSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.GROUPLISTIDSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.GROUPLISTDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNBITSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNIDSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNLIGHTDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNLISTDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNUNENUMBITDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.STRUCTDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TASKSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.FILEINFODataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.CONFIGUREPTUDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.DataStreamTypesDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.LOGSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SecurityDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.URIDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.WATCHENUMBITRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.WATCHVARIABLESRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.EVENTENUMBITRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.EVENTVARIABLESRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TESTLISTRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TESTLISTIDSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTVARIABLESRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTIDSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTERRMESSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTENUMBITRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TESTMESSAGESRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.MAINTENANCERow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.MACROSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.MACROCMDSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.EVENTSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.GROUPLISTIDSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.GROUPLISTRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNBITSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNIDSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNLIGHTRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNLISTRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNUNENUMBITRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.STRUCTRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TASKSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.FILEINFORow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.CONFIGUREPTURow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.DataStreamTypesRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.LOGSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SecurityRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.URIRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.WATCHENUMBITRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.WATCHVARIABLESRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.EVENTENUMBITRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.EVENTVARIABLESRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TESTLISTRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TESTLISTIDSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTVARIABLESRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTIDSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTERRMESSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SELFTESTENUMBITRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TESTMESSAGESRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.MAINTENANCERowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.MACROSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.MACROCMDSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.EVENTSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.GROUPLISTIDSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.GROUPLISTRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNBITSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNIDSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNLIGHTRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNLISTRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.ANNUNENUMBITRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.STRUCTRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.TASKSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.FILEINFORowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.CONFIGUREPTURowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.DataStreamTypesRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.LOGSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.SecurityRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionary.URIRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.WATCHENUMBITTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.WATCHVARIABLESTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.EVENTENUMBITTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.EVENTVARIABLESTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.TESTLISTTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.TESTLISTIDSTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.SELFTESTVARIABLESTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.SELFTESTIDSTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.SELFTESTERRMESSTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.SELFTESTTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.SELFTESTENUMBITTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.TESTMESSAGESTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.MAINTENANCETableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.MACROSTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.MACROCMDSTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.EVENTSTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.GROUPLISTIDSTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.GROUPLISTTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.ANNBITSTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.ANNIDSTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.ANNLIGHTTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.ANNLISTTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.ANNUNENUMBITTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.STRUCTTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.TASKSTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.FILEINFOTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.CONFIGUREPTUTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.DataStreamTypesTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.LOGSTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.SecurityTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryTableAdapters.URITableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:Common.Forms.FormWorksetManager">
            <summary>
            Form to manage the the worksets associated with a project. Allows the user to: edit, add and delete individual worksets or set any of the worksets to be the default 
            workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.ImageIndexBookmark">
            <summary>
            The image index associated with the bookmark image. Value: 2.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ContextMenu">
            <summary>
            Reference to the <c>ContextMenuStrip</c> control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ContextMenuItemEdit">
            <summary>
            Reference to the 'Edit' context menu.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ContextMenuItemNew">
            <summary>
            Reference to the 'New' context menu.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ContextMenuItemCopy">
            <summary>
            Reference to the 'Copy' context menu.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ContextMenuItemDelete">
            <summary>
            Reference to the 'Delete' context menu.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ContextMenuItemRename">
            <summary>
            Reference to the 'Rename' context menu.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ContextMenuItemSetAsDefault">
            <summary>
            Reference to the 'Set As Default' context menu.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ContextMenuItemOverrideSecurity">
            <summary>
            Reference to the 'Override Security' context menu.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ListView">
            <summary>
            Reference to the <c>ListView</c> control used to display the available worksets.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ColumnHeaderWorsetName">
            <summary>
            Reference to the <c>ColumnHeader</c> control associated with the workset names.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ColumnHeaderSecurityLevel">
            <summary>
            Reference to the <c>ColumnHeader</c> control associated with the security level of the workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_TextBoxNotes">
            <summary>
            Reference to the <c>TextBox</c> control containing the notes to the user.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ImageList">
            <summary>
            Reference to the <c>ImageList</c> control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_SeparatorNew">
            <summary>
            Reference to the 'New' <c>ToolStripSeparator</c> control. 
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_SeparatorCopy">
            <summary>
            Reference to the 'Copy' <c>ToolStripSeparator</c> control. 
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_SeparatorRename">
            <summary>
            Reference to the 'Rename' <c>ToolStripSeparator</c> control. 
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_PanelOuter">
            <summary>
            Reference to the <c>Panel</c> control. 
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_GroupBoxNotes">
            <summary>
            Reference to the 'Notes' <c>GroupBox</c> control. 
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_ButtonOK">
            <summary>
            Reference to the 'OK' <c>Button</c> control. 
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_SelectedIndex">
            <summary>
            The selected index of the ListView.
            </summary>
        </member>
        <member name="F:Common.Forms.FormWorksetManager.m_WorksetCollection">
            <summary>
            The workset collection that is to be managed.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor, required by Visual Studio.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.#ctor(Common.Configuration.WorksetCollection)">
            <summary>
            Initializes a new instance of the class. Records the securty level of the user and enables/disables the 'Set as Default' context menu option accordingly.
            </summary>
            <param name="worksetCollection">The workset collection that is to be managed.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.FormIODisplay_Activated(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Activated</c> event. Populates the <c>ListView</c> control with the currently defined worksets.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.m_ContextMenu_Opened(System.Object,System.EventArgs)">
            <summary>
            Event handler for the context menu <c>Opened</c> event. Set the <c>Enabled</c> property of the Edit, Rename and Delete context menu options appropriate to 
            the current security level and selected workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.m_ContextMenuItemEdit_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Edit' context menu option <c>Click</c> event. Edits the selected workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.m_ContextMenuItemNew_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'New' context menu option <c>Click</c> event. Shows the form which allows the user to define a new workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.m_ContextMenuItemCopy_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Copy' context menu option <c>Click</c> event. Copies an existing workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.m_ContextMenuItemDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Delete' context menu option <c>Click</c> event. Deletes the selected workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.m_ContextMenuItemRename_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Rename' context menu option <c>Click</c> event. Renames the selected workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.m_ListView_AfterLabelEdit(System.Object,System.Windows.Forms.LabelEditEventArgs)">
            <summary>
            Event handler for the <c>AfterLabelEdit</c> event. Updates the <c>workset</c> class with the new name of the workset and then saves the changes to disk.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.m_ContextMenuItemSetAsDefault_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Set As Default' context menu option <c>Click</c> event. Sets the selected workset as the default workset.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.m_ContextMenuItemOverrideSecurity_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Override Security' context menu option <c>Click</c> event. Sets the security level of the selected workset 
            to the specified value.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.m_ButtonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the OK button <c>Click</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.m_ListView_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Event handler for the list view control <c>DoubleClick</c> event. Simulate the user having selected the 'Edit' context menu option.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.Save">
            <summary>
            Save the workset information to disk.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.EditSelectedWorkset(Common.Configuration.WorksetItem)">
            <summary>
            Call the form which allows the user to edit the selected workset.
            </summary>
            <param name="selectedItem">The selected workset item.</param>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.CreateNewWorkset">
            <summary>
            Call the form which allows the user to create a new workset.
            </summary>
        </member>
        <member name="M:Common.Forms.FormWorksetManager.UpdateListView">
            <summary>
            Updates the ListView control with the list of available worksets.
            </summary>
        </member>
        <member name="P:Common.Forms.FormWorksetManager.ListView">
            <summary>
            Reference to the <c>ListView</c> associated with the form.
            </summary>
        </member>
        <member name="T:Common.Configuration.SelfTestVariable">
            <summary>
            A class to store the fields associated with a self test variable.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestVariable.m_EmbeddedName">
            <summary>
            The variable name used by the embedded software.
            </summary>
        </member>
        <member name="M:Common.Configuration.SelfTestVariable.CopyTo(Common.Configuration.SelfTestVariable@)">
            <summary>
            Copy all property values to the specified self test variable.
            </summary>
            <param name="selfTestVariable">The self test variable that the property values are to be copied to.</param>
        </member>
        <member name="P:Common.Configuration.SelfTestVariable.EmbeddedName">
            <summary>
            Gets or sets the variable name used by the embedded software.
            </summary>
        </member>
        <member name="T:Common.Configuration.SelfTestRecord">
            <summary>
            A class to store the fields associated with a self test.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestRecord.m_SelfTestNumber">
            <summary>
            The self test number associated with the test.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestRecord.m_Description">
            <summary>
            The description of the test.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestRecord.m_SelfTestVariableList">
            <summary>
            A list of the self test variables that are associated with the test.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestRecord.m_DateTime">
            <summary>
            The date and time of the test as a .NET <c>DateTime</c> object.
            </summary>
        </member>
        <member name="M:Common.Configuration.SelfTestRecord.#ctor">
            <summary>
            Initialize a new instance of the class. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Common.Configuration.SelfTestRecord.#ctor(System.Int16)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="identifier">The identifier assoiated with the record.</param>
        </member>
        <member name="M:Common.Configuration.SelfTestRecord.ToString">
            <summary>
            Override the ToString() method to return the description of the record.
            </summary>
            <returns>The log description.</returns>
        </member>
        <member name="P:Common.Configuration.SelfTestRecord.SelfTestNumber">
            <summary>
            Gets or sets the self test number associated with the test.
            </summary>
        </member>
        <member name="P:Common.Configuration.SelfTestRecord.Description">
            <summary>
            Gets or sets the description of the test.
            </summary>
        </member>
        <member name="P:Common.Configuration.SelfTestRecord.SelfTestVariableList">
            <summary>
            Gets or sets the list of the self test variables that are associated with the test.
            </summary>
        </member>
        <member name="P:Common.Configuration.SelfTestRecord.DateTime">
            <summary>
            Gets or sets the date and time of the test as a .NET <c>DateTime</c> object.
            </summary>
        </member>
        <member name="T:Common.Configuration.GroupListRecord">
            <summary>
            A structure to store the fields associated with an entry from the <c>GROUPLIST</c> table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.GroupListRecord.m_Description">
            <summary>
            The description of the self test group.
            </summary>
        </member>
        <member name="F:Common.Configuration.GroupListRecord.m_Attribute">
            <summary>
            The attribute field of the self test group.
            </summary>
        </member>
        <member name="F:Common.Configuration.GroupListRecord.m_SelfTestRecordList">
            <summary>
            The list of self tests associated with the self test group.
            </summary>
        </member>
        <member name="M:Common.Configuration.GroupListRecord.#ctor">
            <summary>
            Initialize a new instance of the class.
            </summary>
        </member>
        <member name="M:Common.Configuration.GroupListRecord.ToString">
            <summary>
            Override the ToString() method to return the description of the group.
            </summary>
            <returns>The log description.</returns>
        </member>
        <member name="P:Common.Configuration.GroupListRecord.Description">
            <summary>
            Gets or sets the description of the self test group.
            </summary>
        </member>
        <member name="P:Common.Configuration.GroupListRecord.Attribute">
            <summary>
            Gets or sets the attribute field of the self test group.
            </summary>
        </member>
        <member name="P:Common.Configuration.GroupListRecord.SelfTestRecordList">
            <summary>
            Gets or sets the list of self tests associated with the self test group.
            </summary>
        </member>
        <member name="T:Common.Configuration.TestListTable">
            <summary>
            A class to help access the self test group records contained within the <c>TESTLIST</c> table of the data dictionary. The records are accessed using 
            the test list identifier value.
            </summary>
        </member>
        <member name="F:Common.Configuration.TestListTable.m_TestListIdentifierLists">
            <summary>
            An array containing the lists of those records from the <c>TESTLISTIDS</c> table associated with each test list identifier. The array index 
            corresponds to the test list identifier e.g. m_TestListIdentifierLists[3] would return a list of those records that had a value of 3 for the 
            <c>TESTLISTID</c> field.
            </summary>
        </member>
        <member name="F:Common.Configuration.TestListTable.m_TestListDataTable">
            <summary>
            Reference to the <c>TESTLIST</c> table of the data dictionary.
            </summary>
        </member>
        <member name="M:Common.Configuration.TestListTable.#ctor(Common.Configuration.DataDictionary.TESTLISTDataTable,Common.Configuration.DataDictionary.TESTLISTIDSDataTable)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="dataTable">Reference to the <c>TESTLIST</c> table of the data dictionary.</param>
            <param name="testListIdentifiersDataTable">Reference to the <c>TESTLISTIDS</c> table of the data dictionary. This table defines the self tests associated 
            with each test list.</param>
        </member>
        <member name="M:Common.Configuration.TestListTable.BuildDataTable(Common.Configuration.DataDictionary.TESTLISTDataTable)">
            <summary>
            Build an array of the records contained within the <c>TESTLIST</c> table of the data dictionary. This array is used to access the 
            parameters associated with the test lists defined in the table. The array element is mapped to the test list identifier field of the table.
            </summary>
            <param name="dataTable">Reference to the <c>TESTLIST</c> table of the data dictionary.</param>
            <returns>An array of the records contained within the <c>TESTLIST</c> table of the data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.TestListTable.AddSelfTestRecordLists">
            <summary>
            Add the self tests associated with each test list to the <c>SelfTestRecordList</c> property.
            </summary>
            <remarks>
            Externals
            <list type="table">
            <listheader><term>Member Variable/Property</term><description>Description</description></listheader>
            <item><term>Items</term><description>Gets an indexed array of the records contained in the <c>GROUPLIST</c> table.</description></item>
            <item><term>m_TestListIdentifierLists</term><description>An array containing the lists of those records from the <c>TESTLISTIDS</c> table associated with
            each test list identifier. The array index corresponds to the test list identifier e.g. m_TestListIdentifierLists[3] would return a list of those records 
            that had a value of 3 for the <c>TESTLISTID</c> field.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Common.Configuration.TestListTable.BuildTestListIdentifierLists(Common.Configuration.DataDictionary.TESTLISTIDSDataTable)">
            <summary>
            Build an array of lists of <c>TestListIdentifier_t</c> records associated with each unique <c>TESTLISTID</c> value defined in the <c>TESTLISTIDS</c> 
            table of the data dictionary. The array element is mapped to the <c>TESTLISTID</c> field of the table.
            </summary>
            <param name="testListIdentifiersDataTable">Reference to the <c>TESTLISTIDS</c> table of the data dictionary.</param>
            <returns>An array of lists of <c>TestListIdentifier_t</c> records associated with each unique <c>TESTLISTID</c> value in the <c>TESTLISTIDS</c> table 
            of the data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="T:Common.Configuration.EventRecord">
            <summary>
            A class to store the fields associated with a vehicle control unit system event.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_EventIdentifier">
            <summary>
            The event identifier associated with the event.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_Description">
            <summary>
            The description of the event.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_TaskIdentifier">
            <summary>
            The task identifier associated with the event.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_LogIdentifier">
            <summary>
            The log identifier associated with the event.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_StructureIdentifier">
            <summary>
            The structure identifier associated with the event.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_EventVariableList">
            <summary>
            A list of the event variables that are associated with the event.
            </summary>
            <remarks>
            These consist of the event variables that are collected for each event plus the event specific variables.
            </remarks>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_CarIdentifier">
            <summary>
            The car identifier.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_EventIndex">
            <summary>
            The event index associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_Time">
            <summary>
            The time of the event.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_Date">
            <summary>
            The date of the event.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_DateTime">
            <summary>
            The date and time of the event as a .NET <c>DateTime</c> object.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_StreamSaved">
            <summary>
            A flag that indicates whether a stream has been saved for the event. True, indicates that a stream has been saved for the event; false, if no stream is 
            available.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventRecord.m_StreamNumber">
            <summary>
            The stream number value that is to be used to access the datastream associated with this record.
            </summary>
            <remarks>The stream number will be set to CommonConstants.NotUsed if there is no datastream associated with the record.</remarks>
        </member>
        <member name="M:Common.Configuration.EventRecord.#ctor">
            <summary>
            Initialize a new instance of the class. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Common.Configuration.EventRecord.#ctor(System.Int16)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="identifier">The identifier assoiated with the record.</param>
        </member>
        <member name="P:Common.Configuration.EventRecord.EventIdentifier">
            <summary>
            Gets or sets the event identifier associated with the event.
            </summary>
        </member>
        <member name="P:Common.Configuration.EventRecord.Description">
            <summary>
            Gets or sets the description of the event.
            </summary>
        </member>
        <member name="P:Common.Configuration.EventRecord.TaskIdentifier">
            <summary>
            Gets or sets the task identifier associated with the event.
            </summary>
        </member>
        <member name="P:Common.Configuration.EventRecord.LogIdentifier">
            <summary>
            Gets or sets the log identifier associated with the event.
            </summary>
        </member>
        <member name="P:Common.Configuration.EventRecord.StructureIdentifier">
            <summary>
            Gets or sets the structure identifier associated with the event.
            </summary>
        </member>
        <member name="P:Common.Configuration.EventRecord.EventVariableList">
            <summary>
            Gets or sets the list of event variables that are associated with the event.
            </summary>
            <remarks>
            These consist of the event variables that are collected for each event plus the event specific variables.
            </remarks>
        </member>
        <member name="P:Common.Configuration.EventRecord.CarIdentifier">
            <summary>
            Gets or sets the car identifier.
            </summary>
        </member>
        <member name="P:Common.Configuration.EventRecord.EventIndex">
            <summary>
            Gets or sets the event index associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.EventRecord.Time">
            <summary>
            Gets or sets the time of the event.
            </summary>
        </member>
        <member name="P:Common.Configuration.EventRecord.Date">
            <summary>
            Gets or sets the date of the event.
            </summary>
        </member>
        <member name="P:Common.Configuration.EventRecord.DateTime">
            <summary>
            Gets or sets the date and time of the event as a .NET <c>DateTime</c> object.
            </summary>
        </member>
        <member name="P:Common.Configuration.EventRecord.StreamSaved">
            <summary>
            Gets or sets the flag that indicates whether a stream has been saved for the event.
            </summary>
        </member>
        <member name="P:Common.Configuration.EventRecord.StreamNumber">
            <summary>
            Gets or sets the stream number value that is to be used to access the datastream associated with this record.
            </summary>
        </member>
        <member name="T:Common.UserControls.DigitalControl">
            <summary>
            Multi-purpose label user control including: pre-defined ON and OFF state background and foreground colours; support for diagnostic help 
            context menu option and a blink facility.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.DefaultIntervalBlinkMs">
            <summary>
            The default interval, in ms, between successive blinks.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.DigitalControl.Finalize">
            <summary>
            Destructor / Finalizer. Because Dispose calls GC.SuppressFinalize, this method is called by the garbage collection process only
            if the consumer of the object doesn't call Dispose as it should.
            </summary>
        </member>
        <member name="M:Common.UserControls.DigitalControl.Dispose">
            <summary>
            Public implementation of the IDisposable.Dispose method, called by the consumer of the object in order to free unmanaged resources
            deterministically.
            </summary>
        </member>
        <member name="M:Common.UserControls.DigitalControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Common.UserControls.DigitalControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_ContextMenu">
            <summary>
            Reference to the context menu associated with this user control.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_MenuItemDiagnosticInformation">
            <summary>
            Reference to the 'Diagnostic Information' menu option of the context menu.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_MenuItemCancelSelection">
            <summary>
            Reference to the 'Cancel Selection' menu option of the context menu.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_Highlight">
            <summary>
            The highlight colour associated with the ON state.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_HighlightText">
            <summary>
            The highlight text colour associated with the ON state.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_DiagnosticHelpFileName">
            <summary>
            The fully qualified filename of the diagnostic help file.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_DiagnosticHelpExists">
            <summary>
            Flag to indiate whether the diagnostic help file exists. True, if the diagnostic help file exists; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_BackColorOn">
            <summary>
            The background colour associated with the ON state.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_ForeColorOn">
            <summary>
            The foreground colour associated with the ON state.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_BackColorOff">
            <summary>
            The background colour associated with the OFF state.  
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_ForeColorOff">
            <summary>
            The foreground colour associated with the OFF state.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_IsDisposed">
            <summary>
            Flag to indicate whether the Dispose() method has been called. True indicates that the Dispose() method has been called; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_IsOn">
            <summary>
            True, if the <c>State</c> property is currently in the ON state; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_BlinkDurationMs">
            <summary>
            The duration of the blink, in ms.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_State">
            <summary>
            The current digital IO state.
            </summary>
        </member>
        <member name="F:Common.UserControls.DigitalControl.m_BlinkTimer">
            <summary>
            Timer to control the blink interval.
            </summary>
        </member>
        <member name="M:Common.UserControls.DigitalControl.#ctor">
            <summary>
            Initializes a new instance of the class. Initializes the blink timer and background/foreground colours.
            </summary>
        </member>
        <member name="M:Common.UserControls.DigitalControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.DigitalControl.DigitalControl_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Click event. Sets the focus to the panel on which the control has been placed and highlights the control to 
            indicate that the control has been selected.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.DigitalControl.DigitalControl_GotFocus(System.Object,System.EventArgs)">
            <summary>
            Event handler for the user control <c>GotFocus</c>  event. Highlights the user control.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.DigitalControl.DigitalControl_Leave(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Leave event. Turns the control highlight off.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.DigitalControl.m_MenuItemDiagnosticInformation_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Diagnostic Information context menu option <c>Click</c>event. Turns the control highlight off and displays the 
            diagnostic information corresponding to the channel reference of the selected control.
            </summary>
            <remarks>The diagnostic help information is derived using the channel address which is stored within the Tag field of the control.</remarks>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.DigitalControl.m_MenuItemCancelSelection_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Cancel Selection' context menu option <c>Click</c> event. Cancels the current selection.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.DigitalControl.CheckForDiagnosticHelp(System.String)">
            <summary>
            Checks whether the specified diagnostic help file exists and, if so, generates and stores the fully qualified file name and updates the internal flag
            which indicates whether the help file exists.
            </summary>
            <remarks>If diagnostic help is to be supported then this static method must be called prior to instantiation.</remarks>
            <param name="diagnosticHelpName">The file name of the diagnostic help file.</param>
        </member>
        <member name="M:Common.UserControls.DigitalControl.SetState(System.Boolean)">
            <summary>
            Sets the background and foreground colours of the control to reflect the state of the user control.
            </summary>
            <param name="state">The state of the user control.</param>
        </member>
        <member name="M:Common.UserControls.DigitalControl.BlinkThreadSafe">
            <summary>
            Calls the Blink() method in a ThreadSafe way.
            </summary>
        </member>
        <member name="M:Common.UserControls.DigitalControl.Blink">
            <summary>
            Initiates a blink by changing the background colour to the ON colour and then initiating the flash timer. On expiration of the blink
            timer the background will revert to the OFF colour, see the event handler for the timer expired event.
            </summary>
        </member>
        <member name="M:Common.UserControls.DigitalControl.TimerExpired(System.Object,System.EventArgs)">
            <summary>
            Event handler for the timer expired event. Reverts the background colour to the OFF colour and stops the blink timer. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="P:Common.UserControls.DigitalControl.IsDisposed">
            <summary>
            Gets or sets the flag which indicates whether the Dispose() method has been called. True indicates that the Dispose() method has been called; otherwise, false.
            </summary>
        </member>
        <member name="P:Common.UserControls.DigitalControl.BackColor">
            <summary>
            Gets or sets the background colour of the user control.
            </summary>
            <remarks>Override the <c>BackColor</c> property of the user control and set the <c>Browsable</c> reflection property to false so that it
            doesn't appear in the property window.</remarks>
        </member>
        <member name="P:Common.UserControls.DigitalControl.ForeColor">
            <summary>
            Gets or sets the foreground colour of the user control.
            </summary>
            <remarks>Override the <c>BackColor</c> property of the user control and set the <c>Browsable</c> reflection property to false so that it
            doesn't appear in the property window.</remarks>
        </member>
        <member name="P:Common.UserControls.DigitalControl.BackColorOff">
            <summary>
            Gets or sets the background colour associated with the OFF state.
            </summary>
        </member>
        <member name="P:Common.UserControls.DigitalControl.ForeColorOff">
            <summary>
            Gets or sets the foreground colour associated with the OFF state.
            </summary>
        </member>
        <member name="P:Common.UserControls.DigitalControl.BackColorOn">
            <summary>
            Gets or sets the background colour associated with the ON state.
            </summary>
        </member>
        <member name="P:Common.UserControls.DigitalControl.ForeColorOn">
            <summary>
            Gets or sets the foreground colour associated with the ON state.
            </summary>
        </member>
        <member name="P:Common.UserControls.DigitalControl.IntervalBlinkMs">
            <summary>
            Gets or sets the duration of the blink, in ms.
            </summary>
        </member>
        <member name="P:Common.UserControls.DigitalControl.State">
            <summary>
            Gets or sets the current state of the user control i.e. true (ON) or false (OFF).
            </summary>
        </member>
        <member name="P:Common.UserControls.DigitalControl.DigitalControlText">
            <summary>
            Gets or sets the text associated with the control.
            </summary>
        </member>
        <member name="T:Common.UserControls.DigitalControl.InvokeNoParameterMethod">
            <summary>
            Delegate used to invoke a call to any standard method that does not require any parameters.
            </summary>
        </member>
        <member name="T:Common.UserControls.EventScalarControl">
            <summary>
            The scalar event variable user control. Displays the engineering value corresponding to the specified raw <c>Value</c> property for the scalar event variable specified
            by the <c>Identifier</c> property.
            </summary>
        </member>
        <member name="F:Common.UserControls.EventScalarControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.EventScalarControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Common.UserControls.EventScalarControl.#ctor">
            <summary>
            Initializes a new instance of th class.
            </summary>
        </member>
        <member name="M:Common.UserControls.EventScalarControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Common.UserControls.EventScalarControl.Value">
            <summary>
            Gets or sets the current value of event variable.
            </summary>
        </member>
        <member name="T:Common.Configuration.InitialDirectory">
            <summary>
            Class to manage the initial directory paths when reading and writing data from/to the PTU application data directories using the <c>FileDialog</c> derived classes.
            </summary>
        </member>
        <member name="F:Common.Configuration.InitialDirectory.m_PathE1FilesRead">
            <summary>
            The initial directory when reading '.E1' database files.
            </summary>
        </member>
        <member name="F:Common.Configuration.InitialDirectory.m_PathWatchFilesRead">
            <summary>
            The initial directory when reading watch files.
            </summary>
        </member>
        <member name="F:Common.Configuration.InitialDirectory.m_PathWatchFilesWrite">
            <summary>
            The initial directory when writing watch files.
            </summary>
        </member>
        <member name="F:Common.Configuration.InitialDirectory.m_PathFaultLogsRead">
            <summary>
            The initial directory when reading fault logs.
            </summary>
        </member>
        <member name="F:Common.Configuration.InitialDirectory.m_PathFaultLogsWrite">
            <summary>
            The initial directory when writing fault logs.
            </summary>
        </member>
        <member name="F:Common.Configuration.InitialDirectory.m_PathSimulatedFaultLogsRead">
            <summary>
            The initial directory when reading simulated fault logs.
            </summary>
        </member>
        <member name="F:Common.Configuration.InitialDirectory.m_PathSimulatedFaultLogsWrite">
            <summary>
            The initial directory when writing simulated fault logs.
            </summary>
        </member>
        <member name="F:Common.Configuration.InitialDirectory.m_PathEventLogsRead">
            <summary>
            The initial directory when reading event logs.
            </summary>
        </member>
        <member name="F:Common.Configuration.InitialDirectory.m_PathEventLogsWrite">
            <summary>
            The initial directory when writing event logs.
            </summary>
        </member>
        <member name="F:Common.Configuration.InitialDirectory.m_PathScreenCaptureFilesRead">
            <summary>
            The initial directory when reading screen capture files.
            </summary>
        </member>
        <member name="F:Common.Configuration.InitialDirectory.m_PathScreenCaptureFilesWrite">
            <summary>
            The initial directory when writing screen capture files.
            </summary>
        </member>
        <member name="M:Common.Configuration.InitialDirectory.#cctor">
            <summary>
            Static constructor. Sets the initial directory paths to their default values.
            </summary>
        </member>
        <member name="M:Common.Configuration.InitialDirectory.Reset">
            <summary>
            Resets the initial directory paths to their default values.
            </summary>
            <remarks>A call to this method should be made whenever the PTU application data directory is changed.</remarks>
        </member>
        <member name="P:Common.Configuration.InitialDirectory.WatchFilesRead">
            <summary>
            Gets or sets the initial directory when reading watch files. 
            </summary>
        </member>
        <member name="P:Common.Configuration.InitialDirectory.WatchFilesWrite">
            <summary>
            Gets or sets the initial directory when writing watch files. 
            </summary>
        </member>
        <member name="P:Common.Configuration.InitialDirectory.FaultLogsRead">
            <summary>
            Gets or sets the initial directory when reading fault logs. 
            </summary>
        </member>
        <member name="P:Common.Configuration.InitialDirectory.FaultLogsWrite">
            <summary>
            Gets or sets the initial directory when writing fault logs.
            </summary>
        </member>
        <member name="P:Common.Configuration.InitialDirectory.SimulatedFaultLogsRead">
            <summary>
            Gets or sets the initial directory when reading simulated fault logs. 
            </summary>
        </member>
        <member name="P:Common.Configuration.InitialDirectory.SimulatedFaultLogsWrite">
            <summary>
            Gets or sets the initial directory when writing simulated fault logs.
            </summary>
        </member>
        <member name="P:Common.Configuration.InitialDirectory.EventLogsRead">
            <summary>
            Gets or sets the initial directory when reading event logs. 
            </summary>
        </member>
        <member name="P:Common.Configuration.InitialDirectory.EventLogsWrite">
            <summary>
            Gets or sets the initial directory when writing event logs. 
            </summary>
        </member>
        <member name="P:Common.Configuration.InitialDirectory.ScreenCaptureFilesRead">
            <summary>
            Gets or sets the initial directory when reading screen capture files. 
            </summary>
        </member>
        <member name="P:Common.Configuration.InitialDirectory.ScreenCaptureFilesWrite">
            <summary>
            Gets or sets the initial directory when writing screen capture files. 
            </summary>
        </member>
        <member name="P:Common.Configuration.InitialDirectory.E1FilesRead">
            <summary>
            Gets or sets the initial directory when reading '.E1' database files. 
            </summary>
        </member>
        <member name="T:Common.Forms.FormDataStreamPlot">
            <summary>
            Form to plot recorded watch values.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.KeyTableLayoutPanel">
            <summary>
            The key associated with the <c>TableLayoutPanel</c> control for each tab page. Value: "m_TableLayoutPanel".
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.PreferredHeight">
            <summary>
            The preferred height, in pixels, of each row of the <c>TableLayoutPanel</c> control. Value: 100 px.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.ResolutionLogFileMs">
            <summary>
            The resolution, in ms, when specifying the start and stop times of a file that is to be plotted. Value: 10 ms.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.m_WatchFile">
            <summary>
            The recorded watch data.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.SaveWatchFile">
            <summary>
            Save the recorded watch data to disk. 
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.m_HistoricDataManager">
            <summary>
            Reference to the <c>HistoricDataManager</c> class - used to support zooming in and out of the plot time range.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.m_TimeFormatString">
            <summary>
            The format string to be applied when displaying time values.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.m_PlotterControlLayout">
            <summary>
            Reference to the class that supports the configuration, drawing and layout of multiple <c>PlotterControl</c> derived user controls.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.m_FormDataStreamReplay">
            <summary>
            Reference to the form which allows the user to inspect individual data frames. This is called using function key F4.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.m_IsDefaultLayout">
            <summary>
            Flag to indicate whether the current plot layout is the default layout i.e. the layout is based upon the watch variables defined in the
            Column field of the workset. True, if the current plot layout is the default layout; otherwise, false.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor required by Visual Studio.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.#ctor(Common.WatchFile_t)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="watchFile">The structure containing the data stream that is to be plotted.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.FormDataStreamPlot_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Shown' event. Called every time the form is shown, similar to the 'Activated' event, however, unlike the
            'Activated' event, the dimensions of the form will now be valid making this method more useful for positioning components.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.Escape_Click(System.Object,System.EventArgs)">
            <summary>
             Event handler for the Exit button 'Click' event. Tidy up any loose ends.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.F2_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F2-Print' button <c>Click</c> event. Capture the window and save the image to the specified file.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.F4_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the F4 function key. Hides this form and displays the form which allows the user to step through individual data frames.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.F5_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the F5 function key. Displays the dialog box that allows the user to configure the screen layout. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.F6_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the F6 function key. Toggle between single cursor (default) and simultaneous cursor display. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.F12_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for F12 function key. Shows the form whixh displays the file header information.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.RangeReset(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>RangeReset</c> event associated with the <c>ViewDataStream</c> class. Resets the time-span to the initial state
            and re-plots the data values for all watch variables.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.ZoomSelected(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>ZoomSelected</c> event associated with the <c>ViewDataStream</c> class. Updates the <c>StartTime</c> and
            <c>StopTime</c> properties of the <c>HistoricDataManager</c> class with the values selected by the user and re-plots the data values of
            all frames between the specified start and stop times for all watch variables.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.RangeChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>RangeChanged</c> event associated with the <c>ViewDataStream</c> class. Calls the <c>UpdateStatusLabels()
            </c> method.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.RemoveSelected(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>RemoveSelected</c> event. This event handler is called when one or more plots are removed using the 'Remove Selected Plot(s)' context menu. The
            event handler informs the user that the plot layout has been modified.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.TabPage_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Click</c> event associated with each <c>TabPage</c>. (1) Sets the focus to the selected <c>TabPage</c>, this
            ensures that the <c>Leave</c> event for the selected user control is triggered.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.Exit">
            <summary>
            Close the form cleanly.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.UpdateStatusLabels">
            <summary>
            Update the start time, stop time and time-span status labels from the data contained within the <see cref="T:CodeProject.GraphComponents.PlotterRangeSelection"/>
            structure.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.SetTripTime(System.Windows.Forms.TabControl,System.DateTime)">
            <summary>
            Set the TripTime property of the plotter controls associated with the specified <c>TabControl</c>.
            </summary>
            <remarks>
            This method is not relevant to recorded watch variable data.
            </remarks>
            <param name="tabControl">The <c>TabControl</c> that is to be processed.</param>
            <param name="tripTime">The time of the trip that initiated the log.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.InitializePlotterRangeSelection(System.DateTime)">
            <summary>
            Initialize the <see cref="T:CodeProject.GraphComponents.PlotterRangeSelection"/> structure using the watch variable data loaded into the
            <see cref="T:Common.HistoricDataManager"/> class. 
            If the data to be displayed is not a fault log or a simulated fault log, <paramref name="tripTime"/> will be ignored.
            </summary>
            <param name="tripTime">The time of the trip if the data represents a fault log or a simulated fault log; otherwise DateTime.Now.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.PlotHistoricData(System.Windows.Forms.TabControl)">
            <summary>
            Plot the historic data for all watch variables associated with the specified <c>TabControl</c>.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.ConfigureTabControl(System.Windows.Forms.TabControl,Common.WatchFile_t)">
            <summary>
            Configure the specified <c>TabControl</c> control so that it can be used to plot the watch values saved within the specified file.
            (1) Create a tab page for every display column in the workset that contains watch variables, (2) add a layout panel to each of the tab
            pages and (3) add configured plotter user controls corresponding to the watch variables associated with the display column to each layout
            panel. The size and range information is not configured at this stage.
            </summary>
            <param name="tabControl">The <c>TabControl</c> that is to be configured.</param>
            <param name="watchFile">The watch file containing the data that is to be plotted.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.ConfigureTableLayoutPanel(System.Windows.Forms.TableLayoutPanel,Common.Configuration.Workset_t,Common.Communication.AutoScale_t[],System.Int32)">
            <summary>
            Add the plotter controls used to plot the watch variables associated with the specified column of the workset to the specified
            <c>TableLayoutPanel</c>.
            </summary>
            <param name="tableLayoutPanel">The <c>TableLayoutPanel</c> that is to be configured.</param>
            <param name="workset">The workset containing the watch variables.</param>
            <param name="autoScaleWatchValues">The auto-scale values associated with the watch variables contained within the workset.</param>
            <param name="tabPageIndex">The index of the tab page definition that is to be processed.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.CallFunction(System.Windows.Forms.TabControl,Common.Forms.FormDataStreamPlot.ModifyPlotterWatch,System.Object)">
            <summary>
            Calls the specified delegated function for each row of the <c>TableLayoutPanel</c> control associated with each <c>TabPage</c> of the
            specified <c>TabControl</c>.
            </summary>
            <param name="tabControl">The <c>TabControl</c> that is to be processed.</param>
            <param name="functionDelegate">The delegate for the function that is to be called.</param>
            <param name="parameter">The parameters, as an object array, that are to be passsed to the delegate.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.ConstructTabPage(System.String,System.Windows.Forms.TableLayoutPanel)">
            <summary>
            Instantiates and initializes a new <c>TabPage</c> control and then adds the specified layout panel to the tab page.
            </summary>
            <param name="text">The text that is to appear in the tab.</param>
            <param name="tableLayoutPanel">The <c>TableLayoutPanel</c> that is to be added to the <c>TabPAge</c> control.</param>
            <returns>The initialized <c>TabPage</c> control.</returns>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.ConstructLayoutPanel(System.Int32)">
            <summary>
            Instantiates and initializes a new <c>TableLayoutPanel</c> control. This panel will be used to layout the plotter controls required to
            display the watch variable data associated with the tab page definition of the workset corresponding to the specified tab page definition
            index.
            </summary>
            <param name="tabPagePlotIndex">The index of the workset tab page definition that is associated with the <c>TableLayoutPanel</c> control.
            </param>
            <returns>The initialized <c>TableLayoutPanel</c> control.</returns>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.LayoutPanelsVisible(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Show the <c>TableLayoutPanel</c> controls associated with each <c>TabPage</c> of the specified <c>TabControl</c>.
            </summary>
            <param name="tabControl">The <c>TabControl</c> containing the <c>TableLayoutPanel</c> controls.</param>
            <param name="visible">Flag to control the <c>Visible</c> property of each <c>TableLayoutPanel</c> control.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.RePlotHistoricData">
            <summary>
            Re-plot the data values associated with the updated <c>HistoricDataManager></c> properties and update the status information.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.ConstructPlotTabPages(System.Windows.Forms.TabControl,System.Boolean@)">
            <summary>
            Instantiates and initializes an array of <c>PlotTabPage_t</c> structures to match the current plot display settings. This can then be used
            to set the <c>PlotTabPages</c> property of the workset associated with the current watch file.
            </summary>
            <param name="tabControl">The <c>TabControl</c> that is to be processed.</param>
            <param name="itemsRemoved">A flag to indicate that one or more items have been removed by the user.</param>
            <returns>An array of <c>PlotTabPage_t</c> structures corresponding to the current plot display settings.</returns>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.DisposeOfUserControls">
            <summary>
            Dispose of the user control associated with each <c>TabPage</c> of the <c>TabControl</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamPlot.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.m_PanelSupplementalInformation">
            <summary>
            Reference to the <c>Panel</c> control used to display the supplemental information associated with the data stream.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.m_LabelSupplementalInformation">
            <summary>
            Reference to the <c>Label</c> control that is used to display the supplemental text.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamPlot.m_LegendSupplementalInformation">
            <summary>
            Reference to the <c>Label</c> control used to display the legend associated with the supplemental information.
            </summary>
        </member>
        <member name="P:Common.Forms.FormDataStreamPlot.WatchFile">
            <summary>
            Gets or sets the recorded watch data.
            </summary>
        </member>
        <member name="P:Common.Forms.FormDataStreamPlot.IsDefaultPlotLayout">
            <summary>
            Gets the flag that indicates whether the current plot layout is the default layout i.e. the layout is based upon the watch variables defined in the
            Column field of the workset. True, if the current plot layout is the default layout; otherwise, false.
            </summary>
        </member>
        <member name="T:Common.Forms.FormDataStreamPlot.ModifyPlotterWatch">
            <summary>
            Genral purpose delegate used to modify the properties of the specified <c>IPlotterWatch</c> derived user control.
            </summary>
            <remarks>All parameters are passed as an object array.</remarks>
            <param name="plotterWatch">The <c>IPlotterWatch</c> derived user control that is to have its properties modified.</param>
            <param name="parameters">The parameters that are to be passed to the delegated function.</param>
        </member>
        <member name="T:Common.Forms.FormSetSecurityLevel">
            <summary>
            Form to allow the user to modify the security level associated with a workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormSetSecurityLevel.m_SecurityLevel">
            <summary>
            The selected security level of the workset.
            </summary>
        </member>
        <member name="M:Common.Forms.FormSetSecurityLevel.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Common.Forms.FormSetSecurityLevel.#ctor(System.String,Common.SecurityLevel)">
            <summary>
            Initializes a new instance of the class. Loads the <c>ComboBox</c> control with the security level descriptions associated with the project and sets the 
            <c>Text</c> property of the <c>ComboBox</c> control to the description corresponding to the specified security level.
            </summary>
            <param name="name">The name of the workset.</param>
            <param name="securityLevelWorkset">The current security level of the workset.</param>
        </member>
        <member name="M:Common.Forms.FormSetSecurityLevel.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormSetSecurityLevel.m_ButtonCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Canel button <c>Click</c> event. Close the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormSetSecurityLevel.m_ButtonOK_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the OK button <c>Click</c> event. Set the <c>SecurityLevel</c> property to the selected security level.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="F:Common.Forms.FormSetSecurityLevel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormSetSecurityLevel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Common.Forms.FormSetSecurityLevel.SecurityLevel">
            <summary>
            Gets the selected security level of the workset.
            </summary>
        </member>
        <member name="T:Common.Forms.FormPlotDefineBitmask">
            <summary>
            Form used to define which bits of a bitmask watch variable are to be plotted.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPlotDefineBitmask.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPlotDefineBitmask.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefineBitmask.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPlotDefineBitmask.m_DisplayMask">
            <summary>
            The display mask value associated with the selected bitmask watch variable.
            </summary>
        </member>
        <member name="F:Common.Forms.FormPlotDefineBitmask.m_ListBox">
            <summary>
            Reference to the <c>ListBox</c> control.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPlotDefineBitmask.#ctor">
            <summary>
            Zero parameter constructor. Required for Visual Studio.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPlotDefineBitmask.#ctor(System.Windows.Forms.ListBox@)">
            <summary>
            Initialize a new instance of the class.
            </summary>
        </member>
        <member name="M:Common.Forms.FormPlotDefineBitmask.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefineBitmask.m_ButtonApply_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Apply button <c>Click</c> event. Apply the changes.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefineBitmask.m_ButtonClearAll_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Clear All' button <c>Click</c> event. Clear the <c>Checked</c> property of all <c>CheckBox</c> controls.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefineBitmask.m_ButtonInvert_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Invert' button <c>Click</c> event. Invert the <c>Checked</c> property of all <c>CheckBox</c> controls.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormPlotDefineBitmask.CheckBox_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for each <c>CheckBox</c> control associated with the <c>CheckBoxes</c> property of the <c>ICheckBoxUInt32</c> interface.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="T:Common.Configuration.WatchVariableTable">
            <summary>
            A class to help access the watch variables defined in the <c>WATCHVARIABLES</c> table of the data dictionary. The watch variables are accessed using 
            the watch identifier value.
            </summary>
        </member>
        <member name="T:Common.Configuration.VariableTable`3">
            <summary>
            An abstract generic class to help simplify access to the vehicle control unit (VCU) variables contained within the data dictionary. The type variable T can be of
            types: DataDictionary.WATCHVARIABLESDataTable; DataDictionary.EVENTVARIABLESDataTable; or DataDictionary.SELFTESTVARIABLESDataTable and E can be of types:  
            DataDictionary.WATCHENUMBITDataTable; DataDictionary.EVENTVARIABLESDataTable; DataDictionary.SELFTESTENUMBITDataTable.
            </summary>
            <typeparam name="R">The class/interface defining the fields associated with the records of the data table specified by the type parameter T.</typeparam>>
            <typeparam name="T">The primary key data table of the data dictionary containing the variables.</typeparam>
            <typeparam name="E">The data of the data dictionary containing the enumerator/bitmask records.</typeparam>
        </member>
        <member name="F:Common.Configuration.VariableTable`3.u08">
            <summary>
            The number of bits associated with the data type u08. Value: 8.
            </summary>
        </member>
        <member name="F:Common.Configuration.VariableTable`3.u16">
            <summary>
            The number of bits associated with the data type u16. Value: 16.
            </summary>
        </member>
        <member name="F:Common.Configuration.VariableTable`3.u32">
            <summary>
            The number of bits associated with the data type u32. Value: 32.
            </summary>
        </member>
        <member name="F:Common.Configuration.VariableTable`3.m_EnumBitLists">
            <summary>
            An array containing the lists of enumerator/bitmask records associated with each enumerator/bitmask identifier.
            identifier.
            </summary>
            <remarks>The array index corresponds to the enumerator/bitmask identifier.</remarks>
        </member>
        <member name="F:Common.Configuration.VariableTable`3.m_BitCounts">
            <summary>
            An array containing the number of bits that are used for each bitmask variable. The array index corresponds to the variable identifier.
            </summary>
            <remarks>This is only relevant to bitmask watch variables, for all other watch variable types the bit count will be 0.</remarks>
        </member>
        <member name="M:Common.Configuration.VariableTable`3.#ctor(`1,`2)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Common.Configuration.VariableTable`3.GetFlagStateList(System.Int32,System.UInt32)">
            <summary>
            Get the list of the flag states for the specified bitmask variable corresponding to the specified value. 
            Get the list of flag states associated with the specified bitmask watch variable and value.
            </summary>
            <remarks>The watch variable associated with the specified identifier must be a bitmask watch variable.</remarks>
            <param name="identifier">The appropriate identifier, i.e. the watch identifier or the old identifier depending upon which VariableTable is 
            being accessed, of the bitmask watch variable.</param>
            <param name="value">The value of the bitmask watch variable.</param>
            <returns>A list of the flag states corresponding to the specified bitmask watch variable and value if the variable exists; otherwise, an empty list.</returns>
        </member>
        <member name="M:Common.Configuration.VariableTable`3.GetAssertedFlagList(System.Int32,System.UInt32)">
            <summary>
            Get the list of asserted flag descriptions associated with the specified bitmask watch variable and value.
            </summary>
            <remarks>The watch variable associated with the specified identifier must be a bitmask watch variable.</remarks>
            <param name="identifier">The appropriate identifier, i.e. the watch identifier or the old identifier depending upon which VariableTable is 
            being accessed, of the bitmask watch variable.</param>
            <param name="value">The value of the watch variable.</param>
            <returns>A list of the asserted flag descriptions corresponding to the specified bitmask watch variable and value if the variable exists; 
            otherwise, an empty list.</returns>
        </member>
        <member name="M:Common.Configuration.VariableTable`3.GetBitCount(System.Int32)">
            <summary>
            Get the number of flags/bits associated with the specified bitmask variable.
            </summary>
            <remarks>The watch variable associated with the specified identifier must be a bitmask watch variable.</remarks>
            <param name="identifier">The appropriate identifier, i.e. the watch identifier or the old identifier depending upon which VariableTable is 
            being accessed, of the bitmask watch variable.</param>
            <returns>The number of flags/bits associated with the specified bitmask watch variable if the variable exists; otherwise, zero.</returns>
        </member>
        <member name="M:Common.Configuration.VariableTable`3.GetFlagDescription(System.Int32,System.Byte)">
            <summary>
            Get the flag description associated with the specified bitmask watch variable and bit reference.
            </summary>
            <remarks>The watch variable associated with the specified identifier must be a bitmask watch variable.</remarks>
            <param name="identifier">The appropriate identifier, i.e. the watch identifier or the old identifier depending upon which VariableTable is 
            being accessed, of the bitmask watch variable.</param>
            <param name="bit">The bit reference for the flag.</param>
            <returns>The flag description associated with the specified bit of the specified bitmask watch variable if the variable exists; otherwise, an empty 
            string.</returns>
        </member>
        <member name="M:Common.Configuration.VariableTable`3.GetEnumeratorText(System.Int32,System.UInt32)">
            <summary>
            Get the enumerator text associated with the specified enumerator watch variable and value.
            </summary>
            <remarks>The watch variable associated with the specified identifier must be an enumerator watch variable.</remarks>
            <param name="identifier">The appropriate identifier, i.e. the watch identifier or the old identifier depending upon which VariableTable is 
            being accessed, of the enumerator watch variable.</param>
            <param name="value">The value of the enumerator watch variable.</param>
            <returns>The text associated with the specified enumerator watch variable and value if the variable exists; otherwise, an empty string.</returns>
        </member>
        <member name="M:Common.Configuration.VariableTable`3.BuildBitCountTable(System.Collections.Generic.List{`0},System.Collections.Generic.List{Common.Configuration.IEnumBit}[])">
            <summary>
            Build an array of bit count values. This is used to determine the number of bits that are used by each bitmask watch variable.
            </summary>
            <remarks></remarks>
            <param name="variableList">The list of watch variable data.</param>
            <param name="enumBitLists">An array of enumerator/bitmask lists.</param>
            <returns>The bit count values corresponding to each variable identifier.</returns>
        </member>
        <member name="M:Common.Configuration.VariableTable`3.BuildDataTable(`1)">
            <summary>
            Build an array of watch variable records. This used to access the variable information associated with each watch identifier. The logic is performed 
            in the child class.
            </summary>
            <param name="variableDataTable">The variable data table of the data dictionary.</param>
            <returns>An array of the records contained within the variable data table if the table is valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.VariableTable`3.BuildEnumBitLists(`2)">
            <summary>
            Build an array of enumerator/bitmask record lists. This is used to access the enumerator bitmask records associated with each <c>ENUMBITID</c> 
            value. The logic is performed in the child class.
            </summary>
            <param name="enumBitDataTable">Reference to the enumerator/bitmask table of the data dictionary.</param>
            <returns>The array containing the lists of enumerator/bitmask records, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="P:Common.Configuration.VariableTable`3.EnumBitLists">
            <summary>
            Get the array of the lists of enumerator/bitmask records sorted by <c>ENUMBITID</c> value.
            </summary>
        </member>
        <member name="M:Common.Configuration.WatchVariableTable.#ctor(Common.Configuration.DataDictionary.WATCHVARIABLESDataTable,Common.Configuration.DataDictionary.WATCHENUMBITDataTable)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="watchVariableDataTable">Reference to the <c>WATCHVARIABLES</c> table of the data dictionary.</param>
            <param name="enumBitDataTable">Reference to the <c>WATCHENUMBIT</c> table of the data dictionary i.e. the enumerator/bitmask data table associated with 
            watch variables.</param>
        </member>
        <member name="M:Common.Configuration.WatchVariableTable.BuildDataTable(Common.Configuration.DataDictionary.WATCHVARIABLESDataTable)">
            <summary>
            Build an array of the watch variable records contained within the <c>WATCHVARIABLES</c> table of the data dictionary. This array is used to access the 
            parameters associated with the watch variables defined in the table. The array element is mapped to the watch identifier field of the table.
            </summary>
            <param name="variableDataTable">Reference to the <c>WATCHVARIABLES</c> table of the data dictionary.</param>
            <returns>An array of the records contained within the <c>WATCHVARIABLES</c> table of the data dictionary, if the specified table is valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.WatchVariableTable.BuildEnumBitLists(Common.Configuration.DataDictionary.WATCHENUMBITDataTable)">
            <summary>
            Build an array of lists of enumerator/bitmask records associated with each unique <c>ENUMBITID</c> value defined in the <c>WATCHENUMBIT</c> table of 
            the data dictionary. The array element is mapped to the <c>ENUMBITID</c> field of the table.
            </summary>
            <param name="enumBitDataTable">Reference to the <c>WATCHENUMBIT</c> table of the data dictionary.</param>
            <returns>An array of lists of enumerator/bitmask records associated with each unique <c>ENUMBITID</c> value of the <c>WATCHENUMBIT</c> table of the 
            data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="T:Common.Configuration.WatchVariable">
            <summary>
            A class to store the fields associated with a watch variable.
            </summary>
        </member>
        <member name="F:Common.Configuration.WatchVariable.m_EmbeddedName">
            <summary>
            The variable name used by the embedded software.
            </summary>
        </member>
        <member name="F:Common.Configuration.WatchVariable.m_OldIdentifier">
            <summary>
            The old watch variable identifier.
            </summary>
        </member>
        <member name="F:Common.Configuration.WatchVariable.m_AttributeFlags">
            <summary>
            The attribute flags associated with the watch variable: PTUD_BBRAM; PTUD_DESC1; PTUD_DESC2; PTUD_DESC3; PTUD_PSSWD1; PTUD_PSSWD2; PTUD_READONLY.
            </summary>
        </member>
        <member name="F:Common.Configuration.WatchVariable.m_MaxChartScale">
            <summary>
            The maximum engineering value that is to be displayed on the chart recorder.
            </summary>
        </member>
        <member name="F:Common.Configuration.WatchVariable.m_MinChartScale">
            <summary>
            The minimum engineering value that is to be displayed on the chart recorder.
            </summary>
        </member>
        <member name="F:Common.Configuration.WatchVariable.m_MaxModifyValue">
            <summary>
            The maximum value that the user can set the watch variable to.
            </summary>
        </member>
        <member name="F:Common.Configuration.WatchVariable.m_MinModifyValue">
            <summary>
            The minimum value that the user can set the watch variable to.
            </summary>
        </member>
        <member name="P:Common.Configuration.WatchVariable.EmbeddedName">
            <summary>
            Gets or sets the variable name used by the embedded software.
            </summary>
        </member>
        <member name="P:Common.Configuration.WatchVariable.OldIdentifier">
            <summary>
            Gets or sets the old watch variable identifier.
            </summary>
        </member>
        <member name="P:Common.Configuration.WatchVariable.AttributeFlags">
            <summary>
            Gets or sets the attribute flags associated with the watch variable: PTUD_BBRAM; PTUD_DESC1; PTUD_DESC2; PTUD_DESC3; PTUD_PSSWD1; PTUD_PSSWD2; PTUD_READONLY.
            </summary>
        </member>
        <member name="P:Common.Configuration.WatchVariable.MaxChartScale">
            <summary>
            Gets or sets the maximum engineering value that is to be displayed on the chart recorder.
            </summary>
        </member>
        <member name="P:Common.Configuration.WatchVariable.MinChartScale">
            <summary>
            Gets or sets the minimum engineering value that is to be displayed on the chart recorder.
            </summary>
        </member>
        <member name="P:Common.Configuration.WatchVariable.MaxModifyValue">
            <summary>
            Gets or sets the maximum value that the user can set the watch variable to.
            </summary>
        </member>
        <member name="P:Common.Configuration.WatchVariable.MinModifyValue">
            <summary>
            Gets or sets the minimum value that the user can set the watch variable to.
            </summary>
        </member>
        <member name="T:Common.Configuration.SelfTestTableBySelfTestNumber">
            <summary>
            A class to help access the self tests defined in the <c>SELFTEST</c> table of the data dictionary. The self tests are accessed using the self test 
            number value.
            </summary>
        </member>
        <member name="T:Common.Configuration.SelfTestTable">
            <summary>
            A class to help access the self tests defined in the <c>SELFTEST</c> table of the data dictionary. The self tests are accessed using the self test 
            identifier value.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestTable.m_SelfTestIdentifierLists">
            <summary>
            An array containing the lists of those records from the <c>SELFTESTIDS</c> table associated with each self test identifier. The array index 
            corresponds to the self test identifier e.g. m_SelfTestIdentifiersLists[22] would return a list of those records that had a value of 22 for the 
            <c>SELFTESTID</c> field.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestTable.m_SelfTestDataTable">
            <summary>
            Reference to the <c>SELFTEST</c>table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestTable.m_TestMessageLists">
            <summary>
            An array containing the lists of records from the <c>TESTMESSAGES</c> table of the data dictionary associated with each test number.
            </summary>
        </member>
        <member name="M:Common.Configuration.SelfTestTable.#ctor(Common.Configuration.DataDictionary.SELFTESTDataTable,Common.Configuration.DataDictionary.SELFTESTIDSDataTable,Common.Configuration.DataDictionary.TESTMESSAGESDataTable)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="dataTable">>Reference to the <c>SELFTEST</c> table of the data dictionary. This table contains the self test definitions.</param>
            <param name="selfTestIdentifiersDataTable">Reference to the <c>SELFTESTIDS</c> table of the data dictionary. This table defines which self test 
            variables are associated with each self test.</param>
            <param name="testMessagesDataTable">Reference to the <c>TESTMESSAGES</c> table of the data dictionary. This table defines the help index of the 
            test messages associated with the test case value for each test number.</param>
        </member>
        <member name="M:Common.Configuration.SelfTestTable.CreateSelfTestVariableList(System.Int16)">
            <summary>
            Create a new list to store the self test variable values associated with a self test.
            </summary>
            <param name="identifier">The self test identifier associated with the test.</param>
            <returns>A new list of self test variables specific to a test with the specified self test identifier.</returns>
        </member>
        <member name="M:Common.Configuration.SelfTestTable.BuildDataTable(Common.Configuration.DataDictionary.SELFTESTDataTable)">
            <summary>
            Build an array of the records contained within the <c>SELFTEST</c> table of the data dictionary. This array is used to access the 
            parameters associated with the self tests defined in the table. The array element is mapped to the self test identifier field of the table. 
            </summary>
            <param name="dataTable">Reference to the <c>SELFTEST</c> table of the data dictionary.</param>
            <returns>An array of the records contained within the <c>SELFTEST</c> table of the data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.SelfTestTable.AddSelfTestVariableLists">
            <summary>
            Add the self test variables associated with each self test to the <c>SelfTestVariableList</c> property.
            </summary>
            <remarks>
            Externals
            <list type="table">
            <listheader><term>Member Variable/Property</term><description>Description</description></listheader>
            <item><term>Items</term><description>Gets an indexed array of the records contained in the <c>DataDictionary.SELFTESTDataTable</c> table.</description></item>
            <item><term>m_SelfTestIdentifierLists</term><description>An array containing the lists of those records from the <c>SELFTESTIDS</c> data table associated with
            each self test identifier. The array index corresponds to the self test identifier e.g. m_SelfTestIdentifierList[22] would return a list of those records 
            that had a value of 22 for <c>SELFTESTID</c> field.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Common.Configuration.SelfTestTable.BuildSelfTestIdentifierLists(Common.Configuration.DataDictionary.SELFTESTIDSDataTable)">
            <summary>
            Build an array of the list of <c>SelfTestIdentifier_t</c> records associated with each unique <c>SELFTESTID</c> value defined in the <c>SELFTESTIDS</c> 
            table of the data dictionary. The array element is mapped to the <c>SELFTESTID</c> field of the table.
            </summary>
            <param name="selfTestIdentifiersDataTable">Reference to the <c>SELFTESTIDS</c> data table of the data dictionary.</param>
            <returns>An array of lists of <c>SelfTestIdentifier_t</c> records associated with each unique <c>SELFTESTID</c> value in the <c>SELFTESTIDS</c> table of the 
            data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.SelfTestTable.BuildTestMessageLists(Common.Configuration.DataDictionary.TESTMESSAGESDataTable)">
            <summary>
            Build an array containing the list of records from the <c>TESTMESSAGES</c> table of the data dictionary for each unique test number. The array element 
            is mapped to the <c>TESTID</c> field of the table. Note: Although the field is called <c>TESTID</c> in the data dictionary, the values correspond to 
            the test number rather than test identifier.
            </summary>
            <param name="testMessagedDataTable">Reference to the <c>TESTMESSAGES</c> table of the data dictionary.</param>
            <returns>An array containing the list of records from the <c>TESTMESSAGES</c> table of the data dictionary for each unique test number, if the parameters 
            are valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.SelfTestTable.GetTestMessageHelpIndex(System.Int16,System.Int16)">
            <summary>
            Get the help index associated with the test message for the specified test number/test case combination.
            </summary>
            <param name="testNumber">The test number.</param>
            <param name="testCase">The test case.</param>
            <returns>The help index associated with the specified test number/test case combination.</returns>
        </member>
        <member name="M:Common.Configuration.SelfTestTableBySelfTestNumber.#ctor(Common.Configuration.DataDictionary.SELFTESTDataTable,Common.Configuration.DataDictionary.SELFTESTIDSDataTable,Common.Configuration.DataDictionary.TESTMESSAGESDataTable)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="dataTable">>Reference to the <c>SELFTEST</c> table of the data dictionary. This table contains the self test definitions.</param>
            <param name="selfTestIdentifiersDataTable">Reference to the <c>SELFTESTIDS</c> table of the data dictionary. This table defines which self test 
            variables are associated with each self test.</param>
            <param name="testMessagesDataTable">Reference to the <c>TESTMESSAGES</c> table of the data dictionary. This table defines the help index of the 
            test messages associated with the test case value for each test number.</param>
        </member>
        <member name="M:Common.Configuration.SelfTestTableBySelfTestNumber.CreateSelfTestVariableList(System.Int16)">
            <summary>
            Create a new list to store the self test variable values associated with a self test.
            </summary>
            <param name="testNumber">The test number associated with the test.</param>
            <returns>A new list of self test variables specific to a test with the specified self test number.</returns>
        </member>
        <member name="M:Common.Configuration.SelfTestTableBySelfTestNumber.BuildDataTable(Common.Configuration.DataDictionary.SELFTESTDataTable)">
            <summary>
            Build an array of the records contained within the <c>SELFTEST</c> table of the data dictionary. This array is used to access the 
            parameters associated with the self tests defined in the table. The array element is mapped to the self test number field of the table. 
            </summary>
            <param name="dataTable">Reference to the <c>SELFTEST</c> table of the data dictionary.</param>
            <returns>An array of the records contained within the <c>SELFTEST</c> table of the data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.SelfTestTableBySelfTestNumber.AddSelfTestVariableLists">
            <summary>
            Add the self test variables associated with each self test to the <c>SelfTestVariableList</c> property.
            </summary>
            <remarks>
            Externals
            <list type="table">
            <listheader><term>Member Variable/Property</term><description>Description</description></listheader>
            <item><term>Items</term><description>Gets an indexed array of the records contained in the <c>DataDictionary.SELFTESTDataTable</c> table.</description></item>
            <item><term>m_SelfTestIdentifierLists</term><description>An array containing the lists of those records from the <c>SELFTESTIDS</c> data table associated with
            each self test identifier. The array index corresponds to the self test identifier e.g. m_SelfTestIdentifierList[22] would return a list of those records 
            that had a value of 22 for <c>SELFTESTID</c> field.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Common.Configuration.SelfTestTableBySelfTestNumber.BuildSelfTestIdentifierLists(Common.Configuration.DataDictionary.SELFTESTIDSDataTable)">
            <summary>
            Build the array that is used to access the list of <c>SelfTestIdentifier</c> records associated with a specified self test identifier.
            Build an array of lists of <c>SelfTestIdentifier_t</c> records associated with each unique <c>SELFTESTID</c> value defined in the <c>SELFTESTIDS</c> 
            table of the data dictionary. The array element is mapped to the <c>SELFTESTNUMBER</c> field of the table.
            </summary>
            <param name="selfTestIdentifiersDataTable">Reference to the <c>SELFTESTIDS</c> data table of the data dictionary.</param>
            <returns>An array of lists of <c>SelfTestIdentifier_t</c> records associated with each unique <c>SELFTESTID</c> value in the <c>SELFTESTIDS</c> table of the 
            data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="T:Common.Communication.AutoScale_t">
            <summary>
            Structure containing the fields required to auto-scale the plot of an individual watch element.
            </summary>
        </member>
        <member name="F:Common.Communication.AutoScale_t.MarginAsPercentOfRange">
            <summary>
            The percentage of the range between the upper and lower engineering values to allow for the upper and lower display limits.
            </summary>
        </member>
        <member name="F:Common.Communication.AutoScale_t.m_WatchVariable">
            <summary>
            The watch variable associated with this auto-scale information, this is derived using the old identifier value.
            </summary>
        </member>
        <member name="F:Common.Communication.AutoScale_t.m_WatchIdentifier">
            <summary>
            The watch identifier associated with this auto-scale information.
            </summary>
        </member>
        <member name="F:Common.Communication.AutoScale_t.m_OldIdentifier">
            <summary>
            The old identifier associated with this auto-scale information.
            </summary>
        </member>
        <member name="F:Common.Communication.AutoScale_t.m_WatchElementIndex">
            <summary>
            The watch element index associated with this auto-scale information.
            </summary>
        </member>
        <member name="F:Common.Communication.AutoScale_t.m_MaximumRaw">
            <summary>
            The maximum raw value of the watch element over the duration of the log.
            </summary>
        </member>
        <member name="F:Common.Communication.AutoScale_t.m_MinimumRaw">
            <summary>
            The minimum raw value of the watch element over the duration of the log.
            </summary>
        </member>
        <member name="F:Common.Communication.AutoScale_t.m_ScaleFactor">
            <summary>
            The scale factor associated with the watch identifier.
            </summary>
        </member>
        <member name="F:Common.Communication.AutoScale_t.m_MarginUpper">
            <summary>
            The upper margin, in engineering units, between the maximum value of the plot and the upper display limit.
            </summary>
        </member>
        <member name="F:Common.Communication.AutoScale_t.m_MarginLower">
            <summary>
            The lower margin, in engineering units, between the minimum value of the plot and the lower display limit.
            </summary>
        </member>
        <member name="M:Common.Communication.AutoScale_t.UpdateMargins">
            <summary>
            Update the margins between the maximum plot value and the upper display limit and the minimum plot values and the lower display limit.
            </summary>
        </member>
        <member name="P:Common.Communication.AutoScale_t.MaximumRaw">
            <summary>
            Gets or sets the maximum raw value of the watch element.
            </summary>
        </member>
        <member name="P:Common.Communication.AutoScale_t.MinimumRaw">
            <summary>
            Gets or sets the minimum raw value of the watch element.
            </summary>
        </member>
        <member name="P:Common.Communication.AutoScale_t.UpperDisplayLimitEng">
            <summary>
            Gets the upper display limit of the plot in engineering units.
            </summary>
        </member>
        <member name="P:Common.Communication.AutoScale_t.LowerDisplayLimitEng">
            <summary>
            Gets the lower display limit of the plot in engineering units.
            </summary>
        </member>
        <member name="P:Common.Communication.AutoScale_t.RangeRaw">
            <summary>
            Gets the difference between the maximum and minimum raw values. 
            </summary>
        </member>
        <member name="P:Common.Communication.AutoScale_t.RangeEng">
            <summary>
            Gets the difference, in engineering units, between the upper and lower display limits.
            </summary>
        </member>
        <member name="P:Common.Communication.AutoScale_t.ScaleFactor">
            <summary>
            Gets or sets the scaling factor of the watch element.
            </summary>
        </member>
        <member name="P:Common.Communication.AutoScale_t.WatchIdentifier">
            <summary>
            Gets or sets the watch identifier associated with this auto-scale information.
            </summary>
        </member>
        <member name="P:Common.Communication.AutoScale_t.OldIdentifier">
            <summary>
            Gets or sets the old identifier associated with this auto-scale information.
            </summary>
        </member>
        <member name="P:Common.Communication.AutoScale_t.WatchElementIndex">
            <summary>
            Gets or sets the watch element index associated with this auto-scale information.
            </summary>
        </member>
        <member name="P:Common.Communication.AutoScale_t.WatchVariable">
            <summary>
            Gets the watch variable associated with this auto-sale information.
            </summary>
        </member>
        <member name="T:Common.Configuration.VariableType">
            <summary>
            The type of watch variable i.e. scalar; bitmask or enumerator.
            </summary>
        </member>
        <member name="F:Common.Configuration.VariableType.Scalar">
            <summary>
            Scalar watch variable.
            </summary>
        </member>
        <member name="F:Common.Configuration.VariableType.Enumerator">
            <summary>
            Enumerator watch variable.
            </summary>
        </member>
        <member name="F:Common.Configuration.VariableType.Bitmask">
            <summary>
            Bitmask watch variable.
            </summary>
        </member>
        <member name="F:Common.Configuration.VariableType.Undefined">
            <summary>
            Undefined watch variable i.e any of the above.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataType_e">
            <summary>
            The data types that are supported e.g. : unsigned 8 bit; unsigned 16 bit; signed 16 bit etc.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataType_e.u08">
            <summary>
            Unsigned 8 bit value - byte.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataType_e.u16">
            <summary>
            Unsigned 16 bit value - ushort. 
            </summary>
        </member>
        <member name="F:Common.Configuration.DataType_e.u32">
            <summary>
            Unsigned 32 bit value - uint.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataType_e.i08">
            <summary>
            Signed 8 bit value.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataType_e.i16">
            <summary>
            Signed 16 bit value - short.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataType_e.i32">
            <summary>
            Signed 32 bit value - int.
            </summary>
        </member>
        <member name="T:Common.Configuration.FlagState_t">
            <summary>
            Structure defining the current state of a bitmask flag.
            </summary>
        </member>
        <member name="F:Common.Configuration.FlagState_t.Bit">
            <summary>
            The bit index associated with the flag.
            </summary>
        </member>
        <member name="F:Common.Configuration.FlagState_t.State">
            <summary>
            The state i.e. true or false of the flag.
            </summary>
        </member>
        <member name="F:Common.Configuration.FlagState_t.Description">
            <summary>
            The description associated with the flag.
            </summary>
        </member>
        <member name="T:Common.Configuration.WatchVariableTableByOldIdentifier">
            <summary>
            A class to help access the watch variables defined in the <c>WATCHVARIABLES</c> table of the data dictionary. The watch variables are accessed using 
            the old identifier value.
            </summary>
        </member>
        <member name="M:Common.Configuration.WatchVariableTableByOldIdentifier.#ctor(Common.Configuration.DataDictionary.WATCHVARIABLESDataTable,Common.Configuration.DataDictionary.WATCHENUMBITDataTable)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="watchVariableDataTable">Reference to the <c>WATCHVARIABLES</c> table of the data dictionary.</param>
            <param name="enumBitDataTable">Reference to the <c>WATCHENUMBIT</c> table of the data dictionary i.e. the enumerator/bitmask data table associated with 
            watch variables.</param>
        </member>
        <member name="M:Common.Configuration.WatchVariableTableByOldIdentifier.BuildDataTable(Common.Configuration.DataDictionary.WATCHVARIABLESDataTable)">
            <summary>
            Build an array of the watch variable records contained within the <c>WATCHVARIABLES</c> table of the data dictionary. This array is used to access the 
            parameters associated with the watch variables defined in the table. The array element is mapped to the old identifier field of the table.
            </summary>
            <param name="variableDataTable">Reference to the <c>WATCHVARIABLES</c> table of the data dictionary.</param>
            <returns>>An array of the records contained within the <c>WATCHVARIABLES</c> table of the data dictionary, if the specified table is valid; otherwise, null.</returns>
        </member>
        <member name="T:Common.Configuration.Struct_t">
            <summary>
            A structure to store the fields associated with an entry from the <c>STRUCT</c> table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.Struct_t.m_StructureIdentifier">
            <summary>
            The structure identifier associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.Struct_t.m_EventVariableIdentifier">
            <summary>
            The event variable identifier associated with the record.
            </summary>
        </member>
        <member name="M:Common.Configuration.Struct_t.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="structureIdentifier">The structure identifier associated with the record.</param>
            <param name="eventVariableIdentifier">The event variable identifier associated with the record.</param>
        </member>
        <member name="P:Common.Configuration.Struct_t.StructureIdentifier">
            <summary>
            Gets or sets the structure identifier associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.Struct_t.EventVariableIdentifier">
            <summary>
            Gets or sets the event variable identifier associated with the record.
            </summary>
        </member>
        <member name="T:Common.MenuInterface">
            <summary>
            Base class for the menu interface.
            </summary>
        </member>
        <member name="F:Common.MenuInterface.FirmCodeR8PR">
            <summary>
            The WibuKey Firm code associated with the NYCT - R188 Propulsion Car Control Unit project. Value: 3651. 
            </summary>
        </member>
        <member name="F:Common.MenuInterface.UserCodeR8PR">
            <summary>
            The WibuKey User code associated with the NYCT - R188 Propulsion Car Control Unit project. Value: 11513069. 
            </summary>
        </member>
        <member name="F:Common.MenuInterface.SlotIdentifierR8PR">
            <summary>
            The WibuKey Slot Identifier associated with the NYCT - R188 Propulsion Car Control Unit project. Value: 4. 
            </summary>
        </member>
        <member name="F:Common.MenuInterface.m_WatchFile">
            <summary>
            The watch file that has been de-serialized from disk.
            </summary>
        </member>
        <member name="F:Common.MenuInterface.m_MainWindow">
            <summary>
            Reference to the main application window interface.
            </summary>
        </member>
        <member name="F:Common.MenuInterface.m_WibuBoxIsInitialized">
            <summary>
            A flag to indicate whether the WibuBox security device has been initialized. True, if the WibuBox device has been initialized; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.MenuInterface.m_WibuBoxIsDevelopment">
            <summary>
            A flag to indicate that the WibuBox that was found is a development WibuBox dongle, not the client WibuBox. 
            True, if the current WibuBox is a development WibuBox; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.MenuInterface.m_FirmCode">
            <summary>
            The WibuKey Firm Code associated with the current project.
            </summary>
        </member>
        <member name="F:Common.MenuInterface.m_UserCode">
            <summary>
            The WibuKey User Code associated with the current project.
            </summary>
        </member>
        <member name="F:Common.MenuInterface.m_SlotId">
            <summary>
            The WibuKey Slot Identifier associated with the current project.
            </summary>
        </member>
        <member name="M:Common.MenuInterface.#ctor(Common.IMainWindow)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="mainWindow">Reference to the main application window interface.</param>
        </member>
        <member name="M:Common.MenuInterface.ShowDataStreamFile(System.String,System.String,System.String,System.String)">
            <summary>
            Ask the user to select a data-stream file, de-serialized this to the appropriate object type and then display the data using the appropriate  
            <c>FormDataStreamPlot</c> derived class.
            </summary>
            <param name="title">The title that is to appear on the <c>OpenFileDialog</c> form.</param>
            <param name="defaultExtension">The default extension associated with the type of log.</param>
            <param name="filterText">The filter text. Used to filter the list of available files.</param>
            <param name="initialDirectory">The initial directory that will be show.</param>
            <returns>A flag to indicate whether a valid watch file was selected. True, indicates that the selected file was valid; otherwise, false.</returns>
        </member>
        <member name="M:Common.MenuInterface.PauseCommunication``1(``0,System.Boolean)">
            <summary>
            Suspend or resume polling of the vehicle control unit by the multiple document interface child form that is currently being displayed.
            </summary>
            <remarks>
            This method will only suspend or resume polling if the dialog box is called from the main application window. If called from another dialog box, it is assumed 
            that the calling dialog box will have taken care of suspending/resuming the polling.
            </remarks>
            <typeparam name="T">The communication interface type.</typeparam>
            <param name="communicationInterface">Reference to the communication interface.</param>
            <param name="pause">A flag to control whether polling of the VCU by the multiple document interface child form is to be resumed or suspended. True, 
            suspends polling of the VCU; false, resumes polling of the VCU.</param>
        </member>
        <member name="M:Common.MenuInterface.WibuBoxCheckIfRequired(System.String)">
            <summary>
            Check whether the specified project requires a WibuBox device.
            </summary>
            <param name="projectIdentifier">The current project identifier.</param>
            <returns>A flag to indicate whether the specified project requires a WibuBox security device. True, if the project requires a WibuBox device; otherwise,
            false.</returns>
        </member>
        <member name="P:Common.MenuInterface.MainWindow">
            <summary>
            Gets the reference to the main application window.
            </summary>
        </member>
        <member name="T:Common.Mode">
            <summary>
            Defines the mode of operation of the PTU application: setup, configuration, online or offline.
            </summary>
        </member>
        <member name="F:Common.Mode.Setup">
            <summary>
            Setup. One or more of the configuration files were not installed during the installation process and the PTU is waiting for these files to be installed 
            before proceeding.
            </summary>
        </member>
        <member name="F:Common.Mode.Online">
            <summary>
            Online. The PTU is connected to the VCU and all menu options, appropriate to the current security level, are available.
            </summary>
        </member>
        <member name="F:Common.Mode.Configuration">
            <summary>
            Configuration. The PTU is not currently connected to the VCU and only those menu options associated with setting up the project worksets and analyzing data 
            collected from site are available.
            </summary>
        </member>
        <member name="F:Common.Mode.SelfTest">
            <summary>
            Self Test. The VCU and PTU are in self test mode.
            </summary>
        </member>
        <member name="F:Common.Mode.Offline">
            <summary>
            Offline. The PTU is not currently connected to the VCU; all screens that are available in Online mode are available but display dummy values instead of 
            live data. This mode allows the user to gain familiarity with the menu options of the PTU and to look at the layout of the worksets that have been created 
            in diagnostic mode without being connected to the VCU.
            </summary>
        </member>
        <member name="T:Common.EventLogSavedStatus">
            <summary>
            The saved status of an event log.
            </summary>
        </member>
        <member name="F:Common.EventLogSavedStatus.Undefined">
            <summary>
            Undefined. Value: 0
            </summary>
        </member>
        <member name="F:Common.EventLogSavedStatus.Saved">
            <summary>
            The last downloaded maintenance log associated with the current car has been saved to disk. Value: 1.
            </summary>
        </member>
        <member name="F:Common.EventLogSavedStatus.Unsaved">
            <summary>
            The last downloaded maintenance log associated with the current car has not yet been saved to disk. Value: 2.
            </summary>
        </member>
        <member name="F:Common.EventLogSavedStatus.Unknown">
            <summary>
            The log status associated with the current car is not known. Value: 3.
            </summary>
        </member>
        <member name="F:Common.EventLogSavedStatus.NotApplicable">
            <summary>
            The log status is not applicable until the unit is connected to a car. Value: 4.
            </summary>
        </member>
        <member name="T:Common.IMainWindow">
            <summary>
            Defines the interface to the main application window of the PTU application.
            </summary>
        </member>
        <member name="M:Common.IMainWindow.CloseChildForms">
            <summary>
            Close any child form that may be open. For this to work the child form must inherit from <c>FormPTU</c>.
            </summary>
            <remarks>The child forms are closed cleanly by simulating the user having pressed the escape key associated with the form.</remarks>
        </member>
        <member name="M:Common.IMainWindow.WriteCarIdentifier(System.String)">
            <summary>
             Write the specified car identifier in the status label used to display the car identifier.
            </summary>
            <param name="carIdentifier">The car identifier.</param>
        </member>
        <member name="M:Common.IMainWindow.BlinkUpdateIcon">
            <summary>
            Show that data from the target hardware has been updated by blinking the data update icon on the screen.
            </summary>
        </member>
        <member name="M:Common.IMainWindow.ShowSecurityLevelChange(Common.Security)">
            <summary>
            Show that the security clearance has been updated by modifying the: (a) Login/Logout text associated with the menu and button; (b) status line text 
            and (c) menu options to reflect the new clearance level.
            </summary>
            <param name="security">Reference to the security class for which the security clearance level is to be displayed.</param>
        </member>
        <member name="M:Common.IMainWindow.WriteStatusMessage(System.String)">
            <summary>
            Write the specified message to the status message control using the default <c>BackColor</c> and <c>ForeColor</c> properties.
            </summary>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Common.IMainWindow.WriteStatusMessage(System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Write the specified message to the status message control using the specified <c>BackColor</c> and <c>ForeColor</c> properties.
            </summary>
            <param name="message">The message text.</param>
            <param name="backColor">The <c>BackColor</c> of the message.</param>
            <param name="foreColor">The <c>ForeColor</c> of the message.</param>
        </member>
        <member name="M:Common.IMainWindow.ShowMdiChild(Common.Forms.FormPTU)">
            <summary>
             Show the specified child form.
            </summary>
            <param name="childForm">The child form that is to be displayed.</param>
        </member>
        <member name="M:Common.IMainWindow.ShowDialog(Common.Forms.FormPTUDialog)">
            <summary>
             Show the specified dialog form.
            </summary>
            <param name="dialogForm">The child form that is to be displayed.</param>
        </member>
        <member name="M:Common.IMainWindow.LoadDictionary(Common.Configuration.DataDictionary)">
            <summary>
            Configures the PTU appplication using the specified data dictionary. (1) Updates the <c>Parameter</c> class; (2) Updates the <c>WatchVariableTable</c> class; 
            (3) Creates the application data sub-directories, if they do not exist; (4) Updates the main menu options to reflect the current project; (5) Loads the
            default workset associated with the specified data dictionary, if it exists; (6) Updates the form title and (7) Updates the file header information.
            </summary>
            <param name="dataDictionary">The data dictionary that is to be used to configure the PTU.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="dataDictionary"/> is null.</exception>
        </member>
        <member name="M:Common.IMainWindow.SetMode(Common.Mode)">
            <summary>
            Set the current mode of operation. This will set the on-line/off-line buttons; status line text and menu options to reflect the specified mode.
            </summary>
            <param name="mode">The new mode of operation.</param>
        </member>
        <member name="M:Common.IMainWindow.SetRestart(System.Boolean)">
            <summary>
            Sets the static flag that controls whether the PTU does an automatic restart when the main PTU application is closed. True, if the PTU is to do
            an automatic restart; otherwise, false.
            </summary>
        </member>
        <member name="M:Common.IMainWindow.LoadWorksetCollection(Common.Configuration.WorksetCollection,System.String)">
            <summary> 
            Load the specified workset collection file from disk and then set the active workset to be the default workset. If the workset collection 
            file does not exist or is corrupt, then an empty workset collection file is created.
            </summary>
            <remarks>
            The workset collection filename is derived as follows - '{project-identifier}.{workset collection type}.{extension}' e.g. 'R8PR.Chart.work'. It is assumed
            that this file is located in the 'DirectoryManager.PathwWorksetFiles' directory.
            </remarks>
            <param name="worksetCollection">The workset collection that is to be loaded from disk.</param>
            <param name="projectIdentifier">The project identifier used to generate the workset filename.</param>
        </member>
        <member name="M:Common.IMainWindow.Update">
            <summary>
            Causes the control to redraw the invalidated regions within its client area.
            </summary>
        </member>
        <member name="M:Common.IMainWindow.Close">
            <summary>
            Closes the form.
            </summary>
        </member>
        <member name="E:Common.IMainWindow.FontChanged">
            <summary>
            Raised if the Font property is changed.
            </summary>
        </member>
        <member name="E:Common.IMainWindow.MenuUpdated">
            <summary>
            Raised when the menu is updated to reflect a new mode or security level.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.MenuStrip">
            <summary>
            Gets the reference to the main menu strip.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.StatusStrip">
            <summary>
            Gets the reference to the main status strip.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.ToolStripFunctionKeys">
            <summary>
            Gets or sets the reference to the <c>ToolStrip</c> user control containing the function key buttons.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.Font">
            <summary>
            Gets or sets the font of the text displayed by the control.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.Mode">
            <summary>
            Gets the mode of operation of the PTU application: setup; online, offline or self-test.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.CommunicationInterface">
            <summary>
            Gets or sets the communication interface that is to be used to communicate with the target.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.Cursor">
            <summary>
            Gets or sets the cursor associated with the main window.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.DisplayRectangle">
            <summary>
            Gets the rectangle that represents the virtual display area of the control.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.ToolStripItemCollectionMainWindow">
            <summary>
            Gets the collection of function keys associated with the form. This allows any child form that is called indirectly to restore the function keys 
            on exit.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.MdiChildren">
            <summary>
            Gets an array of forms that represent the multiple-document interface (MDI) child forms that are parented by this form.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.ShowBusyAnimation">
            <summary>
            Gets or sets the flag that controls whether the animation showing that the PTU is busy processing data is visible or not. True, to show the animation; 
            otherwise, false.
            </summary>{}
        </member>
        <member name="P:Common.IMainWindow.KeyPreview">
            <summary>
            Determines whether keyboard events for controls on the form are registered or not.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.FilenameDataDictionary">
            <summary>
            Gets the filename of the XML data dictionary file.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.LogStatus">
            <summary>
            Gets or sets the saved status of the event logs. Saved status options are: Saved, Unsaved, Unknown, Not Applicable (-), Undefined.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.WibuBoxPresent">
            <summary>
            Gets or sets the Flag that indicates whether a WibuBox security device is present or not. True, if a WibuBox security device is present; otherwise, false.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.CarNumber">
            <summary>
            Gets the current car number if the PTU is connected to the target logic. If not connected to the car logic, the vale is set int.MinVal.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.ProjectIdentifierPassedAsParameter">
            <summary>
            Gets the project identifier that was passed to the application as a shortcut parameter. If no shortcut parameter was passed to the
            application then the value is set to string.Empty.
            </summary>
        </member>
        <member name="P:Common.IMainWindow.DisplayQueryExit">
            <summary>
            Get or set the flag that controls whether the user is asked to confirm that they wish to close the application. True, to ask the user to confirm that they
            wish to close the application; otherwise, false, to close regardless.
            </summary>
        </member>
        <member name="T:Common.PlotterControlLayout">
            <summary>
            A class to support configuration, drawing and layout of multiple <c>PlotterControl</c> derived user controls.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.OffsetSizeScalar">
            <summary>
            Offset into the parameter object array corresponding to the Size parameter of the Scalar user control. Value: 0.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.OffsetSizeEnumerator">
            <summary>
            Offset into the parameter object array corresponding to the Size parameter of the Enumerator user control. Value: 1.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.OffsetSizeBitmask">
            <summary>
            Offset into the parameter object array corresponding to the Size parameter of the Bitmask user control. Value: 2.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.OffsetFont">
            <summary>
            Offset into the parameter object array corresponding to the Font parameter. Value: 3.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.OffsetBackColor">
            <summary>
            Offset into the parameter object array corresponding to the BackColor parameter. Value: 4.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.FormatStringFieldGeneralNumber">
            <summary>
            The format string, converted to lower case, used in the data dictionary to represent a general number. Value: "general number".
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.FormatStringFieldHexadecimal">
            <summary>
            The format string, converted to lower case, used in the data dictionary to represent a hexadecimal number. Value: "hexadecimal".
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.KeyLogicAnalyzerControlTypeName">
            <summary>
            The type name associated with the <c>LogicAnalyzerControl</c> user control. Value: "LogicAnalyzerControl".
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.KeyPlotterControlTypeName">
            <summary>
            The type name associated with the <c>PlotterControl</c> user control. Value: "PlotterControl".
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.KeyMenuItemResetRange">
            <summary>
            The key associated with the 'Reset Range' context menu option. Value: "m_ToolStripMenuItemResetRange".
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.KeyMenuItemZoom">
            <summary>
            The key associated with the 'Zoom' context menu option. Value: "m_ToolStripMenuItemZoom".
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.BreakpointTriggerIntervalAsMultiple">
            <summary>
            The interval, as a multiple of the <c>DataInterval</c>, used to trigger a new breakpoint in the plot. Value: 5.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.BreakpointResolutionMs">
            <summary>
            The resolution, in ms, to be applied to breakpoint values. Value: 10.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.DefaultGraduationsX">
            <summary>
            The default number of graduations on the X axis. Value: 10.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.DefaultGraduationsY">
            <summary>
            The default number of graduations on the Y axis. Value: 5.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.HeightPlotterControl">
            <summary>
            The height, in pixels, of the plotter user control. Value: 120.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.HeightLogicAnalyzerControl">
            <summary>
            The height, in pixels, of the logic analyzer user control. Value: 70.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.HeightEnumeratorPlotterControl">
            <summary>
            The height, in pixels, of the enumerator plotter user control. Value: 70.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.MarginLeftUserControl">
            <summary>
            The left margin to be applied to <see>PlotterControl</see> derived user controls. Value: 30.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.MarginRightUserControl">
            <summary>
            The right margin to be applied to <see>PlotterControl</see> derived user controls. Value: 30.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.MarginTopUserControl">
            <summary>
            The top margin to be applied to <see>PlotterControl</see> derived user controls. Value: CommonConstants.NotUsed.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.MarginBottomUserControl">
            <summary>
            The bottom margin to be applied to <see>PlotterControl</see> derived user controls. Value: CommonConstants.NotUsed.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.m_IsDisposed">
            <summary>
            Flag to indicate whether the class has been disposed of. True, indicates that the class has already been disposed of; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.m_HistoricDataManager">
            <summary>
            Reference to the <c>HistoricDataManager</c> class, this supports the displaying of historic data and allows the time range to be zoomed in and out.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.m_Form">
            <summary>
            Reference to the <c>Form</c> which instantiated this class.
            </summary>
        </member>
        <member name="F:Common.PlotterControlLayout.m_TabIndex">
            <summary>
            The tab index to be assigned to the user control.
            </summary>
        </member>
        <member name="M:Common.PlotterControlLayout.#ctor(System.Windows.Forms.Form)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="form">Reference to the form which instantiated the class.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.#ctor(System.Windows.Forms.Form,Common.IHistoricDataManager)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="form">Reference to the form which instantiated the class.</param>
            <param name="historicDataManager">Reference to the <c>HistoricDataManager</c> object associated with the calling form.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.ContextMenu_Opened(System.Object,System.EventArgs)">
            <summary>
            Event handler for the context menu 'Opened' event. This method is called whenever the user right-clicks on any of the plotter user controls; if a select 
            new time span operation has been initiated on any of the user controls, the new context menu will be shown in the disabled state for all user controls 
            except the one that on which the 'select new time span operation' has been initiated.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.OnRangeChanged(System.Object,System.EventArgs)">
            <summary>
            Raises a <c>RangeChanged</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="eventArgs">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.OnRangeReset(System.Object,System.EventArgs)">
            <summary>
            Raises a <c>RangeReset</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="eventArgs">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.OnRemoveSelected(System.Object,System.EventArgs)">
            <summary>
            Raises a <c>RemoveSelected</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="eventArgs">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.OnZoomSelected(System.Object,System.EventArgs)">
            <summary>
            Raises a <c>ZoomSelected</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="eventArgs">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.ConstructPlotterScalar(System.Int16,System.Double,System.Double)">
            <summary>
            Instantiates and initializes a new <c>PlotterScalar</c> user control and then adds the event delegates to the control.
            </summary>
            <param name="oldIdentifier">The old identifier of the scalar watch variables that is to be plotted.</param>
            <param name="upperDisplayValue">The upper display limit of the plot.</param>
            <param name="lowerDisplayValue">The lower display limit of the plot.</param>
            <returns>The instantiated <c>PlotterControl</c> if the specified watch variable exists; otherwise, null.</returns>
        </member>
        <member name="M:Common.PlotterControlLayout.ConstructPlotterEnumerator(System.Int16,System.Double,System.Double)">
            <summary>
            Instantiates and initializes a new <c>PlotterEnumerator</c> user control and then adds: (a) the event delegates and (b) a reference to the calling form, to 
            the control.
            </summary>
            <param name="oldIdentifier">The old identifier of the enumerator watch variables that is to be plotted.</param>
            <param name="upperDisplayValue">The upper display limit of the plot.</param>
            <param name="lowerDisplayValue">The lower display limit of the plot.</param>
            <returns>The instantiated <c>PlotterControl</c> if the specified watch variable exists; otherwise, null.</returns>
        </member>
        <member name="M:Common.PlotterControlLayout.ConstructLogicAnalyzerControl(System.Int16,System.Byte)">
            <summary>
            Instantiates and initializes a new <c>PlotterBitmask</c> user control and then adds the event delegates to the control.
            </summary>
            <param name="oldIdentifier">The old identifier of the bitmask watch variable that is to be plotted.</param>
            <param name="bit">The bit of the bitmask that is to be plotted.</param>
            <returns>The instantiated <c>LogicAnalyzerControl</c> if the specified watch variable exists; otherwise, null.</returns>
        </member>
        <member name="M:Common.PlotterControlLayout.SetRangeProperties(Common.UserControls.IPlotterWatch,System.Object)">
            <summary>
            Set the range properties of the specified user control to the values contained within the <c>PlotterRangeSelection</c> static structure.
            </summary>
            <param name="plotterWatch">The <c>IPlotterWatch</c> derived user control that is to have its range properties modified.</param>
            <param name="parameter">Not used, this should be set to null.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.SetAestheticProperties(Common.UserControls.IPlotterWatch,System.Object)">
            <summary>
            Set the <c>BackColor</c>, <c>Font</c> and <c>Size</c> properties of the specified user control to the values specified in the 
            <paramref name="parameter"/> object array.
            </summary>
            <param name="plotterWatch">The <c>IPlotterWatch</c> derived user control that is to have its range properties set.</param>
            <param name="parameter">The parameters, as an object array.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.Reset(Common.UserControls.IPlotterWatch,System.Object)">
            <summary>
            Call the <c>ResetPlotter</c> or <c>ResetLogicAnalyzer</c> method, as appropriate, on the <c>Plot</c> property associated with the user control. This clears 
            the graph display and channel lists so that the whole plotting process can be repeated.
            </summary>
            <param name="plotterWatch">The <c>IPlotterWatch</c> derived user control that is to have its range properties set.</param>
            <param name="parameter">The parameters, as an object array.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.ResetPlotter(CodeProject.GraphComponents.Plotter)">
            <summary>
            Reset the specified plotter user control. Clears the graph display and channel lists so that the whole plotting process can be repeated.
            </summary>
            <remarks>The plotter user control must previously have been initialized prior to calling this method.</remarks>
            <param name="plotter">Reference to the <c>Plotter</c> user control that is to be reset.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.GetElapsedTimes(System.DateTime,Common.IHistoricDataManager)">
            <summary>
            Get the elapsed times, in ms, between the RTC time of each frame of historic data and the Start Time of the plot.
            </summary>
            <param name="startTime">The start time of the plot.</param>
            <param name="historicDataManager">Reference to the historic data that is to be plotted.</param>
            <returns>An array containing the elapsed time, in ms, since the specified start time of the plot for each frame of historic data.</returns>
        </member>
        <member name="M:Common.PlotterControlLayout.PlotWatchValues(System.Windows.Forms.TableLayoutControlCollection,Common.IHistoricDataManager,System.Int64[])">
            <summary>
            Plot the historic watch values stored within <paramref name="historicDataManager"/> using the <c>IPlotterWatch</c> derived plotter user controls associated
            with the specified <c>TableLayoutControlCollection</c>.
            </summary>
            <param name="controlCollection">Reference to the <c>TableLayoutControlCollection</c> containing the <c>IPlotterWatch</c> derived plotter controls used 
            to plot the historic data.</param>
            <param name="historicDataManager">Reference to the <c>HistoricDataManager</c> class containing the data that is to be plotted.</param>
            <param name="elapsedTime">The elapsed time, in ms, since the start of the plot for each frame that is to be plotted.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.ResetChannel(System.Windows.Forms.TableLayoutControlCollection)">
            <summary>
            Reset the channel of each <c>IPlotterWatch</c> derived plotter control associated with the specified <c>TableLayoutControlCollection</c>.
            </summary>
            <param name="controlCollection">Reference to the <c>TableLayoutControlCollection</c> containing the <c>IPlotterWatch</c> derived user controls.</param>
        </member>
        <member name="M:Common.PlotterControlLayout.SetBreakpoints(System.Windows.Forms.TableLayoutControlCollection,System.DateTime,Common.IHistoricDataManager)">
            <summary>
            Check whether there were any breaks in communication with the VCU and set the breakpoint values of each plotter controls accordingly. This allows the plot 
            to be drawn using a transparent pen for periods where there was a break in transmission.
            </summary>
            <param name="controlCollection">Reference to the <c>TableLayoutControlCollection</c> containing the <c>IPlotterWatch</c> derived user controls.</param>
            <param name="startTime">The start time of the plot.</param>
            <param name="historicDataManager">Reference to the <c>HistoricDataManager</c> class containing the data that is to be plotted.</param>
        </member>
        <member name="E:Common.PlotterControlLayout.RangeChanged">
            <summary>
            Occurs when the plotter range has been changed.
            </summary>
        </member>
        <member name="E:Common.PlotterControlLayout.RangeReset">
            <summary>
            Occurs when the plotter range has been reset.
            </summary>
        </member>
        <member name="E:Common.PlotterControlLayout.RemoveSelected">
            <summary>
            Occurs when the 'Remove Selected Plot(s)' context menu is selected.
            </summary>
        </member>
        <member name="E:Common.PlotterControlLayout.ZoomSelected">
            <summary>
            Occurs when the 'Zoom' context menu option is selected.
            </summary>
        </member>
        <member name="P:Common.PlotterControlLayout.TabIndex">
            <summary>
            Gets or set the tab index counter.
            </summary>
        </member>
        <member name="T:Common.Forms.FormDataStreamReplay">
            <summary>
            Form to allow the user to single step and review in real time the watch values associated with the data frames contained within the <c>HistoricDataManager</c> class.
            </summary>
            <summary>
            Form to step through the individual frames of data contained within the historic data manager class. The form is called from the form which is used to plot
            the Y value against time values contained within the historic data manager class for the watch variables defined by the workset associated with the saved
            data file.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamReplay.IntervalTimerPlayInitialValue">
            <summary>
            Initial interval, in ms, for the playback timer. Value: 100ms.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamReplay.AltKeyStep">
            <summary>
            The step interval, in ms, corresponding to the ALT key modifier applied to F7/F8. Value: 30,000 ms i.e. 30 seconds.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamReplay.ControlKeyStep">
            <summary>
            The step interval, in ms, associated with the CTRL key modifier applied to F7/F8. Value: 5,000 ms i.e. 5 seconds.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamReplay.ShiftKeyStep">
            <summary>
            The step interval, in ms, associated with the SHIFT key modifier applied to F7/F8. Value: 1,000 ms i.e. 1 second.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamReplay.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamReplay.m_WatchFile">
            <summary>
            The recorded watch data.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.SaveWatchFile">
            <summary>
            Save the recorded watch data to disk. 
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamReplay.m_HistoricDataManager">
            <summary>
            Reference to the <c>HistoricDataManager</c> class containing the de-serialized data frames.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamReplay.m_TimerPlay">
            <summary>
            Timer that is used to playback the saved data in real time.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamReplay.m_Play">
            <summary>
            Flag to indicate whether the user has selected to play the saved data in real time.
            </summary>
        </member>
        <member name="F:Common.Forms.FormDataStreamReplay.m_Index">
            <summary>
            The frame index of the record that is to be played.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.#ctor">
            <summary>
            Initializes a new instance of the class. Zero parameter constructor, required for Visual Studio.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.#ctor(Common.IHistoricDataManager,Common.WatchFile_t)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="historicDataManager">Reference to the <c>HistoricDataManager</c> object containing the data frames that are to be displayed.</param>
            <param name="watchFile">The saved watch data file.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.FormDataStreamReplay_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Shown</c> event. (1) If the calling form was called from a multi document interface child form, change the text and image associated 
            with the  escape key as if this is the case the escape key will return the user to that form rather than home, (2) Initialize the progress bar; (3) add the 
            watch controls associated with each workgroup to the appropriate <c>TabPage</c> control; (4) show the <c>TabPage</c> corresponding to the active workgroup
            and (5) start the display update timer. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.Escape_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the escape key <c>Click</c> event. Close the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.F1_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F1-Enumeration' button <c>Click</c> event. Toggles the flag that controls whether the enumerator variables are to have their values
            displayed as the enumerated text value or the actual numeric value. True, displays the value as enumerated text; false, displays the values as numeric data. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.F2_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'F2-Print' button <c>Click</c> event. Capture the window and save the image to the specified file.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.F4_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'User1' ToolStrip button. Shows the YTPLOT form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.F5_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the F5 function key. Dispays the entry corresponding to the time of the actual trip.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.F6_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the F6 function key. Displays the first data entry.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.F7_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the F7 function key. Displays the data associated with the previous frame.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.F8_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the F8 function key. Displays the data associated with the next frame.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.F9_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the F9 function key. Displays the data associated with the last frame.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.F11_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the F11 function key. Starts and stops the timer which plays the data frames in real time. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.F12_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for F12 function key. Shows the form whixh displays the file header information.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.TabPage_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Click</c> event associated with each <c>TabPage</c>. (1) Sets the focus to the <c>TabPage</c>, this ensures that the <c>Leave</c>
            event for the selected user control is triggered.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.DisplayNextFrame(System.Object,System.EventArgs)">
            <summary>
            Called periodically by the System.Windows.Forms.Timer to step through the data frames in real time.
            </summary>
            <remarks>The timer interval is adjusted each pass so that the playback should, more or less, match real time.</remarks>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.Exit">
            <summary>
            Close the form cleanly. Simulates the user pressing the Exit button.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.UpdateStatusLabels">
            <summary>
            Update the start time, stop time and time-span status labels from the data contained within the <see cref="T:CodeProject.GraphComponents.PlotterRangeSelection"/> structure.
            </summary>
        </member>
        <member name="M:Common.Forms.FormDataStreamReplay.UpdateWatchControlValues(Common.Communication.WatchFrame_t)">
            <summary>
            Update the Value property for each of the watch controls associated with the workset with the values stored in the specified frame.
            </summary>
        </member>
        <member name="P:Common.Forms.FormDataStreamReplay.WatchFile">
            <summary>
            Gets or sets the recorded watch data.
            </summary>
        </member>
        <member name="T:Common.UserControls.SelfTestEnumeratorControl">
            <summary>
            The enumerator self test variable user control. Displays the enumerator text corresponding to the specified <c>Value</c> property for the enumerator self test
            variable specified by the <c>Identifier</c> property.
            </summary>
        </member>
        <member name="T:Common.UserControls.SelfTestControl">
            <summary>
            The self test variable user control. This user control is the parent of all the user controls that are used to display the fields associated with the VCU 
            self test variables 
            </summary>
            <remarks>The value can be the live value retrieved from the target hardware or the value retrieved from a saved data file.</remarks>
        </member>
        <member name="M:Common.UserControls.SelfTestControl.#ctor">
            <summary>
            Initializes anew instance of the class.
            </summary>
        </member>
        <member name="M:Common.UserControls.SelfTestControl.m_MenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Definition' context menu option <c>Click</c> event. Call the ShowHelpPopup() method.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.SelfTestControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.SelfTestControl.ShowHelpPopup">
            <summary>
            Show the event variable definition using the Windows help pop-up.
            </summary>
        </member>
        <member name="F:Common.UserControls.SelfTestControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.SelfTestControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Common.UserControls.SelfTestControl.Identifier">
            <summary>
            Gets or sets the watch identifier of the watch variable associated with the control and updates the name and units field accordingly.
            </summary>
        </member>
        <member name="F:Common.UserControls.SelfTestEnumeratorControl.m_ValueUINT">
            <summary>
            The value cast to a uint.
            </summary>
        </member>
        <member name="F:Common.UserControls.SelfTestEnumeratorControl.m_ClientAsFormPTU">
            <summary>
            Reference to the client form as type <c>FormPTU</c>.
            </summary>
        </member>
        <member name="M:Common.UserControls.SelfTestEnumeratorControl.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Common.UserControls.SelfTestEnumeratorControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="F:Common.UserControls.SelfTestEnumeratorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.SelfTestEnumeratorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Common.UserControls.SelfTestEnumeratorControl.Value">
            <summary>
            Gets or sets the current value of the enumerator self test variable.
            </summary>
        </member>
        <member name="P:Common.UserControls.SelfTestEnumeratorControl.ClientForm">
            <summary>
            Gets or sets the client form associated with the control.
            </summary>
        </member>
        <member name="T:Common.UserControls.SelfTestBitmaskControl">
            <summary>
            The bitmask self test variable user control. Displays the asserted flags corresponding to the specified <c>Value</c> property for the bit mask self test 
            variable specified by the <c>Identifier</c> property.
            </summary>
        </member>
        <member name="F:Common.UserControls.SelfTestBitmaskControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.SelfTestBitmaskControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.SelfTestBitmaskControl.m_ValueUINT">
            <summary>
            The value cast to a uint.
            </summary>
        </member>
        <member name="M:Common.UserControls.SelfTestBitmaskControl.#ctor">
            <summary>
            Initializes anew instance of the user control.
            </summary>
        </member>
        <member name="M:Common.UserControls.SelfTestBitmaskControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.SelfTestBitmaskControl.m_MenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Definition' context menu option <c>Click</c> event. Call the ShowHelpPopup() method.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.SelfTestBitmaskControl.m_MenuItemShowFlags_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Flags' context menu option <c>Click</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="P:Common.UserControls.SelfTestBitmaskControl.WidthUnitsField">
            <summary>
            Gets or sets the width of the units field, in pixels.
            </summary>
        </member>
        <member name="P:Common.UserControls.SelfTestBitmaskControl.Value">
            <summary>
            Gets or sets the current value of the bit mask self test variable.
            </summary>
        </member>
        <member name="T:Common.Configuration.WibuBox">
            <summary>
            A structure to store the WibuBox security device fields stored in the <c>CONFIGUREPTU</c> data table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.WibuBox.m_FirmCode">
            <summary>
            The client's Firm Code.
            </summary>
        </member>
        <member name="F:Common.Configuration.WibuBox.m_UserCode">
            <summary>
            The client's User code.
            </summary>
        </member>
        <member name="F:Common.Configuration.WibuBox.m_SlotId">
            <summary>
            The slot where the Firm and User codes are programmed.
            </summary>
        </member>
        <member name="F:Common.Configuration.WibuBox.m_PortId">
            <summary>
            The port number where the WibuBox is connected (Not Used).
            </summary>
        </member>
        <member name="M:Common.Configuration.WibuBox.#ctor(System.Int32,System.Int32,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="firmCode">The client's Firm code.</param>
            <param name="userCode">The client's User code.</param>
            <param name="slotId">The slot where the Firm and User codes are programmed.</param>
            <param name="portId">The port number where the WibuBox is connected (Not Used).</param>
        </member>
        <member name="P:Common.Configuration.WibuBox.FirmCode">
            <summary>
            Gets or sets the client's Firm Code.
            </summary>
        </member>
        <member name="P:Common.Configuration.WibuBox.UserCode">
            <summary>
            Gets or sets the client's User code.
            </summary>
        </member>
        <member name="P:Common.Configuration.WibuBox.SlotId">
            <summary>
            Gets or sets the slot where the Firm and User codes are programmed.
            </summary>
        </member>
        <member name="P:Common.Configuration.WibuBox.PortId">
            <summary>
            Gets or sets the port number where the WibuBox is connected (Not Used).
            </summary>
        </member>
        <member name="T:Common.Communication.ICommunicationApplication">
            <summary>
            An interface to define the communication methods associated with the main Portable Test Unit application - PTU.exe.
            </summary>
        </member>
        <member name="T:Common.Communication.ICommunicationParent">
            <summary>
            A base interface to define the communication methods required to communicate with a vehicle control unit (VCU).
            </summary>
        </member>
        <member name="M:Common.Communication.ICommunicationParent.InitCommunication(Common.Communication.CommunicationSetting_t)">
            <summary>
            Initialize the communication port.
            </summary>
            <param name="communicationsSetting">The communication settings.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.InitCommunication() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationParent.CloseCommunication(Common.Communication.Protocol)">
            <summary>
            Close the communication port.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.CloseCommunication() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationParent.GetEmbeddedInformation(Common.Communication.TargetConfiguration_t@)">
            <summary>
            Get the embedded software information.
            </summary>
            <param name="targetConfiguration">The target configuration information retrieved from the target.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetEmbeddedInformation() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationParent.GetChartMode">
            <summary>
            Get the mode of the chart recorder. 
            </summary>
            <returns>The mode of the chart recorder: ramp, zero-output, full-scale, data.</returns>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetChartMode() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationParent.SetChartMode(Common.Communication.ChartMode)">
            <summary>
            Set the mode of the chart recorder.
            </summary>
            <param name="chartMode">The required mode of the chart recorder.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.SetChartMode() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationParent.SetChartIndex(System.Int16,System.Int16)">
            <summary>
            Assign the specified watch variable to the specified chart recorder channel index.
            </summary>
            <param name="channelIndex">The chart recorder channel index.</param>
            <param name="watchIdentifier">The watch identifier of the watch variable that is to be assigned to the channel.</param>
        </member>
        <member name="M:Common.Communication.ICommunicationParent.SetChartScale(System.Int16,System.Double,System.Double)">
            <summary>
            Set the chart scaling for the specified watch variable.
            </summary>
            <param name="watchIdentifier">The watch identifier of the watch variables that is to be scaled.</param>
            <param name="maxChartScale">The watch variable engineering value associated with the maximum Y axis value.</param>
            <param name="minChartScale">The watch variable engineering value associated with the minimum Y axis value.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from a call to the PTUDLL32.SetChartScale() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationParent.DownloadChartRecorderWorkset(Common.Configuration.Workset_t)">
            <summary>
            Download the specified chart recorder workset.
            </summary>
            <param name="workset">The workset that is to be downloaded to the VCU.</param>
        </member>
        <member name="P:Common.Communication.ICommunicationParent.CommunicationSetting">
            <summary>
            Gets or sets the communication settings associated with the selected VCU.
            </summary>
        </member>
        <member name="P:Common.Communication.ICommunicationParent.CommDevice">
            <summary>
            Gets the communication device used to communicate with the selected VCU.
            </summary>
        </member>
        <member name="P:Common.Communication.ICommunicationParent.WatchClockMarshall">
            <summary>
            Used to access watch variable info, chart data and the embedded target real time clock 
            </summary>
        </member>
        <member name="M:Common.Communication.ICommunicationApplication.GetTimeDate(System.Boolean,System.DateTime@)">
            <summary>
            Get the date and time from the target hardware.
            </summary>
            <param name="use4DigitYearCode">A flag that specifies whether the Vehicle Control Unit uses a 2 or 4 digit year code. True, if it
            uses a 4 digit year code; otherwise, false.</param>
            <param name="dateTime">The the date and time as a .NET <c>DateTime</c> object.</param>
        </member>
        <member name="M:Common.Communication.ICommunicationApplication.SetTimeDate(System.Boolean,System.DateTime)">
            <summary>
            Set the date and time of the target hardware.
            </summary>
            <param name="use4DigitYearCode">A flag that specifies whether the Vehicle Control Unit uses a 2 or 4 digit year code. True, if it
            uses a 4 digit year code; otherwise, false.</param>
            <param name="dateTime">The date and time as a .NET <c>DateTime</c> object.</param>
        </member>
        <member name="M:Common.Communication.ICommunicationApplication.SetCarID(System.String)">
            <summary>
            Set the car identifier.
            </summary>
            <param name="carIdentifier"></param>
        </member>
        <member name="M:Common.Communication.ICommunicationApplication.ScanPort(Common.Communication.CommunicationSetting_t,Common.Communication.TargetConfiguration_t@)">
            <summary>
            Scan the specified serial communication port to determine if it is connected to a target logic controller. If a target is found
            the target configuration information is written to the output parameter <paramref name="targetConfiguration"/>.
            </summary>
            <param name="communicationSetting">The communication settings that are to be used to communicate with the target.</param>
            <param name="targetConfiguration">The target configuration information returned from the target hardware if a target is found.</param>
            <returns>A flag to indicate whether a target was found; true, if a target was found, otherwise, false.</returns>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.InitCommunication() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="T:Common.Configuration.SelfTestVariableTable">
            <summary>
            A class to help access the self test variables defined in the <c>SELFTESTVARIABLES</c> table of the data dictionary. The self test variables are accessed using 
            the self test variable identifier value.
            </summary>
        </member>
        <member name="M:Common.Configuration.SelfTestVariableTable.#ctor(Common.Configuration.DataDictionary.SELFTESTVARIABLESDataTable,Common.Configuration.DataDictionary.SELFTESTENUMBITDataTable)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="selfTestVariableDataTable">Reference to the <c>SELFTESTVARIABLES</c> table of the data dictionary.</param>
            <param name="enumBitDataTable">Reference to the <c>SELFTESTENUMBIT</c> table of the data dictionary i.e. the enumerator/bitmask data table associated with 
            self test variables.</param>
        </member>
        <member name="M:Common.Configuration.SelfTestVariableTable.BuildDataTable(Common.Configuration.DataDictionary.SELFTESTVARIABLESDataTable)">
            <summary>
            Build an array of the self test variable records contained within the <c>SELFTESTVARIABLES</c> table of the data dictionary. This array is used to access the 
            parameters associated with the self test variables defined in the table. The array element is mapped to the self test variable identifier field of the table.
            </summary>
            <param name="variableDataTable">Reference to the <c>SELFTESTVARIABLES</c> table of the data dictionary.</param>
            <returns>An array of the records contained within the <c>SELFTESTVARIABLES</c> table of the data dictionary, if the specified table is valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.SelfTestVariableTable.BuildEnumBitLists(Common.Configuration.DataDictionary.SELFTESTENUMBITDataTable)">
            <summary>
            Build an array of lists of enumerator/bitmask records associated with each unique <c>ENUMBITID</c> value defined in the <c>SELFTESTENUMBIT</c> table of 
            the data dictionary. The array element is mapped to the <c>ENUMBITID</c> field of the table.
            </summary>
            <param name="enumBitDataTable">Reference to the <c>SELFTESTENUMBIT</c> table of the data dictionary.</param>
            <returns>An array of lists of enumerator/bitmask records associated with each unique <c>ENUMBITID</c> value of the <c>SELFTESTENUMBIT</c> table of the 
            data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="T:Common.Configuration.DirectoryManager">
            <summary>
            Class to create and manage the PTU configuration and data directories.
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathCommonPTUApplicationData">
            <summary>
            The path for the common PTU application data directory.
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathMyDocuments">
            <summary>
            The path for current users MyDocuments folder.
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathPTUApplicationStartup">
            <summary>
            The path for the start-up directory.
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathRelativePTUApplicationData">
            <summary>
            The path, relative to the directory that serves as a common repository for : (a) the application-specific data that is used by all users or 
            (b) the current roaming user, where the PTU data is stored.
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathRelativeWatchFiles">
            <summary>
            The path, relative to the PTU Application Data directory, where the saved watch files are stored. 
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathRelativeFaultLogs">
            <summary>
            The path, relative to the PTU Application Data directory, where fault logs are stored.
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathRelativeSimulatedFaultLogs">
            <summary>
            The path, relative to the PTU Application Data directory, where simulated fault logs are stored.
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathRelativeEventLogs">
            <summary>
            The path, relative to the PTU Application Data directory, where event logs are stored.
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathRelativeScreenCaptureFiles">
            <summary>
            The path, relative to the PTU Application Data directory, where the screen capture files are stored.
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathRelativePTUConfigurationFiles">
            <summary>
            The path, relative to the User PTU Application Data Directory, where the configuration files are stored.
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathRelativeWorksetFiles">
            <summary>
            The path, relative to the User PTU Application Data Directory, where the workset files are stored.
            </summary>
        </member>
        <member name="F:Common.Configuration.DirectoryManager.m_PathRelativeDiagnosticHelpFiles">
            <summary>
            The path, relative to the start-up directory, where the diagnostic help files are stored.
            </summary>
        </member>
        <member name="M:Common.Configuration.DirectoryManager.#cctor">
            <summary>
            Static constructor. Initializes the class.
            </summary>
        </member>
        <member name="M:Common.Configuration.DirectoryManager.SetCommonPTUApplicationDataPath(System.String)">
            <summary>
            Sets the path for the Common PTU Application Data directory.
            </summary>
            <param name="pTUApplicationDataPath">The required path for the PTU Application Data directory.</param>
        </member>
        <member name="M:Common.Configuration.DirectoryManager.SetCommonPTUApplicationDataPathToDefault">
            <summary>
            Sets the path for the Common PTU Application Data directory to the default value.
            </summary>
        </member>
        <member name="M:Common.Configuration.DirectoryManager.CreateConfigurationSubDirectories">
            <summary>
            Checks whether each of the the configuration directories exist and, if not, creates them.
            </summary>
        </member>
        <member name="M:Common.Configuration.DirectoryManager.CreateDataSubDirectories">
            <summary>
            Checks whether each of the data directories exist and, if not, creates them.
            </summary>
            <remarks>If using a PTU Application Data directory other than the default, the SetPTUApplicationDataPath method must called prior to making 
            this call.</remarks>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathPTUApplicationStartup">
            <summary>
            Gets the path for the PTU start-up directory.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathCommonPTUApplicationData">
            <summary>
            Gets the path for the Common PTU Application Data directory.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathPTUApplicationData">
            <summary>
            Gets the default path for PTU Application Data directory.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathDefaultCommonPTUApplicationData">
            <summary>
            Gets the default path for the Common PTU Application Data directory.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathMyDocuments">
            <summary>
            Gets the path for current users personal data files.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathWatchFiles">
            <summary>
            Gets the path for the recorded watch/evaluate files.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathFaultLogs">
            <summary>
            Gets the path for the fault logs.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathSimulatedFaultLogs">
            <summary>
            Gets the path for the simulated fault logs.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathEventLogs">
            <summary>
            Gets the path for the event logs.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathScreenCaptureFiles">
            <summary>
            Gets the path for the screen capture files.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathPTUConfigurationFiles">
            <summary>
            Gets the path for the PTU configuration files.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathWorksetFiles">
            <summary>
            Gets the path for the workset files.
            </summary>
        </member>
        <member name="P:Common.Configuration.DirectoryManager.PathDiagnosticHelpFiles">
            <summary>
            Gets path for the diagnostic help files.
            </summary>
        </member>
        <member name="T:Common.Configuration.TestListRecord">
            <summary>
            A structure to store the fields associated with an entry from the <c>TESTLIST</c> table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.TestListRecord.m_Description">
            <summary>
            The description of the test list.
            </summary>
        </member>
        <member name="F:Common.Configuration.TestListRecord.m_Attribute">
            <summary>
            The attribute field of the test list.
            </summary>
        </member>
        <member name="F:Common.Configuration.TestListRecord.m_SelfTestRecordList">
            <summary>
            The list of self tests associated with the test list.
            </summary>
        </member>
        <member name="M:Common.Configuration.TestListRecord.#ctor">
            <summary>
            Initialize a new instance of the class.
            </summary>
        </member>
        <member name="M:Common.Configuration.TestListRecord.ToString">
            <summary>
            Override the ToString() method to return the description of the group.
            </summary>
            <returns>The log description.</returns>
        </member>
        <member name="P:Common.Configuration.TestListRecord.Description">
            <summary>
            Gets or sets the description of the test list.
            </summary>
        </member>
        <member name="P:Common.Configuration.TestListRecord.Attribute">
            <summary>
            Gets or sets the attribute field of the test list.
            </summary>
        </member>
        <member name="P:Common.Configuration.TestListRecord.SelfTestRecordList">
            <summary>
            Gets or sets the list of self tests associated with the test list.
            </summary>
        </member>
        <member name="T:Common.Configuration.EnumBit_t">
            <summary>
            A structure to store the fields associated with a record from the <c>WATCHENUMBIT</c>, <c>EVENTENUMBIT</c> <c>ANNUNENUMBIT</c> and <c>SELFTESTENUMBIT</c> data tables of the 
            data dictionary.
            
            Each record defines: (a) the descriptive text corresponding to a particular value or (b) the flag description corresponding to the bit that is represented by the value.
            </summary>
            <example>
            An example of the entries corresponding to the WatchEnumBit table of the data dictionary are shown below.
            </example>
            <code>
            ENUMBITID	VALUE	DESCRIPTION                 - Enumerator Entry.
            553	        0	    Apply                       
            553	        3	    Hold
            553	        7	    Dump
            
            ENUMBITID	VALUE	DESCRIPTION                 - Bit Mask Entry.
            501	        1	    Charging Contactor Opening Failure
            501	        2	    Charging Contactor Closing Failure
            501	        4	    Charging Resistor Overtemperature
            501	        8	    DCU/M Hardware Failure
            501	        16	    DC - link Voltage Measurement Failure
            501	        32	    DC - link Input Current Measurement Failure
            501	        64	    Phase 1 Current Measurement Failure
            </code>
        </member>
        <member name="T:Common.Configuration.IEnumBit">
            <summary>
            <para>
            A structure to store the fields associated with a record from the <c>WATCHENUMBIT</c>, <c>EVENTENUMBIT</c> <c>ANNUNENUMBIT</c> and <c>SELFTESTENUMBIT</c> data tables of the 
            data dictionary.
            </para>
            <para>
            Each record defines: (a) the descriptive text corresponding to a particular value or (b) the flag description corresponding to the bit that is represented by the value.
            </para>
            </summary>
            <example>
            An example of the entries corresponding to the WatchEnumBit table of the data dictionary are shown below.
            </example>
            <code>
            ENUMBITID	VALUE	DESCRIPTION                 - Enumerator Entry.
            553	        0	    Apply                       
            553	        3	    Hold
            553	        7	    Dump
            
            ENUMBITID	VALUE	DESCRIPTION                 - Bit Mask Entry.
            501	        1	    Charging Contactor Opening Failure
            501	        2	    Charging Contactor Closing Failure
            501	        4	    Charging Resistor Overtemperature
            501	        8	    DCU/M Hardware Failure
            501	        16	    DC - link Voltage Measurement Failure
            501	        32	    DC - link Input Current Measurement Failure
            501	        64	    Phase 1 Current Measurement Failure
            </code>
        </member>
        <member name="P:Common.Configuration.IEnumBit.EnumBitIdentifier">
            <summary>
            Gets or sets the enumerator/bitmask identifier associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.IEnumBit.Value">
            <summary>
            Gets or sets the value associated with the description field for this enumerator/bitmask identifier.
            </summary>
        </member>
        <member name="P:Common.Configuration.IEnumBit.Description">
            <summary>
            Gets or sets the description associated with the value field for this enumerator/bitmask identifier.
            </summary>
        </member>
        <member name="F:Common.Configuration.EnumBit_t.m_EnumBitIdentifier">
            <summary>
            The enumerator/bitmask identifier associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.EnumBit_t.m_Value">
            <summary>
            The value associated with the description field for this enumerator/bitmask identifier.
            </summary>
        </member>
        <member name="F:Common.Configuration.EnumBit_t.m_Description">
            <summary>
            The description associated with a the value field for this enumerator/bitmask identifier.
            </summary>
        </member>
        <member name="M:Common.Configuration.EnumBit_t.#ctor(System.Int32,System.Double,System.String)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="enumBitIdentifier">The enumerator/bitmask identifier associated with the record.</param>
            <param name="value">The value associated with the description for the specified identifier.</param>
            <param name="description">The description associated with the value for the specified identifier.</param>
        </member>
        <member name="M:Common.Configuration.EnumBit_t.ToString">
            <summary>
            Override the ToString() method so that the description field is returned.
            </summary>
            <returns>The description text.</returns>
        </member>
        <member name="P:Common.Configuration.EnumBit_t.EnumBitIdentifier">
            <summary>
            Gets or sets the enumerator/bitmask identifier associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.EnumBit_t.Value">
            <summary>
            Gets or sets the value associated with the description field for this enumerator/bitmask identifier.
            </summary>
        </member>
        <member name="P:Common.Configuration.EnumBit_t.Description">
            <summary>
            Gets or sets the description associated with a the value field for this enumerator/bitmask identifier.
            </summary>
        </member>
        <member name="T:Common.Communication.WatchClockMarshal">
            <summary>
            This class is a replacement of the unmanaged DLL used to access embedded target configuration 
            information, watch variables, and the embedded target real time clock. 
            
            NOTE: There are no try{} catch{} in this class because all exceptions thrown here are handled by the 
            calling object methods.
            </summary>
        </member>
        <member name="F:Common.Communication.WatchClockMarshal.m_CommDevice">
            <summary>
            The type of communication platform used. The 2 available options currently available are serial
            or TCP.
            </summary>
        </member>
        <member name="F:Common.Communication.WatchClockMarshal.m_RxMessage">
            <summary>
            Stores the information received from the target when a data request is made. This array is then
            parsed and the information is extracted based on the type of data request that is made.
            </summary>
        </member>
        <member name="F:Common.Communication.WatchClockMarshal.m_PtuTargetCommunication">
            <summary>
            Object used to handle the standard embedded target communication protocol
            </summary>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.#ctor(VcuComm.ICommDevice)">
            <summary>
            Constructor that initializes a new instance of the CommGen class
            </summary>
            <param name="device">The communication vehicle used to access the PTU target (VCU)</param>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.#ctor">
            <summary>
            Private 0 argument constructor that forces the instantiation of this class
            to use a non-private constructor.
            </summary>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.GetChartIndex(System.Int16,System.Int16@)">
            <summary>
            Method requests and retrieves from the embedded target the chart variable information based on
            the chart index provided. The PTU variable index is retrieved
            </summary>
            <param name="ChartIndex">The chart variable index (starting at 0) and not to equal or exceed the amount
            of chart recorder variables</param>
            <param name="VariableIndex">The variable index that is currently part of the chart recorder outputs</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.GetChartMode(System.Int16@)">
            <summary>
            This method retrieves the current chart recorder mode from the embedded target. The supported modes are
            ramp, zero-output, full-scale output, and data. 
            </summary>
            <param name="CurrentChartMode">The current mode of the chart recorder</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.GetEmbeddedInformation(VcuComm.ProtocolPTU.GetEmbeddedInfoRes@)">
            <summary>
            Gets the embedded information stored on the target which is used to determine the project
            car ID and software version.
            </summary>
            <param name="getEmbInfo">structure that stores all of the target information, which includes project,
            version number, car ID, etc.</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.GetTimeDate(System.Boolean,System.Int16@,System.Byte@,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            This method requests the current date and time as maintained on the embedded target.
            </summary>
            <param name="Use4DigitYearCode">true if a 4 digit (2 byte) year code is used; false if only 2 digits (1 byte) is used</param>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Hour">Hour</param>
            <param name="Minute">Minute</param>
            <param name="Second">Second</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.SendVariable(System.Int16,System.Int16,System.Double)">
            <summary>
            Write the specified data to the watch variable specified by the <paramref name="DictionaryIndex"/> parameter.
            </summary>
            <param name="DictionaryIndex">The dictionary index.</param>
            <param name="DataType">The data type.</param>
            <param name="Data">The value of the data to be written.</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.SetCarID(System.String)">
             <summary>
            
             </summary>
             <param name="NewCarID"></param>
             <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.SetChartIndex(System.Int16,System.Int16)">
            <summary>
            Assign the specified watch variable to the specified chart recorder channel index.
            </summary>
            <param name="ChartIndex">The chart recorder channel index.</param>
            <param name="VariableIndex">The watch identifier of the watch variable that is to be assigned to the channel.</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.SetChartMode(System.Int16)">
            <summary>
            Sets the chart mode of the chart recorder outputs
            </summary>
            <param name="TargetChartMode">the desired chart mode (data, ramp, full scale or zero)</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.SetChartScale(System.Int16,System.Double,System.Double)">
            <summary>
            Set the chart scaling for the specified watch variable.
            </summary>
            <param name="DictionaryIndex">The watch identifier of the watch variables that is to be scaled.</param>
            <param name="MaxScale">The watch variable engineering value associated with the maximum Y axis value.</param>
            <param name="MinScale">The watch variable engineering value associated with the minimum Y axis value.</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.SetTimeDate(System.Boolean,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            This method updates the embedded target real time clock with the desired date and time. 
            </summary>
            <param name="Use4DigitYearCode">true if the embedded target expects a 4 digit year code; false otherwise</param>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Hour">Hour</param>
            <param name="Minute">Minute</param>
            <param name="Second">Second</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.SetWatchElements(System.Int16[])">
            <summary>
            Map the watch identifiers listed in <paramref name="WatchElements"/> to the watch element array monitored by the embedded target.
            </summary>
            <param name="WatchElements">TArray containing the watch identifiers that are to be mapped to each element of the watch element array.
            </param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.StartClock">
            <summary>
            Starts the real time clock on the embedded target.
            </summary>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.StopClock">
            <summary>
            Stops the real time clock on the embedded target
            </summary>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.UpdateWatchElements(System.Int16,System.Double[],System.Int16[])">
             <summary>
            
             </summary>
             <param name="ForceUpdate"></param>
             <param name="WatchValues"></param>
             <param name="DataType"></param>
             <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.WatchClockMarshal.NullifyByteArray(System.Byte[],System.UInt16,System.UInt16)">
            <summary>
            Scans a byte array and searches for the first encounter of a NULL character. Also
            subsequent characters up to and including maxBytesInString are then "NULLed".
            </summary>
            <param name="rxBytes">the byte array</param>
            <param name="offset">Specifies the offset into the byte array where the scan is to start.</param>
            <param name="maxBytesInString">max number of bytes in string</param>
        </member>
        <member name="T:Common.Communication.PtuTargetCommunication">
            <summary>
            Class that implements calls to handle the PTU to embedded target communication. It uses 
            </summary>
        </member>
        <member name="M:Common.Communication.PtuTargetCommunication.SendCommandToEmbedded(VcuComm.ICommDevice,VcuComm.ProtocolPTU.PacketType)">
            <summary>
            This method is used to send a command to the embedded PTU target using the type of
            device specified in the argument. The difference between this method and the 3 parameter
            method of the same name is that this method is used when there is no payload with the command.
            </summary>
            <param name="commDevice">The comm device used to communicate with target</param>
            <param name="packetRequestType">The command sent to the target</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.PtuTargetCommunication.SendCommandToEmbedded(VcuComm.ICommDevice,VcuComm.ICommRequest)">
            <summary>
            This method is used to send a command to the embedded PTU target using the type of
            device specified in the argument. The difference between this method and the 2 parameter
            method of the same name is that this method is used when there is a payload with the command.
            </summary>
            <param name="commDevice">The comm device used to communicate with target</param>
            <param name="requestObj">This object is a request that already has the all of the necessary payload
            parameters ready to be formed into a message to be sent to embedded target</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.PtuTargetCommunication.SendDataRequestToEmbedded(VcuComm.ICommDevice,VcuComm.ICommRequest,System.Byte[])">
            <summary>
            This method is used to send a data request to the embedded PTU target using the type of
            device specified in the argument. The difference between this method and the method of the same name
            is that this method is used when there is a payload with the data request.
            </summary>
            <param name="commDevice">The comm device used to communicate with target</param>
            <param name="requestObj">This object is a request that already has the all of the necessary payload
            parameters ready to be formed into a message to be sent to embedded target</param>
            <param name="rxMessage">Used to store the response from the embedded target</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.PtuTargetCommunication.SendDataRequestToEmbedded(VcuComm.ICommDevice,VcuComm.ProtocolPTU.PacketType,System.Byte[])">
            <summary>
            This method is used to send a data request to the embedded PTU target using the type of
            device specified in the argument. The difference between this method and the method of the same name
            is that this method is used when there is NO payload with the data request.
            </summary>
            <param name="commDevice">The comm device used to communicate with target</param>
            <param name="packetRequestType">The command sent to the target</param>
            <param name="rxMessage">Used to store the response from the embedded target</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="T:Common.Communication.DataStream_t">
            <summary>
            A structure to store the fields associated with a data stream of watch variable values.
            </summary>
            <remarks>
            A data stream contains all of the information required to plot historic watch variable values.
            </remarks>
        </member>
        <member name="F:Common.Communication.DataStream_t.DataStreamTypeParameters">
            <summary>
            The data stream parameters that are derived from the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Communication.DataStream_t.SampleCount">
            <summary>
            The number of data samples associated with the data stream.
            </summary>
        </member>
        <member name="F:Common.Communication.DataStream_t.FrameIntervalMs">
            <summary>
            The interval, in ms, between successive data frames.
            </summary>
            <remarks>
            This is equivalent to the sample interval multiplied by the sample multiple.
            </remarks>
        </member>
        <member name="F:Common.Communication.DataStream_t.LogType">
            <summary>
            The type of log associated with the data stream.
            </summary>
        </member>
        <member name="F:Common.Communication.DataStream_t.StreamNumber">
            <summary>
            The data stream number.
            </summary>
        </member>
        <member name="F:Common.Communication.DataStream_t.EventDescription">
            <summary>
            The description of the event that triggered the data stream.
            </summary>
        </member>
        <member name="F:Common.Communication.DataStream_t.DurationMs">
            <summary>
            The duration of the data stream specified in ms.
            </summary>
            <remarks>
            The duration is equivalent to the number of entries multiplied by the frame interval. 
            </remarks>
        </member>
        <member name="F:Common.Communication.DataStream_t.DurationPreTripMs">
            <summary>
            The duration, in ms, between the first entry and the time of the actual trip.
            </summary>
        </member>
        <member name="F:Common.Communication.DataStream_t.DurationPostTripMs">
            <summary>
            The duration, in ms, between the time of the actual trip and the last log entry.
            </summary>
        </member>
        <member name="F:Common.Communication.DataStream_t.Workset">
            <summary>
            The workset used to define the watch elements contained within the data stream.
            </summary>
        </member>
        <member name="F:Common.Communication.DataStream_t.TimeOrigin">
            <summary>
            The start time of the data stream.
            </summary>
        </member>
        <member name="F:Common.Communication.DataStream_t.WatchFrameList">
            <summary>
            The stream as a list of individual time stamped data frames.
            </summary>
        </member>
        <member name="F:Common.Communication.DataStream_t.AutoScaleWatchValues">
            <summary>
            The auto-scale information associated with each watch element.
            </summary>
            <remarks>Use for auto-scaling of the plotter.</remarks>
        </member>
        <member name="M:Common.Communication.DataStream_t.#ctor(Common.Configuration.EventRecord,System.Int16,System.Int16,System.Int16,Common.Configuration.Workset_t)">
            <summary>
            Initializes a new instance of the structure. Used when initializing a datastream to store fault log data retrieved from the VCU. 
            </summary>
            <param name="eventRecord">The event record associated with the data stream.</param>
            <param name="watchCount">The number of watch variables contained within the data stream.</param>
            <param name="sampleCount">The number of data samples associated with the data stream.</param>
            <param name="sampleMultiple">The multiple of the base sample interval at which the data is recorded.</param>
            <param name="workset">The workset associated with the data stream.</param>
        </member>
        <member name="M:Common.Communication.DataStream_t.#ctor(Common.LogType,System.Double,System.Double,System.Int16)">
            <summary>
            Initializes a new instance of the structure. Used when instantiating a data stream structure to store the simulated fault log.
            </summary>
            <param name="logType">The type of log.</param>
            <param name="durationMs">The duration of the log, in ms.</param>
            <param name="durationPostTripMs">The duration of the log, in ms, following the trip.</param>
            <param name="frameIntervalMs">The interval, in ms, between successive data frames.</param>
        </member>
        <member name="M:Common.Communication.DataStream_t.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the structure. Used when initializing a data stream to store recorded watch values.
            </summary>
            <param name="frameIntervalMs">The interval, in ms, between successive data frames.</param>
        </member>
        <member name="M:Common.Communication.DataStream_t.EvaluateAutoScaleLimits">
            <summary>
            Evaluate the engineering limits from the raw maximum and minimum values contained within the <c>AutoScaleWatchValues</c> property.
            </summary>
            <remarks>
            The <c>Workset</c> property and the maximum and minimum raw values associated with the <c>AutoScalesWatchValues</c> property must be defined 
            before using this method.
            </remarks>
        </member>
        <member name="M:Common.Communication.DataStream_t.ConfigureAutoScale">
            <summary>
            Configure the <c>AutoScaleWatchValues</c> property from the information contained within the <c>WatchFrameList</c> and <c>Workset</c> properties.
            </summary>
            <reamarks>
            This method is used when the <c>AutoScalesWatchValues</c> property is empty/null. The <c>WatchFrameList</c> and <c>Workset</c> properties must 
            be defined before using this method.
            </reamarks>
        </member>
        <member name="T:Common.CheckBoxUInt32">
            <summary>
            A class to display the state of the individual flags of a <c>uint</c> bitmask watch variable using an array of <c>CheckBox</c> controls and to 
            convert the <c>Checked</c> state of the individual controls in the array back to a <c>uint</c> value.
            </summary>
        </member>
        <member name="T:Common.ICheckBoxUInt32">
            <summary>
            An interface to display the state of the individual flags of a <c>uint</c> bitmask watch variable using an array of <c>CheckBox</c> controls and to 
            convert the <c>Checked</c> state of the individual controls in the array back to a <c>uint</c> value.
            </summary>
        </member>
        <member name="M:Common.ICheckBoxUInt32.SetText(System.Int16)">
            <summary>
            Set the <c>Text</c> property of each <c>CheckBox</c> control associated with the <c>CheckBoxes</c> property to the flag description associated 
            with the specified bitmask watch variable.
            </summary>
            <remarks>The <c>CheckBoxes</c> property must be defined prior to making this call.</remarks>
            <param name="oldIdentifier">The watch variable old identifier associated with the bitmask watch variable.</param>
        </member>
        <member name="M:Common.ICheckBoxUInt32.SetChecked(System.UInt32)">
            <summary>
            Set the <c>Checked</c> property of the <c>CheckBox</c> controls associated with the <c>CheckBoxes</c> property so that they represent 
            the specified unsigned integer value.
            </summary>
            <remarks>The <c>CheckBoxes</c> property must be defined prior to making this call.</remarks>
            <param name="value">The value that is to be represented by the Checked properties of the <c>CheckBox</c> controls  associated with the 
            <c>CheckBoxes</c> property.</param>
        </member>
        <member name="M:Common.ICheckBoxUInt32.SetColors">
            <summary>
            Set the BackColor and ForeColor properties of the <c>CheckBox</c> controls associated with the <c>CheckBoxes</c> property so that they reflect 
            the state of the <c>Checked</c> property of each control.
            </summary>
            <remarks>The <c>CheckBoxes</c> property must be defined prior to making this call.</remarks>
        </member>
        <member name="M:Common.ICheckBoxUInt32.ToValue">
            <summary>
            Convert the <c>Checked</c> property states of the <c>CheckBox</c> controls associated with the <c>CheckBoxes</c> property to a <c>uint</c> value.
            </summary>
            <remarks>The <c>CheckBoxes</c> property must be defined prior to making this call.</remarks>
            <returns>A <c>uint</c> value corresponding to the <c>Checked</c> property states of the <c>CheckBox</c> controls associated with the 
            <c>CheckBoxes</c> property.</returns>
        </member>
        <member name="P:Common.ICheckBoxUInt32.CheckBoxes">
            <summary>
            Gets or sets the reference to the 32 element array of <c>CheckBox</c> controls where each <c>CheckBox</c> control represents an individual bit of 
            a 32 bit bitmask watch variable.
            </summary>
            <example>
            // Create an array of CheckBox controls to simplify access.
            CheckBoxUInt32 = new CheckBox[32]  {   m_CheckBox00, m_CheckBox01, m_CheckBox02, m_CheckBox03, m_CheckBox04, m_CheckBox05, m_CheckBox06, m_CheckBox07, 
                                                   m_CheckBox08, m_CheckBox09, m_CheckBox10, m_CheckBox11, m_CheckBox12, m_CheckBox13, m_CheckBox14, m_CheckBox15, 
                                                   m_CheckBox16, m_CheckBox17, m_CheckBox18, m_CheckBox19, m_CheckBox20, m_CheckBox21, m_CheckBox22, m_CheckBox23, 
                                                   m_CheckBox24, m_CheckBox25, m_CheckBox26, m_CheckBox27, m_CheckBox28, m_CheckBox29, m_CheckBox30, m_CheckBox31,
                                               };
                                                   
            where each <c>CheckBox</c> control is instantiated as follows:
            
                CheckBox m_CheckBoxXX = new CheckBox();
                m_CheckBoxXX.Anchor = System.Windows.Forms.AnchorStyles.Left;
                m_CheckBoxXX.AutoEllipsis = true;
                m_CheckBoxXX.Location = new System.Drawing.Point([X], [Y]);
                m_CheckBoxXX.Name = "m_CheckBoxXX";
                m_CheckBoxXX.Size = new System.Drawing.Size([width], [height]);
                m_CheckBoxXX.TabIndex = 0;
                m_CheckBoxXX.TabStop = false;
                m_CheckBoxXX.Text = "Undefined XX";
                m_CheckBoxXX.CheckedChanged += new System.EventHandler(CheckBoxUInt32_CheckedChanged);
                
            </example>
        </member>
        <member name="F:Common.CheckBoxUInt32.m_CheckBoxes">
            <summary>
            Reference to the 32 element array of <c>CheckBox</c> controls where each <c>CheckBox</c> control represents an individual bit of a 32 bit bitmask
            watch variable.
            </summary>
        </member>
        <member name="F:Common.CheckBoxUInt32.m_IsInitialized">
            <summary>
            A flag to indicate that the interface has been initialized. True, if the interface has been initialized; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.CheckBoxUInt32.m_BackColorAssertedState">
            <summary>
            The <c>BackColor</c> associated with the flag if the flag is in the asserted state. Value: Color.Yellow.
            </summary>
        </member>
        <member name="F:Common.CheckBoxUInt32.m_ForeColorAssertedState">
            <summary>
            The <c>ForeColor</c> associated with the flag if the flag is in the asserted state. Value: Color.Black.
            </summary>
        </member>
        <member name="F:Common.CheckBoxUInt32.m_BackColorClearState">
            <summary>
            The <c>BackColor</c> associated with the flag if the flag is NOT in the asserted state i.e. it is clear. Value: Color.WhiteSmoke.
            </summary>
        </member>
        <member name="F:Common.CheckBoxUInt32.m_ForeColorClearState">
            <summary>
            The <c>ForeColor</c> associated with the flag if the flag is NOT in the asserted state i.e. it is clear. Value: Color.Black.
            </summary>
        </member>
        <member name="M:Common.CheckBoxUInt32.SetText(System.Int16)">
            <summary>
            Set the <c>Text</c> property of each <c>CheckBox</c> control associated with the <c>CheckBoxes</c> property to the flag description associated 
            with the specified bitmask watch variable.
            </summary>
            <remarks>The <c>CheckBoxes</c> property must be defined prior to making this call.</remarks>
            <param name="oldIdentifier">The watch variable old identifier associated with the bitmask watch variable.</param>
        </member>
        <member name="M:Common.CheckBoxUInt32.SetChecked(System.UInt32)">
            <summary>
            Set the <c>Checked</c> property of the <c>CheckBox</c> controls associated with the <c>CheckBoxes</c> property so that they represent 
            the specified unsigned integer value.
            </summary>
            <remarks>The <c>CheckBoxes</c> property must be defined prior to making this call.</remarks>
            <param name="value">The value that is to be represented by the Checked properties of the <c>CheckBox</c> controls  associated with the 
            <c>CheckBoxes</c> property.</param>
        </member>
        <member name="M:Common.CheckBoxUInt32.SetColors">
            <summary>
            Set the BackColor and ForeColor properties of the <c>CheckBox</c> controls associated with the <c>CheckBoxes</c> property so that they reflect 
            the state of the <c>Checked</c> property of each control.
            </summary>
            <remarks>The <c>CheckBoxes</c> property must be defined prior to making this call.</remarks>
        </member>
        <member name="M:Common.CheckBoxUInt32.ToValue">
            <summary>
            Convert the <c>Checked</c> property states of the <c>CheckBox</c> controls associated with the <c>CheckBoxes</c> property to a <c>uint</c> value.
            </summary>
            <remarks>The <c>CheckBoxes</c> property must be defined prior to making this call.</remarks>
            <returns>A <c>uint</c> value corresponding to the <c>Checked</c> property states of the <c>CheckBox</c> controls associated with the 
            <c>CheckBoxes</c> property.</returns>
        </member>
        <member name="P:Common.CheckBoxUInt32.CheckBoxes">
            <summary>
            Gets or sets the reference to the 32 element array of <c>CheckBox</c> controls where each <c>CheckBox</c> control represents an individual bit of 
            a 32 bit bitmask watch variable.
            </summary>
            <example>
            // Create an array of CheckBox controls to simplify access.
            CheckBoxUInt32 = new CheckBox[32]  {   m_CheckBox00, m_CheckBox01, m_CheckBox02, m_CheckBox03, m_CheckBox04, m_CheckBox05, m_CheckBox06, m_CheckBox07, 
                                                   m_CheckBox08, m_CheckBox09, m_CheckBox10, m_CheckBox11, m_CheckBox12, m_CheckBox13, m_CheckBox14, m_CheckBox15, 
                                                   m_CheckBox16, m_CheckBox17, m_CheckBox18, m_CheckBox19, m_CheckBox20, m_CheckBox21, m_CheckBox22, m_CheckBox23, 
                                                   m_CheckBox24, m_CheckBox25, m_CheckBox26, m_CheckBox27, m_CheckBox28, m_CheckBox29, m_CheckBox30, m_CheckBox31,
                                               };
                                                   
            where each <c>CheckBox</c> control is instantiated as follows:
            
                CheckBox m_CheckBoxXX = new CheckBox();
                m_CheckBoxXX.Anchor = System.Windows.Forms.AnchorStyles.Left;
                m_CheckBoxXX.AutoEllipsis = true;
                m_CheckBoxXX.Location = new System.Drawing.Point([X], [Y]);
                m_CheckBoxXX.Name = "m_CheckBoxXX";
                m_CheckBoxXX.Size = new System.Drawing.Size([width], [height]);
                m_CheckBoxXX.TabIndex = 0;
                m_CheckBoxXX.TabStop = false;
                m_CheckBoxXX.Text = "Undefined XX";
                m_CheckBoxXX.CheckedChanged += new System.EventHandler(CheckBoxUInt32_CheckedChanged);
                
            </example>
        </member>
        <member name="T:Common.UserControls.FormShowFlagsSelfTest">
            <summary>
            Form to display the state of the individual bits within a bit mask self test variable.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlagsSelfTest.m_SelfTestVariableIdentifier">
            <summary>
            The self test variable identifier associated with the bitmask user control that called this form.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlagsSelfTest.m_SelfTestVariableName">
            <summary>
            The name of the self test variable that appears in the form title.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormShowFlagsSelfTest.#ctor">
            <summary>
            Initialize a new instance of the form. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormShowFlagsSelfTest.#ctor(Common.UserControls.VariableControl)">
            <summary>
            Initialize a new instance of the form.
            </summary>
            <param name="variableControl">Reference to the user control that called this form.</param>
        </member>
        <member name="M:Common.UserControls.FormShowFlagsSelfTest.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="F:Common.UserControls.FormShowFlagsSelfTest.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormShowFlagsSelfTest.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Common.UserControls.WatchScalarControl">
            <summary>
            The scalar watch variable user control. Displays the engineering value corresponding to the specified raw <c>Value</c> property for the scalar watch variable specified
            by the <c>Identifier</c> property.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchScalarControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchScalarControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchScalarControl.m_ContextMenu">
            <summary>
            Reference to the context menu associated with this user control.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchScalarControl.m_MenuItemShowDefinition">
            <summary>
            Reference to the 'Show Definition' menu option of the context menu.
            </summary>
        </member>
        <member name="F:Common.UserControls.WatchScalarControl.m_MenuItemChangeValue">
            <summary>
            Reference to the 'Change Value' menu option of the context menu.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchScalarControl.#ctor">
            <summary>
            Initializes a new instance of the user control.
            </summary>
        </member>
        <member name="M:Common.UserControls.WatchScalarControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.UserControls.WatchScalarControl.m_MenuItemShowDefinition_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Show Definition' context menu option <c>Click</c> event. Call the ShowHelpPopup() method.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.WatchScalarControl.m_MenuItemChangeValue_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Change Value' context menu option <c>Click</c> event. If applicable, shows the form which allows the user to change the value of the 
            scalar watch variable.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.WatchScalarControl.m_LabelValueField_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>DoubleClick</c> event associated with the value field label. Check whether the watch variable is write-enabled and, if so, 
            simulate the user selecting the 'Change Value' context menu option; otherwise, report a warning.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.UserControls.WatchScalarControl.SetWriteEnabledProperty(System.Boolean)">
            <summary>
            Set the state of the <c>WriteEnabled</c> property and perform any associated logic.
            </summary>
            <param name="writeEnabled">The required state of the WriteEnabled property.</param>
        </member>
        <member name="P:Common.UserControls.WatchScalarControl.Value">
            <summary>
            Gets or sets the current value of watch variable.
            </summary>
            <exception cref="T:System.Exception">Thrown if the Identifier field is not defined in the old identifier, OLDID, field of the data dictionary.</exception>
        </member>
        <member name="T:Common.General">
            <summary>
            A general collection of useful, but unrelated, static methods.
            </summary>
        </member>
        <member name="F:Common.General.FilterIndexJPeg">
            <summary>
            The filter index corresponding to the JPeg image format.Value: 1.
            </summary>
        </member>
        <member name="F:Common.General.FilterIndexBmp">
            <summary>
            The filter index corresponding to the Bmp image format. Value: 2.
            </summary>
        </member>
        <member name="F:Common.General.LocationCode">
            <summary>
            The NYCT location code that is used to specify which connector the PTU is connected to in to the car. This field is blank where the location is not ambiguous
            i.e. only one PTU connector exists on a car for this application. Value: string.Empty.
            </summary>
        </member>
        <member name="F:Common.General.Subsystem">
            <summary>
            The NYCT subsystem code associated with the Bombardier PTU. Value: "PTEP".
            </summary>
        </member>
        <member name="F:Common.General.LogIdentifier">
            <summary>
            The text that is pre-pended to the standard NYCT filename format to identify it as an event log file. Value: "Log".
            </summary>
        </member>
        <member name="F:Common.General.ImageIdentifier">
            <summary>
            The text that is used on the NYCT project to identify the file as screen capture image. Value: "Image".
            </summary>
        </member>
        <member name="M:Common.General.FileDialogOpenFileMultiSelect(System.String,System.String,System.String,System.String)">
            <summary>
            Use the <c>OpenFileDialog</c>class to ask the user to select one or more file(s) of the specified type.
            </summary>
            <param name="title">The title that is to appear in the file dialog box.</param>
            <param name="defaultExtension">The default extension associated with the type of file that is to be selected.</param>
            <param name="filterText">The filter text that appears in the dialog box.</param>
            <param name="initialDirectory">The path corresponding to the initial directory that is selected.</param>
            <remarks>The dialog box will only display those files with the specified default extension.</remarks>
            <returns>An array containing the fully qualified filenames of the selected files, if at least one valid file was selected; otherwise,
            null.</returns>
        </member>
        <member name="M:Common.General.FileDialogOpenFile(System.String,System.String,System.String,System.String)">
            <summary>
            Use the <c>OpenFileDialog</c>class to ask the user to select a single file of the specified type.
            </summary>
            <param name="title">The title that is to appear in the file dialog box.</param>
            <param name="defaultExtension">The default extension associated with the type of file that is to be selected.</param>
            <param name="filterText">The filter text that appears in the dialog box.</param>
            <param name="initialDirectory">The path corresponding to the initial directory that is selected.</param>
            <remarks>The dialog box will only display those files with the specified default extension.</remarks>
            <returns>The fully qualified filename of the selected file, if a valid file was selected; otherwise, an empty string.</returns>
        </member>
        <member name="M:Common.General.FileDialogOpenFile(Common.IMainWindow,System.String,System.String,System.String,System.String)">
            <summary>
            Use the <c>OpenFileDialog</c>class to ask the user to select a single file of the specified type.
            </summary>
            <param name="mainWindow">Reference to the main PTU Multiple Document Interface Window.</param>
            <param name="title">The title that is to appear in the file dialog box.</param>
            <param name="defaultExtension">The default extension associated with the type of file that is to be selected.</param>
            <param name="filterText">The filter text that appears in the dialog box.</param>
            <param name="initialDirectory">The path corresponding to the initial directory that is selected.</param>
            <remarks>The dialog box will only display those files with the specified default extension.</remarks>
            <returns>The fully qualified filename of the selected file, if a valid file was selected; otherwise, an empty string.</returns>
        </member>
        <member name="M:Common.General.FileDialogSaveDataDictionary(System.String,System.String)">
            <summary>
            Set-up the <c>SaveFileDialog</c> parameters associated with saving a data dictionary to disk.
            </summary>
            <param name="defaultFilename">The default filename.</param>
            <param name="initialDirectory">The path of the initial directory that is to be displayed.</param>
            <returns>The fully qualified filename of the specified file or 'string.Empty' if no file is specified.</returns>
        </member>
        <member name="M:Common.General.FileDialogSaveSimulatedFaultLog(System.String,System.String)">
            <summary>
            Set-up the <c>SaveFileDialog</c> parameters associated with saving a simulated fault log to disk.
            </summary>
            <param name="defaultFilename">The default filename.</param>
            <param name="initialDirectory">The path of the initial directory that is to be displayed.</param>
            <returns>The fully qualified filename of the specified file or 'string.Empty' if no file is specified.</returns>
        </member>
        <member name="M:Common.General.FileDialogSaveFaultLog(System.String,System.String)">
            <summary>
            Set-up the <c>SaveFileDialog</c> parameters associated with saving a fault log to disk.
            </summary>
            <param name="defaultFilename">The default filename.</param>
            <param name="initialDirectory">The path of the initial directory that is to be displayed.</param>
            <returns>The fully qualified filename of the specified file or 'string.Empty' if no file is specified.</returns>
        </member>
        <member name="M:Common.General.FileDialogSaveRecordedWatchFile(System.String,System.String)">
            <summary>
            Set-up the <c>SaveFileDialog</c> parameters associated with saving a recorded watch variable file to disk.
            </summary>
            <param name="defaultFilename">The default filename.</param>
            <param name="initialDirectory">The path of the initial directory that is to be displayed.</param>
            <returns>The fully qualified filename of the specified file or 'string.Empty' if no file is specified.</returns>
        </member>
        <member name="M:Common.General.FileDialogSaveEventLog(System.String,System.String)">
            <summary>
            Set-up the <c>SaveFileDialog</c> parameters associated with saving an event log to disk.
            </summary>
            <param name="defaultFilename">The default filename.</param>
            <param name="initialDirectory">The path of the initial directory that is to be displayed.</param>
            <returns>The fully qualified filename of the specified file or 'string.Empty' if no file is specified.</returns>
        </member>
        <member name="M:Common.General.FileDialogSaveImageFile(System.String,System.String,System.Drawing.Imaging.ImageFormat@)">
            <summary>
            Set-up the <c>SaveFileDialog</c> parameters associated with saving a screen image.
            </summary>
            <param name="defaultFilename">The default filename.</param>
            <param name="initialDirectory">The path of the initial directory that is to be displayed.</param>
            <param name="imageFormat">The selected image format.</param>
            <returns>The fully qualified filename of the specified file or 'string.Empty' if no file is specified.</returns>
        </member>
        <member name="M:Common.General.GetFullyQualifiedFaultLogFilename(Common.Configuration.EventRecord,System.String@)">
            <summary>
            Get the fully qualified filename and the filename of the fault log associated with the specified event record.
            </summary>
            <remarks>
            Returns string.Empty if a stream has not been saved for the specified event record.
            </remarks>
            <param name="eventRecord">The event record.</param>
            <param name="defaultFilename">The default fault log filename.</param>
            <returns>The fully qualified filename of the fault log associated with the specified event record.</returns>
        </member>
        <member name="M:Common.General.GetFullyQualifiedFaultLogFilename(Common.Configuration.EventRecord)">
            <summary>
            Get the fully qualified filename of the fault log associated with the specified event record.
            </summary>
            <remarks>
            Returns string.Empty if a stream has not been saved for the specified event record.
            </remarks>
            <param name="eventRecord">The event record.</param>
            <returns>The fully qualified filename of the fault log associated with the specified event record.</returns>
        </member>
        <member name="M:Common.General.DeriveName(System.String,System.DateTime,System.String,System.String)">
            <summary>
            Derive the default filename for a for a file based upon the specified parameters. The format of the standard filename is as follows:
            'project-ID [car-identifier] [description] YYMMDD-HHmmss.extension'. This method was extended as part of purchase order 4800010525-CU2/19.03.2015 to 
            include support for the NYCT filename format.
            </summary>
            <param name="carIdentifier">The car identifier associated with the event.</param>
            <param name="dateTime">The time stamp associated with file.</param>
            <param name="extension">The file extension including the period e.g. .xml.</param>
            <param name="description">The description that is to be added to the file.</param>
            <returns>The derived default filename of the file.</returns>
        </member>
        <member name="M:Common.General.CleanInput(System.String)">
            <summary>
            For a filename to be valid, it cannot contain any of the characters returned from the call to Path.GetInvalidFileNameChars() method. This method removes
            any occurrence of these characters from the input string.
            </summary>
            <param name="inputString">The input string that is to be checked for invalid filename characters.</param>
            <returns>If the method is successful, it returns a copy of the input string with any invalid characters removed; otherwise, if an exception is thrown, 
            it returns an empty string.</returns>
        </member>
        <member name="M:Common.General.GetToolStripItemCollection(System.Windows.Forms.ToolStrip)">
            <summary>
            Get the ToolStripItemCollection associated with a ToolStrip.
            </summary>
            <param name="toolStrip">The toolstrip for which the collection is to be made.</param>
            <returns>The items contained within the specified toolstrip.</returns>
        </member>
        <member name="M:Common.General.ConvertEngineeringDatabaseToXML">
            <summary>
            Ask the user to specify an engineering data dictionary (.e1) and a project PTU configuration database (.e1) and convert them to a
            single XML file.
            </summary>
        </member>
        <member name="M:Common.General.LoadDataDictionary(Common.IMainWindow)">
            <summary>
            Ask the user to select an XML data dictionary and then load this data dictionary into the PTU application.
            </summary>
            <param name="mainWindow">Reference to the main application window interface.</param>
        </member>
        <member name="M:Common.General.GetUsername">
            <summary>
            Get the <c>Username</c> of the current user.
            </summary>
            <returns>The <c>Username</c> of the current user.</returns>
        </member>
        <member name="M:Common.General.GetDecimalPlaces(System.Double,System.Int32@)">
            <summary>
            Get the number of decimal places corresponding to the specified watch variable scale-factor. This can be used to program a numeric up/down
            control or specify the format string used to display the variable.
            </summary>
            <param name="scaleFactor">The scale-factor associated with the watch variable.</param>
            <param name="decimalPlaces">The number of decimal places to be used when displaying the value.</param>
        </member>
        <member name="M:Common.General.GetIncrement(System.Double,System.Decimal@)">
            <summary>
            Get the numeric up/down control increment value corresponding to the specified watch variable scale-factor.
            </summary>
            <param name="scaleFactor">The scale-factor associated with the watch variable.</param>
            <param name="increment">The increment value corresponding to the specified scale-factor.</param>
        </member>
        <member name="M:Common.General.SetMenuStripVisible(System.Windows.Forms.MenuStrip,System.Boolean)">
            <summary>
            Sets the <c>Visible</c> property of ALL <c>ToolStripMenuItem</c> items associated with the specified <c>MenuStrip</c> to the specified
            state. 
            </summary>
            <param name="menuStrip">The <c>MenuStrip</c>.</param>
            <param name="state">The required state of the <c>Visible</c> property.</param>
        </member>
        <member name="M:Common.General.SetToolStripMenuItemVisible(System.Windows.Forms.ToolStripMenuItem,System.Boolean)">
            <summary>
            Sets the <c>Visible</c> property of ALL <c>ToolStripMenuItem</c> items associated with the specified <c>ToolStripMenuItem</c> to the
            specified state.
            </summary>
            <param name="toolStripMenuItem">The <c>ToolStripMenuItem</c>.</param>
            <param name="state">The required state of the <c>Visible</c> property.</param>
        </member>
        <member name="M:Common.General.SetMenuStripEnabled(System.Windows.Forms.MenuStrip,System.Boolean)">
            <summary>
            Sets the <c>Enabled</c> property of ALL <c>ToolStripMenuItem</c> items associated with the specified <c>MenuStrip</c> to the specified
            state. 
            </summary>
            <param name="menuStrip">The <c>MenuStrip</c>.</param>
            <param name="state">The required state of the <c>Enabled</c> property of ALL <c>ToolStripMenuItem</c> items associated with the specified
            <c>MenuStrip</c>.</param>
        </member>
        <member name="M:Common.General.SetToolStripMenuItemEnabled(System.Windows.Forms.ToolStripMenuItem,System.Boolean)">
            <summary>
            Sets the <c>Enabled</c> property of ALL <c>ToolStripMenuItem</c> items associated with the specified <c>ToolStripMenuItem</c> to the
            specified state.
            </summary>
            <param name="toolStripMenuItem">The <c>ToolStripMenuItem</c>.</param>
            <param name="state">The required state of the <c>Enabled</c> property of ALL <c>ToolStripMenuItem</c> items associated with the specified
            <c>ToolStripMenuItem</c>.</param>
        </member>
        <member name="M:Common.General.GetToolStripMenuItem(System.Windows.Forms.MenuStrip,System.String)">
            <summary>
            Searches the specified <c>MenuStrip</c> and returns the <c>ToolStripMenuItem</c> associated with the specified key.
            </summary>
            <param name="menuStrip">The <c>MenuStrip</c> that is to be searched.</param>
            <param name="key">The key used to access the <c>ToolStripMenuItem</c> i.e. the value of the <c>Name</c> property.</param>
            <returns>The <c>ToolStripMenuItem</c> associated with the specified key, if found; otherwise, null.</returns>
        </member>
        <member name="M:Common.General.GetToolStripMenuItem(System.Windows.Forms.ToolStripMenuItem,System.String)">
            <summary>
            Searches ALL <c>ToolStripMenuItem</c> controls associated with the specified <c>ToolStripMenuItem</c> and returns the
            <c>ToolStripMenuItem</c> corresponding to the specified key.
            </summary>
            <param name="toolStripMenuItem">The <c>ToolStripMenuItem</c> this is to be searched.</param>
            <param name="key">The key used to access the <c>ToolStripMenuItem</c> i.e. the value of the <c>Name</c> property.</param>
            <returns>The <c>ToolStripMenuItem</c> associated with the specified key, if found; otherwise, null.</returns>
        </member>
        <member name="T:Common.LogType">
            <summary>
            The type of log associated with the data.
            </summary>
        </member>
        <member name="F:Common.LogType.Watch">
            <summary>
            Recorded watch values.
            </summary>
        </member>
        <member name="F:Common.LogType.Event">
            <summary>
            Event log.
            </summary>
        </member>
        <member name="F:Common.LogType.DataStream">
            <summary>
            Data Stream.
            </summary>
        </member>
        <member name="F:Common.LogType.SimulatedDataStream">
            <summary>
            Simulated Data Stream.
            </summary>
        </member>
        <member name="F:Common.LogType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Common.DataSource">
            <summary>
            The source of the log e.g.: disk file; target hardware etc.
            </summary>
        </member>
        <member name="F:Common.DataSource.Disk">
            <summary>
            Disk file.
            </summary>
        </member>
        <member name="F:Common.DataSource.TargetHardware">
            <summary>
            Target hardware.
            </summary>
        </member>
        <member name="F:Common.DataSource.HeaderLastRetrieved">
            <summary>
            The data originates from the header information associated with the last data file that was retrieved.
            </summary>
        </member>
        <member name="F:Common.DataSource.None">
            <summary>
            The data source is currently un-defined.
            </summary>
        </member>
        <member name="T:Common.WatchFile_t">
            <summary>
            A structure to store the watch variable values that are to be serialized to and de-serialized from disk.
            </summary>
        </member>
        <member name="F:Common.WatchFile_t.Filename">
            <summary>
            The filename of the file containing the serialized watch data.
            </summary>
            <remarks>
            This is updated when the data is read from the file.
            </remarks>
        </member>
        <member name="F:Common.WatchFile_t.FullFilename">
            <summary>
            The fully qualified filename of the file containing the serialized watch data.
            </summary>
            <remarks>
            This is updated when the data is read from the file.
            </remarks>
        </member>
        <member name="F:Common.WatchFile_t.Header">
            <summary>
            The file header information.
            </summary>
        </member>
        <member name="F:Common.WatchFile_t.DataStream">
            <summary>
            The data stream containing the watch variable values.
            </summary>
        </member>
        <member name="M:Common.WatchFile_t.#ctor(Common.Header_t,Common.Communication.DataStream_t)">
            <summary>
            Initialize a new instance of the structure. Copies the specified parameters to the structure and creates the auto-scale limits from the specified watch data 
            frames.
            </summary>
            <param name="header">The file header information.</param>
            <param name="dataStream">The data stream.</param>
        </member>
        <member name="T:Common.EventLogFile_t">
            <summary>
            A structure to store the event records that are to be serialized to and de-serialized from disk.
            </summary>
        </member>
        <member name="F:Common.EventLogFile_t.m_Filename">
            <summary>
            The filename of the file containing serialized event records.
            </summary>
            <remarks>
            This is updated when the data is read from the file.
            </remarks>
        </member>
        <member name="F:Common.EventLogFile_t.m_FullFilename">
            <summary>
            The fully qualified filename of the file containing the serialized event records.
            </summary>
            <remarks>
            This is updated when the data is read from the file.
            </remarks>
        </member>
        <member name="F:Common.EventLogFile_t.m_Header">
            <summary>
            The file header information.
            </summary>
        </member>
        <member name="F:Common.EventLogFile_t.m_EventRecordList">
            <summary>
            A list of the event records.
            </summary>
        </member>
        <member name="M:Common.EventLogFile_t.#ctor(Common.Header_t)">
            <summary>
            Initializes a new instance of the structure. 
            </summary>
            <param name="header">The file header information.</param>
        </member>
        <member name="M:Common.EventLogFile_t.#ctor(Common.Header_t,System.Collections.Generic.List{Common.Configuration.EventRecord})">
            <summary>
            Initializes a new instance of the structure. 
            </summary>
            <param name="header">The file header information.</param>
            <param name="eventRecordList">The list of event records that are to be written to disk file in XML format.</param>
        </member>
        <member name="M:Common.EventLogFile_t.AppendEventRecordList(System.Collections.Generic.List{Common.Configuration.EventRecord})">
            <summary>
            Append the specified list of event records to the existing event record list. Use the signature that specifies the duplicationsFound flag if 
            duplicate entries are to be ignored.
            </summary>
            <param name="eventRecordList">The list of event records that are to be appended to the event record list.</param>
        </member>
        <member name="M:Common.EventLogFile_t.AppendEventRecordList(System.Collections.Generic.List{Common.Configuration.EventRecord},System.Boolean@)">
            <summary>
            Append the specified list of event records to the existing event record list. Use the signature that specifies the duplicationsFound flag if 
            duplicate entries are to be ignored.
            </summary>
            <param name="eventRecordList">The list of event records that are to be appended to the event record list.</param>
            <param name="duplicationsFound">A flag to indicate whether the specified event record list contained duplicated events. True, if duplate entries were 
            found; otherwise, false.</param>
        </member>
        <member name="P:Common.EventLogFile_t.Filename">
            <summary>
            Gets the filename of the file containing serialized event records.
            </summary>
            <remarks>
            This is updated when the data is read from the file.
            </remarks>
        </member>
        <member name="P:Common.EventLogFile_t.FullFilename">
            <summary>
            Gets the fully qualified filename of the file containing the serialized event records.
            </summary>
            <remarks>
            This is updated when the data is read from the file.
            </remarks>
        </member>
        <member name="P:Common.EventLogFile_t.Header">
            <summary>
            The file header information.
            </summary>
        </member>
        <member name="P:Common.EventLogFile_t.EventRecordList">
            <summary>
            A list of the event records.
            </summary>
        </member>
        <member name="T:Common.FileHandling">
            <summary>
            A collection of static methods used to support reading and writing of data from/to disk files.
            </summary>
        </member>
        <member name="M:Common.FileHandling.Load``1(System.String,Common.FileHandling.FormatType)">
            <summary>
            De-serializes the data contained within the specified file into the specified generic type.
            </summary>
            <param name="fullFilename">The fully qualified filename of the file containing the serialized data.</param>
            <param name="formatType">The format that was used to serialize the object: Binary; SOAP; Xml.</param>
            <typeparam name="T">The object type being de-serialized.</typeparam>
            <returns>The de-serialized object.</returns>
        </member>
        <member name="M:Common.FileHandling.Serialize``1(System.String,``0,Common.FileHandling.FormatType)">
            <summary>
            Serializes the specified generic type to the specified filename using the specified format. 
            </summary>
            <param name="fullFilename">The fully qualified file name of the file to which the data is to be serialized.</param>
            <param name="data">The data to be serialized.</param>
            <typeparam name="T">The object type to be serialized.</typeparam>
            <param name="formatType">The format to be used to serialize the generic type: Binary; SOAP; Xml.</param>
        </member>
        <member name="M:Common.FileHandling.LoadDataSet``1(System.String,``0@)">
            <summary>
            Loads the contents of an <c>XML</c> file into the specified <c>DataSet</c> derived class.
            </summary>
            <param name="fullFilename">The fully qualified filename of the XML file.</param>
            <param name="dataSet">The data dictionary.</param>
            <typeparam name="T">The <c>DataSet</c> derived class associated with the XML file.</typeparam>
        </member>
        <member name="T:Common.FileHandling.FormatType">
            <summary>
            Defines the type of serialization format to use when serializing an object to disk.
            </summary>
        </member>
        <member name="F:Common.FileHandling.FormatType.Binary">
            <summary>
            Binary format.
            </summary>
        </member>
        <member name="F:Common.FileHandling.FormatType.SOAP">
            <summary>
            SOAP format.
            </summary>
        </member>
        <member name="F:Common.FileHandling.FormatType.Xml">
            <summary>
            Xml Format.
            </summary>
        </member>
        <member name="F:Common.FileHandling.FormatType.Csv">
            <summary>
            CSV Format
            </summary>
        </member>
        <member name="T:Common.Configuration.WorksetCollectionType">
            <summary>
            The type of workset collection.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollectionType.RecordedWatch">
            <summary>
            The workset collection defining the watch variables that are to be displayed and recorded when viewing watch data.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollectionType.FaultLog">
            <summary>
            The workset collection defining the stream parameters, i.e. watch variables, that are to be recorded within a fault log data stream.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollectionType.Chart">
            <summary>
            The workset defining the watch variables that are to be recorded by the chart recorder.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollectionType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Common.Configuration.WorksetCollectionFile_t">
            <summary>
            The file structure that is serialized to disk.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollectionFile_t.ProjectInformation">
            <summary>
            The project information associated with the worksets.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollectionFile_t.WorksetList">
            <summary>
            A list of the worksets associated with the project.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollectionFile_t.ActiveIndex">
            <summary>
            The index of the active workset.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollectionFile_t.DefaultIndex">
            <summary>
            The index of the default workset.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollectionFile_t.WorksetCollectionType">
            <summary>
            The type of workset collection e.g. Watch, FaultLog, Chart, SelfTest.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollectionFile_t.EntryCountMax">
            <summary>
            The maximum number of entries that each workset can support.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollectionFile_t.ColumnCountMax">
            <summary>
            The maximum number of display columns that each workset can support.
            </summary>
        </member>
        <member name="T:Common.Configuration.Workset_t">
            <summary>
            The workset definition.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset_t.DefaultSampleMultiple">
            <summary>
            The default multiple of the recording interval at which the data is recorded. 
            </summary>
            <remarks>
            This is only relevant to the fault log worksets, however, it must be initialized in all worksets.
            </remarks>
        </member>
        <member name="F:Common.Configuration.Workset_t.Name">
            <summary>
            The name of the workset.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset_t.Count">
            <summary>
            The number of watch variables that are included in the workset.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset_t.WatchElementList">
            <summary>
            A list of the watch identifiers corresponding to the watch elements that are to be processed by the VCU when displaying the current workset.
            </summary>
            <remarks>The watch elements correspond to the block of watch variables that are retrieved from the target hardware.</remarks>
        </member>
        <member name="F:Common.Configuration.Workset_t.WatchItems">
            <summary>
            An array used to determine which watch variables have been added to the workset and whether they exist in the current data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset_t.Column">
            <summary>
            An array containing the information required to construct each column of the real time/replay display when viewing a workset.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset_t.PlotTabPages">
            <summary>
            An array containing the information required to construct each tab page of the plot display when plotting a workset.
            </summary>
            <remarks>This variable is included to allow the user to modify the order in which the watch variables associated with saved data are plotted. As such, 
            the contents of this structure are not checked when comparing worksets. Whenever the definition of the workset is modified the definitions conatined 
            in this variable will be initialized to the values defined in the 'Column' array.</remarks>
        </member>
        <member name="F:Common.Configuration.Workset_t.CountMax">
            <summary>
            The maximum number of watch variables supported by the workset.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset_t.SecurityLevel">
            <summary>
            The security level associated with the workset.
            </summary>
        </member>
        <member name="F:Common.Configuration.Workset_t.SampleMultiple">
            <summary>
            The multiple of the recording interval at which the data is recorded. 
            </summary>
            <remarks>
            This is only relevant to the fault log worksets.
            </remarks>
        </member>
        <member name="M:Common.Configuration.Workset_t.#ctor(System.String,System.Collections.Generic.List{System.Int16},System.Int16,System.Int16,Common.SecurityLevel)">
            <summary>
            Initialize a new instance of the structure. Creates a new workset based upon the specified name and list of watch identifiers.
            </summary>
            <param name="name">The name of the workset.</param>
            <param name="watchIdentifierList">The list of watch identifiers that are to be used to initialize the workset.</param>
            <param name="entryCountMax">The maximum number of entries that the workset can support.</param>
            <param name="columnCountMax">The maximum number of display columns that the workset can support.</param>
            <param name="securityLevel">The security level associated with the workset.</param>
            <remarks>
            All watch identifiers contained within the specified list will appear in the first column of the workset in the order that they appear in the list. The 
            watch element list is sorted by watch identifier value in ascending order.
            </remarks>
        </member>
        <member name="M:Common.Configuration.Workset_t.CreateWatchItems(System.Collections.Generic.List{System.Int16},System.Int32)">
            <summary>
            Create an array of watch items based upon the specified list of watch elements.
            </summary>
            <param name="watchElementList">The list containing the watch elements.</param>
            <param name="oldIdentifierCount">The number of entries in the old identifier lookup table associated with the current data dictionary.</param>
            <returns>The array of watch items showing which watch variables have been added to the workset.</returns>
        </member>
        <member name="M:Common.Configuration.Workset_t.ToString">
            <summary>
            Returns the name of the workset.
            </summary>
            <returns>The name of the workset.</returns>
        </member>
        <member name="M:Common.Configuration.Workset_t.Replicate(Common.Configuration.Workset_t)">
            <summary>
            Replicate the specified workset i.e. produce a copy of the workset that is completely independent of the original.
            </summary>
            <param name="workset">The workset that is to be copied.</param>
        </member>
        <member name="M:Common.Configuration.Workset_t.GetWatchVariableLocation(System.Int16,System.Int16@,System.Int16@)">
            <summary>
            Get the column and row index where the watch variable associated with the specified old identifier is located.
            </summary>
            <remarks>
            If the specified watch variable cannot be found, the <c>columnIndex</c> and <c>rowIndex</c> output parameters are set to 'NotFound'.
            </remarks>
            <param name="oldIdentifier">The watch variable old identifier.</param>
            <param name="columnIndex">The column index associated with the specified watch variable.</param>
            <param name="rowIndex">The row index associated with the specified watch variable.</param>
        </member>
        <member name="T:Common.Configuration.WatchItem_t">
            <summary>
            An individual watch variable list item. Used when adding watch variables to controls such as <c>ListBox</c> controls etc.
            </summary>
        </member>
        <member name="F:Common.Configuration.WatchItem_t.OldIdentifier">
            <summary>
            The old identifier of the watch variable.
            </summary>
        </member>
        <member name="F:Common.Configuration.WatchItem_t.DisplayMask">
            <summary>
            The display mask that is to be applied to bitmask watch variables.
            </summary>
            <remarks>This is only applicable to bitmask watch variables and is only used when defining the plot screen layout.</remarks>
        </member>
        <member name="F:Common.Configuration.WatchItem_t.Added">
            <summary>
            Flag to indicate whether the watch variable has been added to the workset. True, indicates that the the watch variable has been added to the 
            workset; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.Configuration.WatchItem_t.Exists">
            <summary>
            Flag to indicate whether the watch variable exists in the current data dictionary. True, indicates that the watch variable exists; otherwise, false.
            </summary>
        </member>
        <member name="M:Common.Configuration.WatchItem_t.ToString">
            <summary>
            Overrides the ToString() method to return the name/description associated with the watch variable.
            </summary>
            <returns>The name/description of the watch variable.</returns>
        </member>
        <member name="T:Common.Configuration.Column_t">
            <summary>
            A structure that defines the header, old identifiers and chart scale values associated with an individual column of the real time or replay display.
            </summary>
        </member>
        <member name="F:Common.Configuration.Column_t.HeaderText">
            <summary>
            The text that is to be displayed in the column header.
            </summary>
        </member>
        <member name="F:Common.Configuration.Column_t.OldIdentifierList">
            <summary>
            A list of the watch variable old identifiers that are to be displayed in the workset column. The old identifiers are used as these remain fixed between 
            iterations of the data dictionary in the event that watch variables are removed.
            </summary>
        </member>
        <member name="F:Common.Configuration.Column_t.ChartScaleList">
            <summary>
            A list of the chart scaling information associated with each channel of the chart recorder.
            </summary>
        </member>
        <member name="T:Common.Configuration.PlotTabPage_t">
            <summary>
            A structure that defines the header, old identifiers and display masks associated with an individual tab page of the plot display.
            </summary>
        </member>
        <member name="F:Common.Configuration.PlotTabPage_t.HeaderText">
            <summary>
            The tab page header text.
            </summary>
        </member>
        <member name="F:Common.Configuration.PlotTabPage_t.OldIdentifierList">
            <summary>
            A list of the old identifiers corresponding to the watch variables that are to be displayed in the plot tab page. The old identifiers are used as these 
            remain fixed between iterations of the data dictionary in the event that watch variables are removed.
            </summary>
        </member>
        <member name="F:Common.Configuration.PlotTabPage_t.DisplayMaskList">
            <summary>
            The display mask that is to be applied when plotting Bitmask watch variables. For scalar and enumerator watch values the value of the mask will be 
            0xFFFFFFFF, however, for bitmask watch variables the corresponding bit will be set if the plot associated with the bit is to be plotted; otherwise it 
            will be clear.
            </summary>
        </member>
        <member name="T:Common.Configuration.ChartScale_t">
            <summary>
            Scaling information for the chart recorder channel.
            </summary>
        </member>
        <member name="F:Common.Configuration.ChartScale_t.ChartScaleUpperLimit">
            <summary>
            The upper limit of the Y axis associated with the chart recorder channel.
            </summary>
        </member>
        <member name="F:Common.Configuration.ChartScale_t.ChartScaleLowerLimit">
            <summary>
            The lower limit of the Y axis associated with the chart recorder channel.
            </summary>
        </member>
        <member name="F:Common.Configuration.ChartScale_t.Units">
            <summary>
            The engineering units associated with the chart recorder channel.
            </summary>
        </member>
        <member name="T:Common.Configuration.WorksetCollection">
            <summary>
            A class to manage the collection of worksets associated with individual sub-systems.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollection.SleepDeSerialize">
            <summary>
            The sleep period, in ms, after the workset file is de-serialized to allow the file to close. 
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollection.m_WorksetCollectionFile_t">
            <summary>
            The workset file structure that is serialized to disk.
            </summary>
        </member>
        <member name="F:Common.Configuration.WorksetCollection.m_Filename">
            <summary>
            The file name of the file containing the workset definitions.
            </summary>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.#ctor(Common.Configuration.WorksetCollectionType,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the class. Call the Initialize() static method.
            </summary>
            <param name="worksetCollectionType">The type of workset collection.</param>
            <param name="entryCountMax">The maximum number of entries that each workset can support.</param>
            <param name="columnCountMax">The maximum number of display columns that each workset can support.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.Initialize(Common.Configuration.WorksetCollectionType,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the class.
            <list type="number">
            <item><description>Clear the existing list of worksets.</description></item>
            <item><description>Create a baseline workset and add this to the list of worksets.</description></item>
            <item><description>Set the newly created baseline workset to be the default workset.</description></item>
            <item><description>Copy the project information specified in the data dictionary to the project information field.</description></item>
            </list>
            </summary>
            <param name="worksetCollectionType">The type of workset collection.</param>
            <param name="entryCountMax">The maximum number of entries that each workset can support.</param>
            <param name="columnCountMax">The maximum number of display columns that each workset can support.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.Load(System.String)">
            <summary>
            Load and validate the <see cref="T:Common.Configuration.WorksetCollectionFile_t"/> structure contained within the specified workset file.
            </summary>
            <param name="fullFilename">The fully qualified file name of the workset file.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.Edit(System.String,Common.Configuration.Workset_t)">
            <summary>
            Replace the specified workset with the new workset. If the workset specified by <paramref name="worksetName"/> cannot be found, no action is taken.
            </summary>
            <param name="worksetName">The name of the workset that is to be edited.</param>
            <param name="newWorkset">The new workset <seealso cref="T:Common.Configuration.Workset_t"/>.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.Add(Common.Configuration.Workset_t)">
            <summary>
            Add the specified workset.
            </summary>
            <param name="workset">The workset that is to be added to the workset collection.</param>
            <returns>True, if the specified workset was successfully added to the collection; otherise, false.</returns>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.Contains(System.String)">
            <summary>
            Check whether the workset collection contains a workset with the specified name.
            </summary>
            <param name="name">The name of the workset.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.Reset">
            <summary>
            Reset the active workset to the default workset.
            </summary>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.GetWorksetNames">
            <summary>
            Get an object array of the workset names.
            </summary>
            <returns>An list containing the workset names.</returns>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.Serialize(System.String)">
            <summary>
            Serialize, using the SOAP format, the workset collection file structure.
            </summary>
            <param name="fullFilename">The fully qualified file name of the file where the serialized data is to be saved.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.SetActiveWorkset(System.String)">
            <summary>
            Set the active workset to the specified workset. If the specified workset name cannot be found, no action is taken.
            </summary>
            <param name="worksetName">The name of the workset.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.SetDefaultWorkset(System.String)">
            <summary>
            Set the default workset to the specified workset. If the workset specified by <paramref name="worksetName"/> cannot be found, no action is taken.
            </summary>
            <param name="worksetName">The name of the workset.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.Remove(System.String)">
            <summary>
            Remove the specified workset. If the workset specified by <paramref name="worksetName"/> cannot be found, no action is taken.
            </summary>
            <param name="worksetName">The name of the workset that is to be removed.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.CreateBaselineWorkset">
            <summary>
            Create the baseline workset. The baseline workset is a workset that displays the first <c>WatchSize</c> watch variables in the data dictionary. It's primary 
            purpose is to ensure that there is always at least one workset available. Under normal circumstances, once the user has defined a set of worksets the 
            baseline workset has no purpose.
            </summary>
            <returns>The baseline workset.</returns>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.CheckCompatibility(Common.Configuration.WorksetCollectionFile_t)">
            <summary>
            Check whether the specified workset file is compatible with the current data dictionary. For the workset file to be compatible: (a) no watch variables can 
            have been added to or deleted from the data dictionary since the workset was created/updated and (b) the the CountMax fields of all individual worksets and 
            the EntryCountMax field of the <c>WorksetCollectionFile_t</c> structure must be consistent with the <c>WatchSize</c> defined in the current data dictionary.
            </summary>
            <param name="worksetCollectionFile">The workset file retrieved from disk that is to be checked.</param>
            <returns>A flag to indicate whether the workset file is compatible with the current data dictionary. True, if the workset file is compatible; 
            otherwise, false.</returns>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.Update(Common.Configuration.WorksetCollectionFile_t@)">
            <summary>
            For the specified workset file update: (a) the baseline workset; (b) the WatchItems, WatchElementList and CountMax properties of all other worksets and (c) 
            the EntryCountMax field to be compatible with the new data dictionary. Also report any worksets that: (a) contain more watch values than are permitted 
            or (b) include one or more invalid old identifier references.
            </summary>
            <param name="worksetCollectionFile">The structure containing the de-serialized workset file.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.Deserialize(System.String)">
            <summary>
            De-serialize the serialized data.  
            </summary>
            <param name="fullFilename">The fully qualified file name of the file where the serialized data is stored.</param>
            <returns>The <c>WorksetCollectionFile_t</c> structure that was de-serialized from disk.</returns>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.GetIncompatibleOldIdentifierList(Common.Configuration.WorksetCollectionFile_t)">
            <summary>
            Get a list of those old identifiers that are included in the workset file but are not defined in the current data dictionary. 
            </summary>
            <param name="worksetCollectionFile">The structure containing the de-serialized workset file.</param>
            <returns>A list of those old identifiers that are included in the workset file but are not defined in the current data dictionary.</returns>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.GetIncompatibleWorksetList(Common.Configuration.WorksetCollectionFile_t,System.Collections.Generic.List{System.Int16})">
            <summary>
            Get a list of those worksets that contain one or more old identifier references that are not defined in the current data dictionary.
            </summary>
            <param name="worksetCollectionFile">The structure containing the de-serialized workset file.</param>
            <param name="incompatibleOldIdentifierList">A list of list of those old identifiers that are included in the workset file but are not defined in the 
            current data dictionary.</param>
            <returns>A list of those worksets that contain one or more old identifier references that are not defined in the current data dictionary.</returns>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.GetIncompatibleWorksetList(Common.Configuration.WorksetCollectionFile_t,System.Int16)">
            <summary>
            Get a list of those worksets that contain more watch variables than the specified watch size.
            </summary>
            <param name="worksetCollectionFile">The structure containing the de-serialized workset file.</param>
            <param name="watchSize">The permitted number of watch variables, this is defined by the <c>WatchSize</c> field in the <c>ConfigurePTU</c> table of the 
            data dictionary.</param>
            <returns>A list of those worksets that contain more watch variables than the specified watch size.</returns>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.ReportIncompatibleWorksets(System.Collections.Generic.List{Common.Configuration.Workset_t})">
            <summary>
            Report those worksets that contain too many watch variables.
            </summary>
            <param name="invalidWatchSizeWorksetList">A list of those worksets that contain more watch variables than the specified watch size.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.ReportIncompatibleWorksets(System.Collections.Generic.List{Common.Configuration.Workset_t},System.Collections.Generic.List{System.Int16},Common.Configuration.WorksetCollectionType)">
            <summary>
            Report those worksets that contain one or more old identifier references that are not defined in the current data dictionary.
            </summary>
            <param name="invalidOldIdentifierWorksetList">A list of those worksets that contain one or more old identifier references that are not defined in the 
            current data dictionary.</param>
            <param name="invalidOldIdentifierList">A list of the old identifier references included in the workset file that are not defined in the data dictionary.</param>
            <param name="worksetCollectionType">The type of workset being processed.</param>
        </member>
        <member name="M:Common.Configuration.WorksetCollection.OnWorksetCollectionModified(System.Object,System.EventArgs)">
            <summary>
            Raise a <c>WorksetCollectionModified</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="eventArgs">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="E:Common.Configuration.WorksetCollection.WorksetCollectionModified">
            <summary>
            Raised whenever the workset collection is modified.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetCollection.ProjectInformation">
            <summary>
            Gets or sets the project information structure <see cref="T:Common.Configuration.DataDictionaryInformation_t"/>.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetCollection.ActiveName">
            <summary>
            Gets the name of the active workset.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetCollection.ActiveIndex">
            <summary>
            Gets or sets the index of the active workset.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetCollection.DefaultName">
            <summary>
            Gets the name of the default workset.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetCollection.DefaultIndex">
            <summary>
            Gets or sets the index of the default workset.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetCollection.ActiveWorkset">
            <summary>
            Gets the active workset.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetCollection.Worksets">
            <summary>
            Gets the list of the available workset structures <see cref="T:Common.Configuration.Workset_t"/>.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetCollection.ColumnCountMax">
            <summary>
            Gets the maximum number of display columns that each workset can support.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetCollection.EntryCountMax">
            <summary>
            Gets the maximum number of entries that each workset can support.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetCollection.WorksetCollectionType">
            <summary>
            Gets the type of workset collection e.g. Watch, FaultLog, Chart, SelfTest.
            </summary>
        </member>
        <member name="P:Common.Configuration.WorksetCollection.Filename">
            <summary>
            Gets the file name of the file containing the workset definitions.
            </summary>
        </member>
        <member name="T:Common.Configuration.EventVariableTable">
            <summary>
            A class to help access the event variables defined in the <c>EVENTVARIABLES</c> table of the data dictionary. The event variables are accessed using 
            the event variable identifier value.
            </summary>
        </member>
        <member name="M:Common.Configuration.EventVariableTable.#ctor(Common.Configuration.DataDictionary.EVENTVARIABLESDataTable,Common.Configuration.DataDictionary.EVENTENUMBITDataTable)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="eventVariableDataTable">Reference to the <c>EVENTVARIABLES</c> table of the data dictionary.</param>
            <param name="enumBitDataTable">Reference to the <c>EVENTENUMBIT</c> table of the data dictionary i.e. the enumerator/bitmask data table associated with 
            event variables.</param>
        </member>
        <member name="M:Common.Configuration.EventVariableTable.BuildDataTable(Common.Configuration.DataDictionary.EVENTVARIABLESDataTable)">
            <summary>
            Build an array of the event variable records contained within the <c>EVENTVARIABLES</c> table of the data dictionary. This array is used to access the 
            parameters associated with the event variables defined in the table. The array element is mapped to the event variable identifier field of the table.
            </summary>
            <param name="variableDataTable">Reference to the <c>EVENTVARIABLES</c> table of the data dictionary.</param>
            <returns>An array of the records contained within the <c>EVENTVARIABLES</c> table of the data dictionary, if the specified table is valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.EventVariableTable.BuildEnumBitLists(Common.Configuration.DataDictionary.EVENTENUMBITDataTable)">
            <summary>
            Build an array of lists of enumerator/bitmask records associated with each unique <c>ENUMBITID</c> value defined in the <c>EVENTENUMBIT</c> table of 
            the data dictionary. The array element is mapped to the <c>ENUMBITID</c> field of the table.
            </summary>
            <param name="enumBitDataTable">Reference to the enumerator/bitmask table of the data dictionary.</param>
            <returns>The array containing the lists of enumerator/bitmask records, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="T:Common.Configuration.TestMessage_t">
            <summary>
            A structure to store the fields associated with a record from the <c>TESTMESSAGES</c> table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.TestMessage_t.m_TestCase">
            <summary>
            The test case value associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.TestMessage_t.m_TestNumber">
            <summary>
            The test number associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.TestMessage_t.m_HelpIndex">
            <summary>
            The help index corresponding to the test case value and test number combination.
            </summary>
        </member>
        <member name="M:Common.Configuration.TestMessage_t.#ctor(System.Int16,System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="testCase">The test case value associated with the record.</param>
            <param name="testNumber">The test number associated with the record.</param>
            <param name="helpIndex">The help index corresponding to the test case value and test number combination.</param>
        </member>
        <member name="P:Common.Configuration.TestMessage_t.TestCase">
            <summary>
            Gets or sets the test case value associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.TestMessage_t.TestNumber">
            <summary>
            Gets or sets the test number associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.TestMessage_t.HelpIndex">
            <summary>
            Gets or sets the help index corresponding to the test case value and test number combination.
            </summary>
        </member>
        <member name="T:Common.Configuration.Log">
            <summary>
            A structure to store the fields associated with an entry from the <c>LOGS</c> table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.Log.m_Description">
            <summary>
            The description of the log.
            </summary>
        </member>
        <member name="F:Common.Configuration.Log.m_DataStreamTypeIdentifier">
            <summary>
            The type identifier associated with the data stream that is generated by the log.
            </summary>
        </member>
        <member name="F:Common.Configuration.Log.m_DataStreamTypeParameters">
            <summary>
            The parameters associated with the type of data stream that is generated by the log.
            </summary>
        </member>
        <member name="F:Common.Configuration.Log.m_SampleIntervalMs">
            <summary>
            The interval, in ms, at which the data is sampled for this log.
            </summary>
        </member>
        <member name="F:Common.Configuration.Log.m_ChangeStatus">
            <summary>
            A flag that indicates whether new events have been added to the log. True, indicates that new events have been added; false, indicates that no new events 
            have occurred.
            </summary>
        </member>
        <member name="F:Common.Configuration.Log.m_MaxTasks">
            <summary>
            The maximum number of tasks associated with the log.
            </summary>
        </member>
        <member name="F:Common.Configuration.Log.m_MaxEventsPerTask">
            <summary>
            The maximum number of events per task.
            </summary>
        </member>
        <member name="M:Common.Configuration.Log.#ctor">
            <summary>
            Initialize a new instance of the class. 
            </summary>
        </member>
        <member name="M:Common.Configuration.Log.ToString">
            <summary>
            Override the ToString() method to return the description of the log.
            </summary>
            <returns>The log description.</returns>
        </member>
        <member name="P:Common.Configuration.Log.Description">
            <summary>
            Gets or sets the description of the log.
            </summary>
        </member>
        <member name="P:Common.Configuration.Log.DataStreamTypeIdentifier">
            <summary>
            Gets or sets the data stream type identifier associated with the data stream that is generated by the log.
            </summary>
        </member>
        <member name="P:Common.Configuration.Log.DataStreamTypeParameters">
            <summary>
            Gets or sets the parameters associated with the type of data stream that is generated by the log.
            </summary>
        </member>
        <member name="P:Common.Configuration.Log.SampleIntervalMs">
            <summary>
            Gets or sets the interval, in ms, at which the data is sampled for this log.
            </summary>
        </member>
        <member name="P:Common.Configuration.Log.ChangeStatus">
            <summary>
            Gets or sets the flag that indicates whether new events have been added to the log. True, indicates that new events have been added; false, indicates that no new events have occurred.
            </summary>
        </member>
        <member name="P:Common.Configuration.Log.MaxTasks">
            <summary>
            Gets or sets the maximum number of tasks associated with the log.
            </summary>
        </member>
        <member name="P:Common.Configuration.Log.MaxEventsPerTask">
            <summary>
            Gets or sets the maximum number of events per task.
            </summary>
        </member>
        <member name="T:Common.Configuration.DataDictionaryInformation_t">
            <summary>
            A structure to store the fields associated with the <c>FILEINFO</c> data table of the data dictionary i.e. the project information fields.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataDictionaryInformation_t.m_DataDictionaryBuilderVersion">
            <summary>
            The version number of the data dictionary builder utility used to build the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataDictionaryInformation_t.m_DataDictionaryName">
            <summary>
            The name of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataDictionaryInformation_t.m_ProjectIdentifier">
            <summary>
            The project identifier associated with the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataDictionaryInformation_t.m_WatchIdentifierCount">
            <summary>
            The number of watch variables in the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.DataDictionaryInformation_t.m_Version">
            <summary>
            The version number of the data dictionary.
            </summary>
        </member>
        <member name="M:Common.Configuration.DataDictionaryInformation_t.#ctor(System.String,System.String,System.String,System.Int16,System.String)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="dataDictionaryBuilderVersion">The version number of the data dictionary builder utility used to build the data dictionary.</param>
            <param name="dataDictionaryName">The name of the data dictionary.</param>
            <param name="projectIdentifier">The project identifier associated with the data dictionary.</param>
            <param name="watchIdentifierCount">The number of watch variables in the data dictionary.</param>
            <param name="version">The version number of the data dictionary.</param>
        </member>
        <member name="P:Common.Configuration.DataDictionaryInformation_t.DataDictionaryBuilderVersion">
            <summary>
            Gets or sets the version number of the data dictionary builder utility used to build the data dictionary.
            </summary>
        </member>
        <member name="P:Common.Configuration.DataDictionaryInformation_t.DataDictionaryName">
            <summary>
            Gets or sets the name of the data dictionary.
            </summary>
        </member>
        <member name="P:Common.Configuration.DataDictionaryInformation_t.ProjectIdentifier">
            <summary>
            Gets or sets the project identifier associated with the data dictionary.
            </summary>
        </member>
        <member name="P:Common.Configuration.DataDictionaryInformation_t.WatchIdentifierCount">
            <summary>
            Gets or sets the number of watch variables in the data dictionary.
            </summary>
        </member>
        <member name="P:Common.Configuration.DataDictionaryInformation_t.Version">
            <summary>
            Gets or sets the version number of the data dictionary.
            </summary>
        </member>
        <member name="T:Common.Communication.ICommunicationWatch">
            <summary>
            An interface to define the communication methods associated with the watch sub-system - Watch.dll.
            </summary>
        </member>
        <member name="M:Common.Communication.ICommunicationWatch.SendVariable(System.Int16,System.Int16,System.Double)">
            <summary>
            Write the specified data to the watch variable specified by the <paramref name="dictionaryIndex"/> parameter.
            </summary>
            <param name="dictionaryIndex">The dictionary index.</param>
            <param name="dataType">The data type.</param>
            <param name="data">The data.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.CloseCommunication() method is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationWatch.SetWatchElements(System.Collections.Generic.List{System.Int16})">
            <summary>
            Map the watch identifiers listed in <paramref name="watchElementList"/> to the watch element array monitored by the target hardware.
            </summary>
            <remarks> The number of watch identifiers in the list must mot exceed <c>WatchSize</c>.</remarks>
            <param name="watchElementList">The list containing the watch identifiers that are to be mapped to each element of the watch element array.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.SetWatchElements() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationWatch.UpdateWatchElements(System.Boolean)">
            <summary>
            Retrieve the watch elements from the target hardware.
            </summary>
            <remarks>The watch elements are the watch values that are being monitored by the target hardware as defined by the <c>SetWatchElements()&gt; method.</c>
            </remarks>
            <returns>The retrieved watch element table, if successful; otherwise, null.</returns>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.UpdateElements() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationWatch.UpdateWatchVariableTable(Common.Communication.WatchElement_t[])">
            <summary>
            Update the watch variable lookup table with the latest watch element data retrieved from the target hardware.
            </summary>
            <param name="watchElements">The watch element table retrieved from the target hardware.</param>
        </member>
        <member name="M:Common.Communication.ICommunicationWatch.GetChartConfiguration">
            <summary>
            Get the watch variable identifiers of the watch variables that are currently assigned to the chart recorder channels.
            </summary>
            <returns>An array of the watch variable identifiers corresponding to the watch variables that are currently assigned to the chart recorder channels.</returns>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetChartIndex() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationWatch.ConfigureChartRecorderChannels(System.Int16[])">
            <summary>
            Configure the chart recorder channels i.e. assign each channel of the chart recorder to a specific watch variable.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from a call to the PTUDLL32.SetChartIndex() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="T:Common.WinHlp32">
            <summary>
            Class to support the display of Windows '.hlp' files using the WinHlp32 help program available from the Microsoft Download Centre.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.MarginRightHelpWindow">
            <summary>
            The right margin associated with the Windows help window. Value: 2.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.MarginLeftHelpWindow">
            <summary>
            The left margin associated with the Windows help window. Value: 2.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.MarginTopHelpWindow">
            <summary>
            The top margin associated with the Windows help window. Value: 2.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.MarginBottomHelpWindow">
            <summary>
            The bottom margin associated with the Windows help window. Value: 10.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.HelpQuit">
            <summary>
            Inform Windows Help that it is no longer needed. If no other applications have asked for help, Windows closes Windows Help. Value: 2.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.HelpContextPopup">
            <summary>
            Display the topic identified by the specified context identifier defined in the [MAP] section of the .hpj file in a pop-up window. Value: 8.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.HelpContext">
            <summary>
            Display the topic identified by the specified context identifier defined in the [MAP] section of the .hpj file. Value: 1.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.HelpSetPopupPosition">
            <summary>
            Set the position of the subsequent pop-up window. The dwData parameter must contain the position data. Use MAKELONG to concatenate the horizontal and 
            vertical coordinates into a single value. The pop-up window is positioned as if the mouse cursor were at the specified point when the pop-up window was
            invoked. Value: 0xD.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.HelpSetWindowPosition">
            <summary>
            Display the Windows Help window, if it is minimized or in memory, and sets its size and position as specified. The deData parameter must contain the address 
            of a HELPWININFO structure that specifies the size and position of either a primary or secondary Help window. Value: 0x203.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.HWND_BOTTOM">
            <summary>
            SetWindowsPos - hWndInsertAfter. Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost window, the window loses its 
            topmost status and is placed at the bottom of all other windows. Value: 1.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.HWND_NOTOPMOST">
            <summary>
            SetWindowsPos - hWndInsertAfter. Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the 
            window is already a non-topmost window. Value: -2.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.HWND_TOP">
            <summary>
            SetWindowsPos - hWndInsertAfter. Places the window at the top of the Z order. Value: 0.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.HWND_TOPMOST">
            <summary>
            SetWindowsPos - hWndInsertAfter. Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated. 
            Value: -1.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.SWP_NOZORDER">
            <summary>
            SetWindowsPos - uFlags. Retains the current Z order (ignores hWndInsertAfter parameter). Value: 0x0004.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.SWP_SHOWWINDOW">
            <summary>
            SetWindowsPos - uFlags. Displays the window. Value: 0x0040.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.SWP_NOACTIVATE">
            <summary>
            SetWindowsPos - uFlags. Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or 
            non-topmost group (depending on the setting of the hWndInsertAfter parameter). Value: 0x0010.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.SWP_NOSIZE">
            <summary>
            SetWindowsPos - uFlags. Retains the current size (ignores the cx and cy parameters). Value: 0x0001.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.SWP_NOMOVE">
            <summary>
            SetWindowsPos - uFlags. Retains the current position (ignores X and Y parameters). Value: 0x0002.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.WindowsHelpWindowName">
            <summary>
            The name of the Windows help window.
            </summary>
        </member>
        <member name="M:Common.WinHlp32.WinHelp(System.Int32,System.String,System.Int16,System.Int32)">
            <summary>
            Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.
            </summary>
            <remarks>Before closing the window that requested help, the application must call WinHelp with the uCommand parameter set to HELP_QUIT. Until all applications
            have done this, Windows Help will not terminate. Note that calling Windows Help with the HELP_QUIT command is not necessary if you used the HELP_CONTEXTPOPUP 
            command to start Windows Help. This function fails if called from any context but the current user.</remarks>
            <param name="hwnd">A handle to the window requesting help. The WinHelp function uses this handle to keep track of which applications have requested help. 
            If the uCommand parameter specifies HELP_CONTEXTMENU or HELP_WM_HELP, hWndMain identifies the control requesting help.</param>
            <param name="lpHelpFile">The address of a null-terminated string containing the path, if necessary, and the name of the Help file that WinHelp is to
            display.</param>
            <param name="wCommand">The type of help requested.</param>
            <param name="dwData">Additional data. The value used depends on the value of the uCommand parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Common.WinHlp32.FindWindow(System.String,System.String)">
            <summary>
            Get the handle to the window with the specified name.
            </summary>
            <param name="className">Specify <c>null</c>.</param>
            <param name="windowName">The name of the window.</param>
            <returns></returns>
        </member>
        <member name="M:Common.WinHlp32.SetWindowPos(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Set the position of the window.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of 
            the values defined by the SetWindowsPos - hWndInsertAfter constant values.</param>
            <param name="x">The new position of the left side of the window, in client coordinates.</param>
            <param name="y">The new position of the top of the window, in client coordinates.</param>
            <param name="cx">The new width of the window, in pixels.</param>
            <param name="cy">The new height of the window, in pixels. </param>
            <param name="uFlags">The window sizing and positioning flags. This parameter can be a combination of the values defined by the SetWindowsPos - uFlags 
            constant values.</param>
            <returns></returns>
        </member>
        <member name="M:Common.WinHlp32.GetWindowRect(System.Int32,Common.WinHlp32.Rect@)">
            <summary>
            Get the size of the specified window.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="windowRect">The size of the window.</param>
            <returns></returns>
        </member>
        <member name="F:Common.WinHlp32.m_FullQualifiedHelpFilename">
            <summary>
            The fully qualified filename of the help file (.hlp).
            </summary>
        </member>
        <member name="F:Common.WinHlp32.m_IsInitialized">
            <summary>
            A flag to indicate whether the WinHlp32 help engine has been initialized. True, if the help engine has been initialized; otherwise, false.
            </summary>
        </member>
        <member name="M:Common.WinHlp32.Initialize(System.String)">
            <summary>
            Initialize the WinHlp32 help engine.
            </summary>
            <param name="helpFilename">The fully qualified filename of the help  file.</param>
            <exception cref="T:System.ArgumentException">Thrown if the help file does not exist or the extension is invalid.</exception>
        </member>
        <member name="M:Common.WinHlp32.Close(System.Int32)">
            <summary>
            Close the WinHlp32 help engine.
            </summary>
            <param name="winHandle">A handle to the window making the request.</param>
        </member>
        <member name="M:Common.WinHlp32.ShowHelpWindow(System.Int32,System.Int32,System.Int32)">
            <summary>
            Show the help topic in a separate window within the form/control associated with the specified handle.
            </summary>
            <remarks>The WinHlp32 help engine must have been initialized prior to calling this method.</remarks>
            <param name="winHandle">A handle to the control/form that defines the boundary of the help window.</param>
            <param name="hWndInsertAfter">A value that defines the Z order of the help window. HWND_BOTTOM, HWND_NOTOPMOST, HWND_TOP, HWND_TOPMOST.</param>
            <param name="helpIndex">The help index corresponding to the topic that is to be shown in the help window.</param>
        </member>
        <member name="M:Common.WinHlp32.HideHelpWindow(System.Int32)">
            <summary>
            Hide the help topic.
            </summary>
            <remarks>The WinHlp32 help engine must have been initialized prior to calling this method.</remarks>
            <param name="winHandle">A handle to the window requesting help.</param>
        </member>
        <member name="M:Common.WinHlp32.ShowPopup(System.Int32,System.Int32)">
            <summary>
            Show the help topic in a pop-up window.
            </summary>
            <remarks>The WinHlp32 help engine must have been initialized prior to calling this method.</remarks>
            <param name="winHandle">A handle to the window requesting help.</param>
            <param name="helpIndex">The help index corresponding to the topic that is to be shown in the pop-up window.</param>
        </member>
        <member name="P:Common.WinHlp32.IsInitialized">
            <summary>
            Gets the flag that indicates whether the WinHlp32 help engine has been initialized. True, if the help engine has been initialized; otherwise, false.
            </summary>
        </member>
        <member name="T:Common.WinHlp32.Rect">
            <summary>
            A structure to store the size of the window that was retrieved using the user32.GetWindowRect() method.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.Rect.Left">
            <summary>
            The position of the left side of the window, in client coordinates.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.Rect.Top">
            <summary>
            >The position of the top of the window, in client coordinates.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.Rect.Right">
            <summary>
            The position of the right side of the window, in client coordinates.
            </summary>
        </member>
        <member name="F:Common.WinHlp32.Rect.Bottom">
            <summary>
            The position of the bottom of the window, in client coordinates.
            </summary>
        </member>
        <member name="T:Common.Forms.FormAddComments">
            <summary>
            Class to enable the user to add the username and comments fields to the specified file header.
            </summary>
        </member>
        <member name="F:Common.Forms.FormAddComments.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormAddComments.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.Forms.FormAddComments.m_Header">
            <summary>
            Class copy of the header parameter.
            </summary>
        </member>
        <member name="F:Common.Forms.FormAddComments.m_DateTimeCreated">
            <summary>
            Class copy of parameter of the date and time parameter.
            </summary>
        </member>
        <member name="F:Common.Forms.FormAddComments.m_UserName">
            <summary>
            The name of the user.
            </summary>
        </member>
        <member name="F:Common.Forms.FormAddComments.m_Comments">
            <summary>
            The comments entered into the Comments <c>TextBox</c>.
            </summary>
        </member>
        <member name="M:Common.Forms.FormAddComments.#ctor(Common.Header_t,System.DateTime)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="header">The header to which the user entered data is to be appended.</param>
            <param name="dateTimeCreated">The date and time to be used as the reference for the date and time that the file was created.</param>
        </member>
        <member name="M:Common.Forms.FormAddComments.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormAddComments.FormAddComments_Shown(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <c>Shown</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormAddComments.m_BtnOK_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the OK button <c>Click</c> event. Updates the properties and then closes the form.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="P:Common.Forms.FormAddComments.UserName">
            <summary>
            Gets the name, as entered into the Name <c>TextBox</c>.
            </summary>
        </member>
        <member name="P:Common.Forms.FormAddComments.Comments">
            <summary>
            Gets or sets the comments field of the form.
            </summary>
        </member>
        <member name="P:Common.Forms.FormAddComments.DateTimeCreated">
            <summary>
            Gets or sets the date and time, as a .NET <c>DateTime</c> object, to be used as the reference for the creation date and time of the log file.
            </summary>
        </member>
        <member name="P:Common.Forms.FormAddComments.Header">
            <summary>
            Gets or sets the header associated with the form.
            </summary>
        </member>
        <member name="T:Common.Forms.FormConfigure">
            <summary>
            Parent class for the forms that are used to configure the chart recorder and fault log data streams.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_WorksetToCompare">
            <summary>
            The workset that is to be compared with the worksets contained within the list.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_WorksetFromVCU">
            <summary>
            The workset that was initially uploaded from the VCU.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_SelectedWorkset">
            <summary>
            A record of the selected workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_SelectedWorksetAfterDeletion">
            <summary>
            A record of the new selected workset after the original selected workset has been deleted.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_ModifyState">
            <summary>
            The current state of the form.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_UseTextBoxAsNameSource">
            <summary>
            <para>A flag that specifies whether the workset name should be derived from the TextBox or the ComboBox control when the workset is
            saved.</para><para>True, if the TextBox is the source of the workset name; otherwise, false, if the ComboBox is the source of the workset name.
            Initialized to false.</para>
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_OriginalDefaultWorksetName">
            <summary>
            The name of the default workset associated with the workset collection that was passed to the contructor i.e. the name of the original default workset.
            This is required to undo the 'Set As Default' operation.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_SelectedWorksetOriginalSecurityLevel">
            <summary>
            The original security level of the selected workset. This is required to undo the 'Set As Default' operation. 
            </summary>
        </member>
        <member name="M:Common.Forms.FormConfigure.#ctor">
            <summary>
            Initializes an new instance of the form. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Common.Forms.FormConfigure.#ctor(Common.Configuration.WorksetCollection)">
            <summary>
            Initializes an new instance of the form.
            </summary>
            <param name="worksetCollection">The workset collection that is to be managed.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.m_ComboBoxWorkset_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for <c>ComboBox</c> control <c>SelectedIndexChanged</c> event.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.m_TSBUpload_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Download' <c>ToolStripButton</c> <c>Click</c> event. The logic is defined in the child class.
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.m_TSBSave_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Save' <c>ToolStripButton</c> <c>Click</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.m_TSBEdit_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Edit' <c>ToolStripButton</c> <c>Click</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.m_TSBNew_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'New' <c>ToolStripButton</c> <c>Click</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.m_TSBCopy_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Copy' <c>ToolStripButton</c> <c>Click</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.m_TSBRename_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Rename' <c>ToolStripButton</c> <c>Click</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.m_TSBDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Delete' <c>ToolStripButton</c> <c>Click</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.m_TSBSetAsDefault_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Set As Default' <c>ToolStripButton</c> <c>Click</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.m_TSBOverrideSecurity_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the 'Override Security' <c>ToolStripButton</c> <c>Click</c> event. 
            </summary>
            <param name="sender">Reference to the object that raised the event.</param>
            <param name="e">Parameter passed from the object that raised the event.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.UploadWorkset(Common.Configuration.Workset_t)">
            <summary>
            Upload the specified workset to the VCU. The logic is performed in the child class.
            </summary>
            <param name="workset">The workset that is to be downloaded to the VCU.</param>
            <returns>A flag that indicates whether the workset was successfully downloaded to the VCU. True, if the VCU update was successful; otherwise, false.</returns>
        </member>
        <member name="M:Common.Forms.FormConfigure.SetModifyState(Common.Forms.FormConfigure.ModifyState)">
            <summary>
            Set the modify state to the specified state.
            </summary>
            <remarks>The Enabled property of the menu option that allows the user to modify the Y axis limits of the individual chart recorder channels is linked 
            directly to the ModifyEnabled property of the parent class.</remarks>
            <param name="modifyState">The required modify state.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.StartOperation(System.Windows.Forms.ToolStripButton,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>1.  Sets the specified <c>ToolStripButton</c> <c>Image</c> property to the <c>Resources.Edit_Undo</c> image.</para>
            <para>2.  Asserts the specified <c>ToolStripButton</c> <c>Checked</c> and <c>Enabled</c> properties.</para>
            <para>3.  Sets the <c>m_CreateMode</c> member flag to the state defined by the <c>createMode</c> parameter.</para>
            <para>4.  Sets the <c>ModifyEnabled</c> property to the state defined by the <c>allowModify</c> parameter.</para>
            <para>5.  Sets the <c>Enabled</c> property of the 'Workset' <c>TextBox</c> to the state defined by the <c>allowNameEdit</c> parameter.</para>
            </summary>
            <param name="toolStripButton">The <c>ToolStripButton</c> control corresponding to the current operation.</param>
            <param name="createMode">The required state of the <c>m_CreateMode</c> member variable.</param>
            <param name="allowModify">The required state of the <c>ModifyEnabled</c> property.</param>
            <param name="allowNameEdit">The required state of the <c>Enabled</c> property associated with the 'Workset' <c>TextBox</c>.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.ConvertToWorkset(System.String)">
            <summary>
            Convert the current user settings to a workset.
            </summary>
            <param name="worksetName">The name of the workset.</param>
            <returns>The user settings converted to a workset.</returns>
        </member>
        <member name="M:Common.Forms.FormConfigure.ClearListBoxColumnItems">
            <summary>
            Clear the items in the 'Column' ListBox controls.
            </summary>
        </member>
        <member name="M:Common.Forms.FormConfigure.CompareWorkset(Common.Configuration.Workset_t)">
            <summary>
            Predicate function called by the <c>List.Find()</c> method to return a workset that matches the specified workset, ignoring the Name, SecurityLevel, 
            HeaderText and TabPagePlots fields of each workset. 
            </summary>
            <param name="workset">The list item that is to be processed.</param>
            <returns>True, if the specified item meets the logic requirements given in the function; otherwise false.</returns>
        </member>
        <member name="M:Common.Forms.FormConfigure.LoadWorkset(Common.Configuration.Workset_t)">
            <summary>
            Load the specified workset.
            </summary>
            <param name="workset">The workset that is to be processed.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.EnableApplyAndOKButtons">
            <summary>
            Enable the 'Save' button and clear the status message provided at least one watch variable has been selected and the workset name has been
            defined; otherwise, disable the 'Save' button and write a status message.
            </summary>
        </member>
        <member name="M:Common.Forms.FormConfigure.SetEnabledToolStripButtons(System.Boolean)">
            <summary>
            Set the Enabled property of the: Edit, New, Copy, Rename, Delete, Set As Default, and Override Security buttons to the specified state and disable the
            'Save' button. If the specified state is true, then, for the: Edit, Rename, Delete and Override Security the user must have sufficient privileges in order
            to enable the buttons. For the 'Set As Default' button, the user must be logged into, at least, the Security.SecurityLevelHighest security level and the
            currently selected workset must not be the default workset.
            </summary>
            <remarks>The member variables <c>m_SelectedWorkset</c> and <c>m_WorksetCollection</c>must be initialized before calling this method.</remarks>
            <param name="enabled">The required state of the Enabled property.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.ClearCheckedToolStripButtons">
            <summary>
            Clear the Checked property of the: Edit, New, Copy, Rename, Delete, Set As Default, and Override Security buttons.
            </summary>
        </member>
        <member name="M:Common.Forms.FormConfigure.CompareWorkset(Common.Configuration.Workset_t,Common.Configuration.Workset_t)">
            <summary>
            Compare the two worksets, ignoring the Name, SecurityLevel, HeaderText and TabPagePlots fields of each workset.
            </summary>
            <param name="worksetA">The first workset that is to be compared.</param>
            <param name="worksetB">The second workset that is to be compared.</param>
            <returns>True, if the worksets are identical; otherwise, false.</returns>
        </member>
        <member name="M:Common.Forms.FormConfigure.ConfigurationModified">
            <summary>
            Compare the current chart recorder channel settings with the workset that was downloaded from the VCU and return a flag that indicates whether the current 
            settings are different from the downloaded workset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Forms.FormConfigure.CompareName(Common.Configuration.Workset_t)">
            <summary>
            Predicate function called by the <c>List.Find()</c> method to return a workset that matches the Name variable of the m_WorksetToCompare workset.
            </summary>
            <param name="workset">The workset list item that is to be processed.</param>
            <returns>True if the specified item meets the logic requirements given in the function; otherwise false.</returns>
        </member>
        <member name="M:Common.Forms.FormConfigure.CreateNewWorkset">
            <summary>
            Create a new, empty chart recorder/fault log workset.
            </summary>
        </member>
        <member name="M:Common.Forms.FormConfigure.ComboBoxAddWorksets(System.Windows.Forms.ComboBox,Common.Configuration.WorksetCollection)">
            <summary>
            Add the worksets contained within the specified workset collection to the <c>Items</c> property of the specified <c>ComboBox</c> control.
            </summary>
            <param name="comboBox">The <c>ComboBox</c> control that it to be processed.</param>
            <param name="worksetCollection">The workset collection containing the worksets that are to be added.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.UpdateFunctionKey(System.Windows.Forms.ToolStripButton,System.String,System.String,System.Drawing.Bitmap)">
            <summary>
            Update the Text, ToolTipText and Image of the specified function key.
            </summary>
            <param name="functionKey">The function key to be displayed.</param>
            <param name="text">The text that is to appear on the function key.</param>
            <param name="toolTipText">The tool-tip text associated with the function key.</param>
            <param name="image">The image that is to appear on the function key.</param>
        </member>
        <member name="M:Common.Forms.FormConfigure.UndoDelete">
            <summary>
            Undo the Delete operation by:
            <para>1.  deserialising the WorksetCollection that was last saved to disk,</para>
            <para>2.  updating the ComboBox control with the list of worksets contained within the deserialised collection,</para>
            <para>3.  loading the workset that had been selected for deletion, and</para>
            <para>4.  updating the name on the ComboBox control to the workset that had been selected for deletion.</para>
            </summary>
        </member>
        <member name="M:Common.Forms.FormConfigure.UndoSetAsDefault">
            <summary>
            Undo the 'Set As Default' operation by:
            <para>1.  Setting the initial default workset as the default workset.</para>
            <para>2.  Restoring the security level of the updated default workset to its initial value.</para>
            </summary>
        </member>
        <member name="M:Common.Forms.FormConfigure.UndoOverrideSecurity">
            <summary>
            Undo the 'OverrideSecurity' operation by:
            <para></para>
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.Forms.FormConfigure.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_ToolTip">
            <summary>
            Reference to the <c>ToolTip</c> control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_ToolStrip">
            <summary>
            Reference to the <c>ToolStrip</c> control.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_TSBSave">
            <summary>
            Reference to the 'Save' <c>ToolStripButton</c>.
            </summary>
            <remarks>Allow the FormChangeChartScale class to modify the Enabled property of this <c>ToolStripButton</c> control.</remarks>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_TSBEdit">
            <summary>
            Reference to the 'Edit' <c>ToolStripButton</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_TSBNew">
            <summary>
            Reference to the 'New' <c>ToolStripButton</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_TSBCopy">
            <summary>
            Reference to the 'Copy' <c>ToolStripButton</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_TSBRename">
            <summary>
            Reference to the 'Rename' <c>ToolStripButton</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_TSBUpload">
            <summary>
            Reference to the 'Download' <c>ToolStripButton</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_TSBDelete">
            <summary>
            Reference to the 'Delete' <c>ToolStripButton</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_TSBSetAsDefault">
            <summary>
            Reference to the 'Set As Default' <c>ToolStripButton</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_TSBOverrideSecurity">
            <summary>
            Reference to the 'Override Security' <c>ToolStripButton</c>.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_PictureBoxDefault">
            <summary>
            Reference to the <c>Image</c> that identifies the current workset as the default workset.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.m_ComboBoxWorkset">
            <summary>
            Reference to the 'Workset Name' <c>ComboBox</c> control.
            </summary>
        </member>
        <member name="T:Common.Forms.FormConfigure.ModifyState">
            <summary>
            The current modify state of the form.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.ModifyState.Configure">
            <summary>
            Configure.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.ModifyState.Edit">
            <summary>
            Edit mode.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.ModifyState.Create">
            <summary>
            Create mode.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.ModifyState.Copy">
            <summary>
            Copy mode.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.ModifyState.Rename">
            <summary>
            Rename mode.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.ModifyState.Delete">
            <summary>
            Delete mode.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.ModifyState.SetAsDefault">
            <summary>
            Set As Default mode.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.ModifyState.OverrideSecurity">
            <summary>
            Override Security mode.
            </summary>
        </member>
        <member name="F:Common.Forms.FormConfigure.ModifyState.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Common.CsvSerializer">
            <summary>
            Serializes objects into CSV documents. The Common.CsvSerializer class controls how objects are encoded into CSV.
            </summary>
            <remarks>At present, this CsvSerializer only supports serialization of the event log structure EventLogFile_t.</remarks>
        </member>
        <member name="F:Common.CsvSerializer.FormatStringNumeric">
            <summary>
            The .NET format string used to display the Value property of the scalar user control.
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FormatStringFieldGeneralNumber">
            <summary>
            The format string, converted to lower case, used in the data dictionary to represent a general number. Value: "general number";
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.InvalidValueAsString">
            <summary>
            The string representation of an invalid numeric value (Not a Number). Value: "NaN".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.CSVRecordTypeEventRecord">
            <summary>
            The string representation used to identify the CSV Record Type as an <c>EventRecord</c>. Value: "EventRecord". 
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.CSVRecordTypeEventVariable">
            <summary>
            The string representation used to identify the CSV Record Type as an <c>EventVariable</c>. Value: "EventVariable". 
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameCSVRecordType">
            <summary>
            The name of the field that specifies the CSV record type associated with the current line of text. Value: "CSVRecordType".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameIdentifier">
            <summary>
            The name of the field that specifies the identifier associated with the current event. Value: "Identifier".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameHelpIndex">
            <summary>
            The name of the field that specifies the help index associated with the current event. Value: "HelpIndex".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameDescription">
            <summary>
            The name of the field that specifies the description of the current event. Value: "Description".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameLogIdentifier">
            <summary>
            The name of the field thst specifies the log associated with the current event. Value: "LogIdentifier".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameCarIdentifier">
            <summary>
            The name of the field that specifies the car identifier associated with the current event. Value: "CarIdentifier".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameDate">
            <summary>
            The name of the field that specifies the date of the event. Value: "Date".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameTime">
            <summary>
            The name of the field that specifies the time of the event. Value: "Time".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameDateTime">
            <summary>
            The name of the field that specifies the date and time of the event. Value: "DateTime".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameDay">
            <summary>
            The name of the field that specifies the day of the week associated with the event. Value: "Day".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameStreamSaved">
            <summary>
            The name of the bool field that specifies whether a datastream was saved or not for the current event. Value: "StreamSaved". 
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameStreamNumber">
            <summary>
            The name of the field that specifies the reference number of the datastream, if one was saved for the current event. Value: "StreamNumber".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameEventVariableCount">
            <summary>
            The name of the field that specifies the number of event variables associated with the current event. Value: "EventVariableCount".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameVariableType">
            <summary>
            The name of the field that specifies the VariableType associated with the current event variable. Value: "VariableType".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameEventVariableIdentifier">
            <summary>
            The name of the field that specifies the Identifier associated with the current event variable. Value: "Identifier".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameName">
            <summary>
            The name of the field that specifies the Name of the current event variable. Value: "Name".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameValueFromTarget">
            <summary>
            The name of the field that specifies the ValueFromTarget associated with the current event variable. Value: "ValueFromTarget".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameUnits">
            <summary>
            The name of the field that specifies the Units associated with the current event variable. Value: "Units".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameFailureBeginning">
            <summary>
            The name of the field that specifies the time, as a Unix Timestamp, that the event occurred. Value: "FailureBeginning". Value: "".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameFailureEnd">
            <summary>
            The name of the field that specifies the time, as a Unix Timestamp, that the event was cleared. Value: "FailureEnd". Value: "".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameSubSystemID">
            <summary>
            The name of the field that specifies the sub system. Value: "SubSystemID". Value: "".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameEventID">
            <summary>
            The name of the field that specifies the event code (1 ... 1023). Value: "EventID". Value: "".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameTimeInaccurate">
            <summary>
            The name of the field that specifies whethet the time stamps are not using synchronized time system.  Value: "TimeInaccurate".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameDSTFlag">
            <summary>
            The name of the field that specifies whether Daylight Saving Time is active or not: 0x00 = No Active DST, 0x01 = Set Time DST Active , 0x10 = Reset Time
            DST Active, 0x11 = Set and Reset DST Active. Value: "DSTFlag".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameReserved">
            <summary>
            Reserved for future use. Value: "Reserved".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameNumberOfRecords">
            <summary>
            The name of the field that specifies the number of event records in the CSV file. Value: "NumberOfRecords".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameFirstRecordIndex">
            <summary>
            The name of the field that specifies the index of the first event record in the CSV file. Value: "FirstRecordIndex".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldNameLastRecordIndex">
            <summary>
            The name of the field that specifies the index of the last event record in the CSV file. Value: "LastRecordIndex".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordEventIndex">
            <summary>
            Key to access the EventIndex property of an EventRecord. Value: "EventIndex".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordHelpIndex">
            <summary>
            Key to access the HelpIndex property of an EventRecord. Value: "HelpIndex".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordDescription">
            <summary>
            Key to access the Description property of an EventRecord. Value: "Description".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordStreamSaved">
            <summary>
            Key to access the StreamSaved property of an EventRecord. Value: "StreamSaved".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordStreamNumber">
            <summary>
            Key to access the StreamNumber property of an EventRecord. Value: "StreamNumber".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordCarIdentifier">
            <summary>
            Key to access the CarIdentifier property of an EventRecord. Value: "CarIdentifier".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordLogIdentifier">
            <summary>
            Key to access the LogIdentifier property of an EventRecord. Value: "LogIdentifier".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordIdentifier">
            <summary>
            Key to access the Identifier property of an EventRecord. Value: "Identifier".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordDate">
            <summary>
            Key to access the Date property of an EventRecord. Value: "Date".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordTime">
            <summary>
            Key to access the Time property of an EventRecord. Value: "Time".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordDateTime">
            <summary>
            Key to access the DateTime property of an EventRecord. Value: "DateTime".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventRecordEventVariableList">
            <summary>
            Key to access the EventVariableList property of an EventRecord. Value: "EventVariableList".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventVariableVariableType">
            <summary>
            Key to access the VariableType property of an EventVariable. Value: "VariableType".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventVariableIdentifier">
            <summary>
            Key to access the Identifier property of an EventVariable. Value: "Identifier".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventVariableName">
            <summary>
            Key to access the Name property of an EventVariable. Value: "Name".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventVariableValueFromTarget">
            <summary>
            Key to access the ValueFromTarget property of an EventVariable. Value: "ValueFromTarget".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameEventVariableUnits">
            <summary>
            Key to access the Units property of an EventVariable. Value: "Units".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameDataDictionaryInformationDDName">
            <summary>
            Key to access the DataDictionaryName property of a DataDictionaryInformation_t structure. Value: "DataDictionaryName".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameDataDictionaryInformationProjectIdentifier">
            <summary>
            Key to access the ProjectIdentifier property of a DataDictionaryInformation_t structure. Value: "ProjectIdentifier".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.KeyPropertyNameDataDictionaryInformationDDVersion">
            <summary>
            Key to access the Version property of a DataDictionaryInformation_t structure. Value: "Version".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.m_Separator">
            <summary>
            The separator character that is to be used between field values in the CSV file.
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.m_UseTextQualifier">
            <summary>
            A flag to control whether the field values are to be enclosed within double quotes i.e. "123.456".
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.m_EventRecordFieldInformationList">
            <summary>
            The <c>List</c> of <c>FieldInformation_t</c> structures associated with an <c>EventRecord</c> class.
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.m_EventVariableFieldInformationList">
            <summary>
            The <c>List</c> of <c>FieldInformation_t</c> structures associated with an <c>EventVariable</c> class.
            </summary>
        </member>
        <member name="M:Common.CsvSerializer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the Common.CsvSerializer class that can serialize objects of the specified type into CSV documents.
            </summary>
            <remarks>At present, this CsvSerializer only supports serialization of the event log structure EventLogFile_t.</remarks>
            <param name="type">The type of the object that this Common.CsvSerializer is to serialize.</param>
        </member>
        <member name="M:Common.CsvSerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified System.IO.Object and writes the CSV document to a file using the specified System.IO.Stream.
            </summary>
            <remarks>This method only supports serialization of the <c>EventLogFile_t</c> structure to a CSV file.</remarks>
            <param name="stream">The System.IO.Stream used to write the CSV document.</param>
            <param name="data">The System.IO.Object to serialize.</param>
        </member>
        <member name="M:Common.CsvSerializer.GetFieldValuesEventRecord(Common.Configuration.EventRecord,System.Collections.Generic.List{Common.CsvSerializer.FieldInformation_t})">
            <summary>
            <para>Get a list of the field values, as strings, associated with the specified <c>eventRecord</c> parameter.</para>
            <para>The values and the order in which they are serialized are defined by the <c>fieldInformationList</c> parameter.</para>
            </summary>
            <returns>A list of the field values, as strings, associated with the specified <c>eventRecord</c> parameter.</returns>
        </member>
        <member name="M:Common.CsvSerializer.GetFieldValuesEventVariable(Common.Configuration.EventVariable,System.Collections.Generic.List{Common.CsvSerializer.FieldInformation_t})">
            <summary>
            <para>Get a list of the field values, as strings, associated with the specified <c>eventVariable</c> parameter.</para>
            <para>The values and the order in which they are serialized are defined by the <c>fieldInformationList</c> parameter.</para>
            </summary>
            <returns>A list of the field values, as strings, associated with the specified <c>eventVariable</c> parameter.</returns>
        </member>
        <member name="M:Common.CsvSerializer.GetFieldInformationEventRecord">
            <summary>
            Get a list of the field information to be used when generating the CSV fields associated with each event record.
            </summary>
            <returns>A <c>List</c> of <c>FieldInformation_t</c> structures that are to be used to generate the CSV fields for the EventRecord class.</returns>
        </member>
        <member name="M:Common.CsvSerializer.GetFieldInformationEventVariable">
            <summary>
            Get a list of the field information to be used when generating the CSV fields associated with each event variable.
            </summary>
            <returns>A <c>List</c> of <c>FieldInformation_t</c> structures that are to be used to generate the CSV fields for the EventVariable class.</returns>
        </member>
        <member name="M:Common.CsvSerializer.ConvertRawPropertyValueToString(System.Object,Common.CsvSerializer.FieldInformation_t@)">
            <summary>
            Convert the raw property value object to a string depending upon the specified CSV field type.
            </summary>
            <param name="raw">The raw value of the property that is currently being processed.</param>
            <param name="fieldInformation">The <c>FieldInformation_t</c> structure that is currently being processed.</param>
            <returns>A string representation of the Property value.</returns>
        </member>
        <member name="M:Common.CsvSerializer.UnixTimestampFromDateTime(System.DateTime)">
            <summary>
            Convert from <c>DateTime</c> to Unix Timestamp where the Unix Timestamp is the number of seconds elapsed since 00:00:00 on 1st Jan 1970, i.e. the Unix
            Epoch, without counting leap seconds.
            </summary>
            <param name="date">The <c>DateTime</c> object that is to be converted to a Unix Timestamp.</param>
            <returns>The Unix Timestamp</returns>
        </member>
        <member name="P:Common.CsvSerializer.Separator">
            <summary>
            Gets or sets the separator character that is to be used between field values in the CSV file.
            </summary>
        </member>
        <member name="P:Common.CsvSerializer.UseTextQualifier">
            <summary>
            Gets or set the flag that controls whether the field values are to be enclosed within double quotes i.e. "123.456".
            </summary>
        </member>
        <member name="T:Common.CsvSerializer.FieldInformation_t">
            <summary>
            The structure used to store the information associated with a particular field of a CSV record.
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldInformation_t.m_CSVFieldName">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldInformation_t.m_CSVFieldType">
            <summary>
            The field type e.g. string, UInt16, Int32, byte etc.
            </summary>
        </member>
        <member name="F:Common.CsvSerializer.FieldInformation_t.m_PropertyInformation">
            <summary>
            If the field is mapped to a class/structure property, the <c>PropertyInfo</c> associated with the property; otherwise, null.
            </summary>
        </member>
        <member name="M:Common.CsvSerializer.FieldInformation_t.#ctor(System.String,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Instantiates a new instance of the structure.
            </summary>
            <param name="fieldName">The CSV field name.</param>
            <param name="fieldType">The CSV field type.</param>
            <param name="propertyInfo">If the field is mapped directly to a class/structure property, the <c>PropertyInfo</c> associated with the property; otherwise,
            null.</param>
        </member>
        <member name="P:Common.CsvSerializer.FieldInformation_t.CSVFieldName">
            <summary>
            Get or set the name of the CSV field.
            </summary>
        </member>
        <member name="P:Common.CsvSerializer.FieldInformation_t.CSVFieldType">
            <summary>
            Get or set the CSV field type e.g. string, UInt16, Int32, byte etc.
            </summary>
        </member>
        <member name="P:Common.CsvSerializer.FieldInformation_t.PropertyInformation">
            <summary>
            Get or set the <c>PropertyInfo</c> associated with the property if the field is mapped directly to a property.
            </summary>
        </member>
        <member name="T:Common.Configuration.TestListIdentifier_t">
            <summary>
            A structure to store the fields associated with an entry from the <c>TESTLISTIDS</c> table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.TestListIdentifier_t.m_TestListIdentifier">
            <summary>
            The test list identifier associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.TestListIdentifier_t.m_SelfTestIdentifier">
            <summary>
            The self test identfier associated with the record.
            </summary>
        </member>
        <member name="M:Common.Configuration.TestListIdentifier_t.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the structure.
            </summary>
            <param name="testListIdentifier">The group list identifier associated with the record.</param>
            <param name="selfTestIdentifier">The self test identifier associated with the record.</param>
        </member>
        <member name="P:Common.Configuration.TestListIdentifier_t.TestListIdentifier">
            <summary>
            Gets or sets the test list identifier associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.TestListIdentifier_t.SelfTestIdentifier">
            <summary>
            Gets or sets the self test identfier associated with the record.
            </summary>
        </member>
        <member name="T:Common.UserControls.FormShowFlagsEvent">
            <summary>
            Form to display the state of the individual bits within a bit mask event variable.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlagsEvent.m_EventVariableIdentifier">
            <summary>
            The event variable identifier associated with the bitmask user control that called this form.
            </summary>
        </member>
        <member name="F:Common.UserControls.FormShowFlagsEvent.m_EventVariableName">
            <summary>
            The name of the event variable that appears in the form title.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormShowFlagsEvent.#ctor">
            <summary>
            Initialize a new instance of the form. Zero parameter constructor.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormShowFlagsEvent.#ctor(Common.UserControls.VariableControl)">
            <summary>
            Initialize a new instance of the form.
            </summary>
            <param name="variableControl">Reference to the user control that called this form.</param>
        </member>
        <member name="M:Common.UserControls.FormShowFlagsEvent.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="F:Common.UserControls.FormShowFlagsEvent.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.FormShowFlagsEvent.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Common.UserControls.SelfTestScalarControl">
            <summary>
            The scalar event variable user control. Displays the engineering value corresponding to the specified raw <c>Value</c> property for the scalar event variable specified
            by the <c>Identifier</c> property.
            </summary>
        </member>
        <member name="F:Common.UserControls.SelfTestScalarControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.SelfTestScalarControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Common.UserControls.SelfTestScalarControl.#ctor">
            <summary>
            Initializes a new instance of th class.
            </summary>
        </member>
        <member name="M:Common.UserControls.SelfTestScalarControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Common.UserControls.SelfTestScalarControl.Value">
            <summary>
            Gets or sets the current value of watch variable.
            </summary>
        </member>
        <member name="T:Common.Configuration.EventTable">
            <summary>
            A class to help access the system events defined in the <c>EVENTS</c> table of the data dictionary. The system events are accessed using 
            the identifier value.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventTable.KeyLogIndexField">
            <summary>
            The key associated with the log index field of the <c>Events</c> data table. Value: "LOGID".
            </summary>
            <remarks>Although the field name in the <c>Events</c> table of the data dictionary is given as <c>LOGID</c> the values represent the log index, not the 
            log identifier. The log index is equivalent to the log identifier -1.</remarks>
        </member>
        <member name="F:Common.Configuration.EventTable.KeyTaskIdentifierField">
            <summary>
            The key associated with the task identifier field of the <c>Events</c> data table. Value: "TASKID".
            </summary>
        </member>
        <member name="F:Common.Configuration.EventTable.KeyEventIdentifierField">
            <summary>
            The key associated with the event identifier field of the <c>Events</c> data table. Value: "EVENTID".
            </summary>
        </member>
        <member name="F:Common.Configuration.EventTable.And">
            <summary>
            The text associated with the AND logic function in a <c>FilterExpression</c>. Value: " AND ";
            </summary>
        </member>
        <member name="F:Common.Configuration.EventTable.Equals">
            <summary>
            The text associated with the = logic function in a <c>FilterExpression</c>. Value: " = ";
            </summary>
        </member>
        <member name="F:Common.Configuration.EventTable.HeaderEventVariableCount">
            <summary>
            The number of header event variables associated with the project. These are the first 'HeaderEventVariableCount' event variables defined in the EVENTVARIABLES 
            table of the data dictionary. Value: 5.
            </summary>
            <remarks>The value is fixed for all data dictionaries.</remarks>
        </member>
        <member name="F:Common.Configuration.EventTable.m_StructLists">
            <summary>
            An array containing the lists of those records from the <c>STRUCT</c> table associated with each structure identifier. The array index corresponds to the 
            structure identifier e.g. m_StructLists[27] would return a list of those records that had a value of 27 for <c>STRUCTID</c> field.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventTable.m_EventsDataTable">
            <summary>
            Reference to the <c>EVENTS</c> table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.EventTable.m_CommonEventVariableCount">
            <summary>
            The number of common event variables associated with each event. These are the event variables contained within the STRUCT generic list corresponding to 
            structure identifier 0, less those event variables defined as header event variables.  
            </summary>
        </member>
        <member name="M:Common.Configuration.EventTable.#ctor(Common.Configuration.DataDictionary.EVENTSDataTable,Common.Configuration.DataDictionary.STRUCTDataTable)">
            <summary>
            Initialize a new instance of the class.
            </summary>
            <param name="dataTable">Reference to the <c>EVENTS</c> table of the data dictionary. This table contains the VCU system event definitions.</param>
            <param name="structDataTable">Reference to the <c>STRUCT</c> table of the data dictionary. This table defines which event variables are associated 
            with each VCU system event.</param>
        </member>
        <member name="M:Common.Configuration.EventTable.GetIdentifier(System.Int16,System.Int16,System.Int16)">
            <summary>
            Get the identifier field of the record in the <c>Events</c> data table containing values in the <c>LogID</c>, <c>TaskId</c> and <c>EventId</c> fields that
            match the specified parameters.
            </summary>
            <param name="logIndex">The log index, this is equivalent to the log identifier - 1.</param>
            <param name="taskIdentifier">The task identifier.</param>
            <param name="eventIdentifier">The event identifier.</param>
            <remarks>Although the field name in the <c>Events</c> table of the data dictionary is given as <c>LOGID</c> the values are actually the values 
            of the event log index, this is equivalent to the actual log identifier -1.</remarks>
            <returns>The identifier of the record that matches the specified search criteria, if found; otherwise returns <c>NotFound</c>.</returns>
        </member>
        <member name="M:Common.Configuration.EventTable.CreateEventVariableList(System.Int16)">
            <summary>
            Create a new list to store the event variable values associated with an event of the specified type.
            </summary>
            <param name="identifier">The identifier associated with the event.</param>
            <returns>The list of event variables specific to the event with the specified identifier.</returns>
        </member>
        <member name="M:Common.Configuration.EventTable.BuildDataTable(Common.Configuration.DataDictionary.EVENTSDataTable)">
            <summary>
            Build an array of the records contained within the <c>EVENTS</c> table of the data dictionary. This array is used to access the 
            parameters associated with the system events defined in the table. The array element is mapped to the identifier field of the table.
            </summary>
            <param name="dataTable">Reference to the <c>EVENTS</c> table of the data dictionary.</param>
            <returns>An array of the records contained within the <c>EVENTS</c> data table, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="M:Common.Configuration.EventTable.AddEventVariableLists">
            <summary>
            Add the event variables associated with each event to the <c>EventVariableList</c> property.
            </summary>
            <remarks>
            Externals
            <list type="table">
            <listheader><term>Member Variable/Property</term><description>Description</description></listheader>
            <item><term>Items</term><description>Gets an indexed array of the records contained in the <c>DataDictionary.EVENTSDataTable</c> table.</description></item>
            <item><term>m_StructLists</term><description>An array containing the lists of those records from the <c>Struct</c> data table associated with each structure identifier. The array index corresponds to the structure identifier 
            e.g. m_StructureList[27] would return a list of those records that had a value of 27 for <c>StructId</c> field.</description></item>
            <item><term></term><description></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Common.Configuration.EventTable.BuildStructLists(Common.Configuration.DataDictionary.STRUCTDataTable)">
            <summary>
            Build an array of lists of <c>Struct_t</c> records associated with each unique <c>STRUCTID</c> value defined in the <c>STRUCT</c> table of 
            the data dictionary. The array element is mapped to the <c>STRUCTID</c> field of the table.
            </summary>
            <param name="structDataTable">Reference to the <c>STRUCT</c> table of the data dictionary.</param>
            <returns>An array of lists of <c>Struct_t</c> records associated with each unique <c>STRUCTID</c> value in the <c>STRUCT</c> table of the 
            data dictionary, if the parameters are valid; otherwise, null.</returns>
        </member>
        <member name="P:Common.Configuration.EventTable.CommonEventVariableCount">
            <summary>
            Gets the number of common event variables associated with each event. These are the event variables contained within the STRUCT generic list corresponding to 
            structure identifier 0, less those event variables defined as header event variables.  
            </summary>
        </member>
        <member name="T:Common.UserControls.EventEnumeratorControl">
            <summary>
            The enumerator event variable user control. Displays the enumerator text corresponding to the specified <c>Value</c> property for the enumerator event variable 
            specified by the <c>Identifier</c> property.
            </summary>
        </member>
        <member name="F:Common.UserControls.EventEnumeratorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.UserControls.EventEnumeratorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Common.UserControls.EventEnumeratorControl.m_ValueUINT">
            <summary>
            The value cast to a uint.
            </summary>
        </member>
        <member name="F:Common.UserControls.EventEnumeratorControl.m_ClientAsFormPTU">
            <summary>
            Reference to the client form as type <c>FormPTU</c>.
            </summary>
        </member>
        <member name="M:Common.UserControls.EventEnumeratorControl.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Common.UserControls.EventEnumeratorControl.Cleanup(System.Boolean)">
            <summary>
            Clean up the resources used by the form.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Common.UserControls.EventEnumeratorControl.Value">
            <summary>
            Gets or sets the current value of the enumerator event variable.
            </summary>
        </member>
        <member name="P:Common.UserControls.EventEnumeratorControl.ClientForm">
            <summary>
            Gets or sets the client form associated with the control.
            </summary>
        </member>
        <member name="T:Common.CommonConstants">
            <summary>
            Defines the general constants associated with the assembly.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ProjectIdCTA">
            <summary>
            The project identifier associate with the Chicago Transit Authority (CTA) Propulsion and Friction Brake project. Value: "CTPA".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ProjectIdNYCT">
            <summary>
            The project Identifier associated with the New York City Transit Authority (NYCT) R188 Propulsion Car Control Unit. Value: "R8PR".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ProjectIdBART">
            <summary>
            The project identifier associated with the San Fransisco BART project. Value: "BART".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ProjectIdR179">
            <summary>
            The project identifier associate with the R179 Propulsion Car Control Unit project. Value: "MTPE".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ProjectIdRocket">
            <summary>
            The project identifier associated with the Toronto Rocket project. Value: "TOPC".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.UserGroupBARTLevel1">
            <summary>
            The BART Windows group name associated with SecurityLevel1 clearance. Value: "PrimaryMaintenance".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.UserGroupBARTLevel2">
            <summary>
            The BART Windows group name associated with SecurityLevel2 clearance. Value: "Engineering".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyControlPanel">
            <summary>
            Key corresponding to the Multiple Document Interface (MDI) ControlPanel user control that is used on some projects. Value: "m_ControlPanel".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyPanelStatus">
            <summary>
            Key corresponding to the Multiple Document Interface (MDI) Status Panel control. Value: "m_PanelStatus".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuStrip">
            <summary>
            Key corresponding to the Multiple Document Interface (MDI) MenuStrip control. Value: "m_MenuStrip". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripFunctionKeys">
            <summary>
            Key corresponding to the Multiple Document Interface (MDI) ToolStrip control. Value: "m_ToolStripFunctionKeys". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripButtonOnline">
            <summary>
            Key corresponding to the  'Go Online' ToolStripButton control. Value: "m_TSBOnline". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripButtonOffline">
            <summary>
            Key corresponding to the 'Go Offline' ToolStripButton control. Value: "m_TSBOffline". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripButtonUpload">
            <summary>
            Key corresponding to the 'Upload' ToolStripButton. Value: "m_TSBUpload". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripButtonSave">
            <summary>
            Key corresponding to the 'Save' ToolStripButton. Value: "m_TSBSave". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripButtonEdit">
            <summary>
            Key corresponding to the 'Edit' ToolStripButton. Value: "m_TSBEdit". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripButtonNew">
            <summary>
            Key corresponding to the 'New' ToolStripButton. Value: "m_TSBNew". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripButtonCopy">
            <summary>
            Key corresponding to the 'Copy' ToolStripButton. Value: "m_TSBCopy". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripButtonRename">
            <summary>
            Key corresponding to the 'Rename' ToolStripButton. Value: "m_TSBRename". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripButtonDelete">
            <summary>
            Key corresponding to the 'Delete' ToolStripButton. Value: "m_TSBDelete". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripButtonSetAsDefault">
            <summary>
            Key corresponding to the 'Set As Default' ToolStripButton. Value: "m_TSBSetAsDefault". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripButtonOverrideSecurity">
            <summary>
            Key corresponding to the 'Override Security' ToolStripButton. Value: "m_TSBOverrideSecurity". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyFormOpenEventLog">
            <summary>
            Key corresponding to the 'Open/Event Log' form. Value: "FormOpenEventLog".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyFormOpenFaultLog">
            <summary>
            Key corresponding to the 'Open/Fault Log' form. Value: "FormOpenFaultLog".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyFormViewFaultLog">
            <summary>
            Key corresponding to the 'View/Fault Log' form. Value: "FormViewFaultLog".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyFormViewEventLog">
            <summary>
            Key corresponding to the 'View/Event Log' form. Value: "FormViewEventLog".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyFormOpenSimulatedFaultLog">
            <summary>
            Key corresponding to the 'Open/Simulated Fault Log' form. Value: "FormOpenSimulatedFaultLog".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyFormOpenWatch">
            <summary>
            Key corresponding to the 'Open/Watch Window' form. Value: "FormOpenWatch".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyFormViewWatch">
            <summary>
            Key corresponding to the 'View/Watch Window' form. Value: "FormViewWatch".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyFormViewTestResults">
            <summary>
            Key corresponding to the 'View/Test Results' form. Value: "FormViewTestResults".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyFormDataStreamReplay">
            <summary>
            Key corresponding to the 'DataStreamReplay' form. Value: "FormDataStreamReplay".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripSeparatorOnlineLHS">
            <summary>
            Key corresponding to the 'Go Online' ToolStripButton Left-Hand-Side Separator. Value: "m_SeparatorOnlineLHS". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripSeparatorOfflineLHS">
            <summary>
            Key corresponding to the 'Go Offline' ToolStripButton Left-Hand-Side Separator. Value: "m_SeparatorOfflineLHS". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripSeparatorFileOpenDataDictionary">
            <summary>
            Key to access the 'File/Select Data Dictionary' Separator. Value: ""m_SeparatorFileOpenDataDictionary".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripSeparatorConfigurePasswordProtection">
            <summary>
            Key to access the 'Configure/Password Protection' Separator. Value: ""m_SeparatorConfigurePasswordProtection".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripSeparatorHelpShowUserManual">
            <summary>
            Key to access the 'Help/Show User Manual' Separator. Value: ""m_SeparatorHelpShowUserManual".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripStatusLabelLogStatus">
            <summary>
            Key corresponding to the 'Log Status' ToolStripStatusLabel. Value: "m_StatusLabelLogStatus". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripStatusLabelWibuBoxStatus">
            <summary>
            Key corresponding to the 'Wibu Box Status' ToolStripStatusLabel. Value: "m_StatusLabelWibuBoxStatus". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripStatusLabelCarNumber">
            <summary>
            Key corresponding to the 'Car No.' ToolStripStatusLabel. Value: "m_StatusLabelCarNumber". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripStatusLabelMode">
            <summary>
            Key corresponding to the 'Mode' ToolStripStatusLabel. Value: "m_StatusLabelMode". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyToolStripStatusLabelSecurityLevel">
            <summary>
            Key corresponding to the 'SecurityLevel' ToolStripStatusLabel. Value: "m_StatusLabelSecurityLevel". 
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemFile">
            <summary>
            Key to access the 'File' menu option. Value: "m_MenuItemFile".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemFileExit">
            <summary>
            Key to access the 'File/Exit' menu option. Value: "m_MenuItemFileExit".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemFileOpen">
            <summary>
            Key to access the 'File/Open' menu option. Value: "m_MenuItemFileOpen".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemView">
            <summary>
            Key to access the 'View' menu option. Value: "m_MenuItemView".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemViewWatchWindow">
            <summary>
            Key to access the 'View/Watch Window' menu option. Value: "m_MenuItemViewWatchWindow".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemViewSystemInformation">
            <summary>
            Key to access the 'View/System Information Window' menu option. Value: "m_MenuItemViewSystemInformation".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemDiagnostics">
            <summary>
            Key to access the 'Diagnostics' menu option. Value: "m_MenuItemDiagnostics".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemDiagnosticsEventLog">
            <summary>
            Key to access the 'Diagnostics/Event Log' menu option. Value: "m_MenuItemDiagnosticsEventLog".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemDiagnosticsSelfTests">
            <summary>
            Key to access the 'Diagnostics/SelfTests' menu option. Value: "m_MenuItemDiagnosticsSelfTests".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemDiagnosticsInitializeEventLogs">
            <summary>
            Key to access the 'Diagnostics' menu option. Value: "m_MenuItemDiagnosticsInitializeEventLogs".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemConfigure">
            <summary>
            Key to access the 'Configure' menu option. Value: "m_MenuItemConfigure".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemConfigureWorksetsWatchWindow">
            <summary>
            Key to access the 'Configure/Workset/Watch Window' menu option. Value: "m_MenuItemConfigureWorksetsWatchWindow".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemConfigureWorksetsFaultLog">
            <summary>
             Key to access the 'Configure/Workset/DataStream' menu option. Value: "m_MenuItemConfigureWorksetsFaultLog".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemConfigureWorksetsChartRecorder">
            <summary>
            Key to access the 'Configure/Workset/Chart Recorder' menu option. Value: "m_MenuItemConfigureWorksetsChartRecorder".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemConfigureRealTimeClock">
            <summary>
            Key to access the 'Configure/Real Time Clock' menu option. Value: "m_MenuItemConfigureRealTimeClock".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemConfigurePasswordProtection">
            <summary>
            Key to access the 'Configure/Password Protection' menu option. Value: ""m_MenuItemConfigurePasswordProtection".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemConfigureChartRecorder">
            <summary>
            Key to access the 'Configure/Chart Recorder' menu option. Value: "m_MenuItemConfigureChartRecorder".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemConfigureDataStream">
            <summary>
            Key to access the 'Configure/Data Stream' menu option. Value: "m_MenuItemConfigureDataStream".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemConfigureWatchWindow">
            <summary>
            Key to access the 'Configure/Watch Window' menu option. Value: "m_MenuItemConfigureWatchWindow".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemHelp">
            <summary>
            Key to access the 'Help' menu option. Value: "m_MenuItemHelp".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemHelpShowUserManual">
            <summary>
            Key to access the 'Help/Show User Manual' menu option. Value: "m_MenuItemHelpShowUserManual".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.KeyMenuItemTools">
            <summary>
            Key to access the 'Tools' menu option. Value: "m_MenuItemTools".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionExecutable">
            <summary>
            The file extension associated with an executable file. Value: ".exe".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionBatchFile">
            <summary>
            The file extension associated with a batch file. Value: ".bat".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionEngineeringDatabase">
            <summary>
            The file extension associated with an Access engineering database derived using the Data Dictionary Builder (DDB) utility. Value: ".e1".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionDataDictionary">
            <summary>
            The file extension associated with an XML data dictionary. Value: ".xml".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionWatchFile">
            <summary>
            The file extension associated with a recorded watch file. Value: ".watch".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionEventLog">
            <summary>
            The file extension associated with an event log. Value: ".xml".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionCSV">
            <summary>
            The file extension associated with an event log CSV (Comma Separated Values) file. Value: ".csv".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionWorksetFile">
            <summary>
            The file extension associated with a workset file. Value: ".work".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionSimulatedFaultLog">
            <summary>
            The file extension associated with a simulated fault log file. Value ".sfl".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionFaultLog">
            <summary>
            The file extension associated with a fault log file. Value ".flt".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionHelpFile">
            <summary>
            The file extension associated with the diagnostic help file. Value ".hlp".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionBmp">
            <summary>
            The file extension associated with the bitmap image files. Value ".bmp".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ExtensionJPeg">
            <summary>
            The file extension associated with the JPEG image files. Value ".jpg".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.MaskBit0">
            <summary>
            Mask corresponding to bit 0 of a status byte. Value: 0x01.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.MaskBit1">
            <summary>
            Mask corresponding to bit 1 of a status byte. Value: 0x02.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.MaskBit2">
            <summary>
            Mask corresponding to bit 2 of a status byte. Value 0x04.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.MaskBit3">
            <summary>
            Mask corresponding to bit 3 of a status byte. Value: 0x08.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.MaskBit4">
            <summary>
            Mask corresponding to bit 4 of a status byte. Value: 0x10.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.MaskBit5">
            <summary>
            Mask corresponding to bit 5 of a status byte. Value: 0x20.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.MaskBit6">
            <summary>
            Mask corresponding to bit 6 of a status byte. Value: 0x40.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.MaskBit7">
            <summary>
            Mask corresponding to bit 7 of a status byte. Value: 0x80.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.AsciiEscape">
            <summary>
            Byte representation of the escape character. Value: 27.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.AsciiDelete">
            <summary>
            Byte representation of the delete character. Value: 127.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.AsciiTab">
            <summary>
            Byte representation of the tab character. Value: 9.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.Century">
            <summary>
            The number of years in a century. Used to convert year format from 1997, 2010 to 97, 10 etc. Value: 100.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.CentiSecondMs">
            <summary>
            Centisecond (cs) represented as a number of milliseconds. Value: 10.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.SecondMs">
            <summary>
            Second represented as a number of milliseconds. Value: 1,000.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.MinuteMs">
            <summary>
            Minute represented as a number of milliseconds. Value: 60,000.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.HourMs">
            <summary>
            Hour represented as a number of milliseconds. Value: 3,600,000.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.DayMs">
            <summary>
            Day represented as a number of milliseconds. Value: 86,400,000.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.TimeoutMsPauseFeedback">
            <summary>
            The default timeout, in ms, on the check to see whether the PauseFeedback signal has been asserted. Value: 3,000.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.SleepMsPauseFeedback">
            <summary>
            The default sleep interval, in ms, on the check to see whether the PauseFeedback signal has been asserted. Value: 10.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.DDFormatStringHex">
            <summary>
            The value of the FORMATSTRING field of the WATCHVARIABLES table of the data dictionary that indicates that the watch variable is to be displayed in 
            hexadecimal format. Value: "hexadecimal".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.FormatStringHex">
            <summary>
            The format string, converted to lower case, used in the data dictionary to represent a hexadecimal number. Value: "X";
            </summary>
        </member>
        <member name="F:Common.CommonConstants.FormatStringNumeric">
            <summary>
            The .NET format string used to display the upper and lower bounds. Value: "###,###,##0.####"
            </summary>
        </member>
        <member name="F:Common.CommonConstants.HexValueIdentifier">
            <summary>
            Identifier used to identify a value as a hexadecimal value. Value: "0x"
            </summary>
        </member>
        <member name="F:Common.CommonConstants.CultureInfoString">
            <summary>
            The CultureInfo string. Value: "en-US".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.FormatStringTimeSec">
            <summary>
            The format string to be used when displaying the time in hours:minutes:seconds. Value: "HH:mm:ss".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.FormatStringTimeCs">
            <summary>
            The format string to be used when displaying the time in hours:minutes:seconds.centi-second. Value: "HH:mm:ss.ff".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.FormatStringDateFromVCU">
            <summary>
            The format string to be used when simulating the date information returned by the VCU. Value: "MM/dd/yyyy".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.FormatStringListNumbering">
            <summary>
            The format string to be used when displaying list numbered items. Value: "##".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.NewPara">
            <summary>
            A new paragraph character string. Value: "\n\n".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.NewLine">
            <summary>
            A new line character. Value: "\n".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.Question">
            <summary>
            A question mark character. Value: "?".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.Space">
            <summary>
            A single space character. Value: " ".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.UnderScore">
            <summary>
            An underscore character. Value: "_".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.Colon">
            <summary>
            A colon character. Value: ": ".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.Comma">
            <summary>
            A comma character. Value: ",".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.Period">
            <summary>
            A period character. Value: ".".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.FullStop">
            <summary>
            A full stop character. Value: ".".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.SpaceX4">
            <summary>
            Four consecutive space characters. Value = "    ".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.BindingLabelStatusMessage">
            <summary>
            The binding string used when writing the text to the status message labe to ensure that it does not overlay the Image property (Assumes an image of 16x16).
            Value: "        ";
            </summary>
        </member>
        <member name="F:Common.CommonConstants.BindingTestNumber">
            <summary>
            The binding string used when appending the self test description to the self test number. Value: " | ".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.BindingMessage">
            <summary>
            The binding string used when appending a supplemental message to an existing message. Value: " - ".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.BindingFilename">
            <summary>
            The binding string used when appending a filename to a path. Value: "\\".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.BindingDirectory">
            <summary>
            The binding string used when appending a sub-directory to a path. Value: "\\".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.VariableNotDefinedString">
            <summary>
            The text string used to represent a field of a variable that is not defined in the data dictionary. Value: ". . . ".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.TestNotDefinedString">
            <summary>
            The text string used to represent a self test that has not been defined. Value: ". . . ".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ChartScaleUnitsNotDefinedString">
            <summary>
            The text string used to represent the units field of a variable that is not defined in the data dictionary. Value: ". . . ".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.ChartScaleValueNotDefinedString">
            <summary>
            The text string used to represent a chart scale value that has not been defined. Value: ". . . ".
            </summary>
        </member>
        <member name="F:Common.CommonConstants.WatchIdentifierNotDefined">
            <summary>
            The watch identifier value that is to be used if the specified watch variable is not defined. Value: 0.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.OldIdentifierNotDefined">
            <summary>
            The old identifier value that is to be used if the specified watch variable is not defined. Value: 0.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.BitsPerByte">
            <summary>
            The number of bits that make up a single byte of data. Value: 8.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.NotFound">
            <summary>
            Value corresponding to entry not found. Value: -1;
            </summary>
        </member>
        <member name="F:Common.CommonConstants.NotDefined">
            <summary>
            Value corresponding to not-defined. Value = -1;
            </summary>
        </member>
        <member name="F:Common.CommonConstants.NotUsed">
            <summary>
            Value corresponding to not-used. Value: -1.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.False">
            <summary>
            Value corresponding to false. Value: -1.
            </summary>
        </member>
        <member name="F:Common.CommonConstants.True">
            <summary>
            Value corresponding to true. Value: 1.
            </summary>
        </member>
        <member name="T:Common.IEventLogFile">
            <summary>
            Interface for any class that displays saved event log data.
            </summary>
        </member>
        <member name="M:Common.IEventLogFile.SaveEventLogFile">
            <summary>
            Save the EventLogFile_t structure to disk.
            </summary>
        </member>
        <member name="P:Common.IEventLogFile.EventLogFile">
            <summary>
            Gets or sets the de-serialized event log data that is to be displayed.
            </summary>
        </member>
        <member name="T:Common.Configuration.SelfTestErrorMessage_t">
            <summary>
            A structure to store the fields associated with an entry from the <c>SELFTESTERRMESS</c> table of the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestErrorMessage_t.m_ErrorIdentifier">
            <summary>
            The self test error identifier associated with the record.
            </summary>
        </member>
        <member name="F:Common.Configuration.SelfTestErrorMessage_t.m_Description">
            <summary>
            The self test error description associated with the record.
            </summary>
        </member>
        <member name="M:Common.Configuration.SelfTestErrorMessage_t.#ctor(System.Int16,System.String)">
            <summary>
            Initialize a new instance of the structure.
            </summary>
            <param name="selfTestErrorIdentifier">The value of the <c>ERRID</c> field.</param>
            <param name="selfTestErrorDescription">The value of the <c>DESCRIPTION</c> field.</param>
        </member>
        <member name="P:Common.Configuration.SelfTestErrorMessage_t.ErrorIdentifier">
            <summary>
            Gets or sets the self test error identifier associated with the record.
            </summary>
        </member>
        <member name="P:Common.Configuration.SelfTestErrorMessage_t.Description">
            <summary>
            Gets or sets the self test error description associated with the record.
            </summary>
        </member>
        <member name="T:Common.Configuration.MostRecentDownloadedEvents">
            <summary>
            A class to store an array of the most recent downloaded event associated with each car. Each array element corresponds to the most recent downloaded event
            associated with the car number which equates to the index value e.g. DownloadedEvents[8012] corresponds to the most recent downloaded event associated with
            car 8012.
            </summary>
        </member>
        <member name="F:Common.Configuration.MostRecentDownloadedEvents.CarNumberMinValue">
            <summary>
            The minimum valid value of the car number.
            </summary>
        </member>
        <member name="F:Common.Configuration.MostRecentDownloadedEvents.CarNumberMaxValue">
            <summary>
            The maximum valid value of the car number.
            </summary>
        </member>
        <member name="F:Common.Configuration.MostRecentDownloadedEvents.m_MostRecentDownloadedEvents">
            <summary>
            An array of the most recent downloaded event associated with each car.
            </summary>
        </member>
        <member name="M:Common.Configuration.MostRecentDownloadedEvents.#ctor">
            <summary>
            Initialize a new instance of the class. This constructor instantiates each element of the 'DownloadedEvents' array with a new EventRecord.
            </summary>
        </member>
        <member name="P:Common.Configuration.MostRecentDownloadedEvents.DownloadedEvents">
            <summary>
            Gets or sets the array of the most recent downloaded event associated with each car.
            </summary>
        </member>
        <member name="T:Common.Communication.MessageMode">
            <summary>
            The self test message types supported by the VCU.
            </summary>
        </member>
        <member name="F:Common.Communication.MessageMode.Brief">
            <summary>
            Brief Message. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Communication.MessageMode.Detailed">
            <summary>
            Detailed Message. Value: 2.
            </summary>
        </member>
        <member name="F:Common.Communication.MessageMode.Counter">
            <summary>
            Counter. Value: 3.
            </summary>
        </member>
        <member name="F:Common.Communication.MessageMode.Special">
            <summary>
            Special Message. Value: 4.
            </summary>
        </member>
        <member name="F:Common.Communication.MessageMode.Interactive">
            <summary>
            Interactive Test Result. Value: 5.
            </summary>
        </member>
        <member name="F:Common.Communication.MessageMode.Undefined">
            <summary>
            Undefined. Value: 6.
            </summary>
        </member>
        <member name="T:Common.Communication.TruckInformation">
            <summary>
            The truck associated with the current test, if applicable.
            </summary>
        </member>
        <member name="F:Common.Communication.TruckInformation.None">
            <summary>
            Applies to neither truck. Value: 0.
            </summary>
        </member>
        <member name="F:Common.Communication.TruckInformation.X">
            <summary>
            Applies to the X truck only. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Communication.TruckInformation.Y">
            <summary>
            Applies to the Y truck only. VAlue: 2.
            </summary>
        </member>
        <member name="F:Common.Communication.TruckInformation.XY">
            <summary>
            Applies to both the X and Y trucks. VAlue: 3.
            </summary>
        </member>
        <member name="F:Common.Communication.TruckInformation.Undefined">
            <summary>
            Undefined. VAlue: 4.
            </summary>
        </member>
        <member name="T:Common.Communication.SelfTestMode">
            <summary>
            The self test mode of operation.
            </summary>
        </member>
        <member name="F:Common.Communication.SelfTestMode.None">
            <summary>
            None. Value: 0.
            </summary>
        </member>
        <member name="F:Common.Communication.SelfTestMode.TBD">
            <summary>
            To Be Defined. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Communication.SelfTestMode.Engineering">
            <summary>
            Engineering Mode. Value: 2.
            </summary>
        </member>
        <member name="T:Common.Communication.SpecialMessageIdentifier">
            <summary>
            The self test special message identifier.
            </summary>
        </member>
        <member name="F:Common.Communication.SpecialMessageIdentifier.None">
            <summary>
            Not defined. Value: 0.
            </summary>
        </member>
        <member name="F:Common.Communication.SpecialMessageIdentifier.EnterSelfTest">
            <summary>
            Enter self test mode. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Communication.SpecialMessageIdentifier.NoEnterSelfTest">
            <summary>
            Unable to enter self test mode. Value: 2.
            </summary>
        </member>
        <member name="F:Common.Communication.SpecialMessageIdentifier.TestComplete">
            <summary>
            Tests Complete. Value: 3.
            </summary>
        </member>
        <member name="F:Common.Communication.SpecialMessageIdentifier.TestAborted">
            <summary>
            Tests Aborted. Value: 4.
            </summary>
        </member>
        <member name="F:Common.Communication.SpecialMessageIdentifier.ExitSelfTest">
            <summary>
            Exit self test mode. Value: 5.
            </summary>
        </member>
        <member name="T:Common.Communication.InteractiveResults_t">
            <summary>
            The results of an interactive test.
            </summary>
        </member>
        <member name="F:Common.Communication.InteractiveResults_t.Value">
            <summary>
            The value associated with the interactive test result.
            </summary>
        </member>
        <member name="F:Common.Communication.InteractiveResults_t.Tag">
            <summary>
            The tag associated with the interactive test result.
            </summary>
        </member>
        <member name="T:Common.Communication.ICommunicationSelfTest">
            <summary>
            An interface to define the communication methods associated with the self test sub-system - SelfTest.dll.
            </summary>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.GetSelfTestSpecialMessage(System.Int16@,System.Int16@)">
            <summary>
            Get the self test special message.
            </summary>
            <param name="result">The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            <paramref name="reason"/> parameter applies and (3) represents an unknown error.</param>
            <param name="reason">A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the <c>SELFTESTERRMESS</c> table 
            of the data dictionary in order to determine the error message returned from the VCU.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetSelfTestSpecialMessage() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.StartSelfTestTask(System.Int16@,System.Int16@)">
            <summary>
            Start the self test task.
            </summary>
            <remarks>This request will start the self test process on the VCU. 
            process.</remarks>
            <param name="result">The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            <paramref name="reason"/> parameter applies and (3) represents an unknown error.</param>
            <param name="reason">A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the <c>SELFTESTERRMESS</c> table 
            of the data dictionary in order to determine the error message returned from the VCU.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.StartSelfestTask() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.ExitSelfTestTask(System.Int16@,System.Int16@)">
            <summary>
            Exit the self test task.
            </summary>
            <remarks>This request will start the self test process on the VCU. 
            process.</remarks>
            <param name="result">The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            <paramref name="reason"/> parameter applies and (3) represents an unknown error.</param>
            <param name="reason">A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the <c>SELFTESTERRMESS</c> table 
            of the data dictionary in order to determine the error message returned from the VCU.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.ExitSelfestTask() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.AbortSTSequence">
            <summary>
            Abort the self test sequence.
            </summary>
            <remarks>This request will stop the execution of the self-test process on the VCU and return control to the propulsion software.</remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.AbortSTSequence() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.CommunicationWatchdog">
            <summary>
            Determines if a physical/virtual connection still exists with the target.
            </summary>
            <remarks>This request checks that the Propulsion System is still in self test mode</remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.AbortSTSequence() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.SendOperatorAcknowledge">
            <summary>
            Send an operator acknowledge message.
            </summary>
            <remarks>This request allows the operator to move to the next step of an interactive test.</remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.SendOperatorAcknowledge() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.UpdateSTTestList(System.Int16,System.Int16[])">
            <summary>
            Update the list of individually selected self tests that are to be executed. 
            </summary>
            <remarks>This method will define the list of self-tests that are to be executed once the tester selects the execute command. The self tests are defined 
            using the self test identifiers defined in the data dictionary.</remarks>
            <param name="testCount">The number of tests in the list.</param>
            <param name="tests">A list of the selfTestIdentifiers.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.UpdateSTTestList() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.RunPredefinedSTTests(System.Int16)">
            <summary>
            Run the predefined self tests associated with the specified test list identifier, these tests are defined in the data dictionary. 
            </summary>
            <param name="testListIdentifier">The test list identifier of the predefined self tests that are to be executed.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.RunPredefinedSTTests() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.UpdateSTLoopCount(System.Int16)">
            <summary>
            Update the number of times that the selected tests are to be run.
            </summary>
            <param name="loopCount">The number of cycles/loops of the defined tests that are to be performed.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.UpdateSTLoopCount() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.ExecuteSTTestList(Common.Communication.TruckInformation)">
            <summary>
            Execute the self tests that are defined in the current list.
            </summary>
            <param name="truckInformation">The truck to which the self tests apply. This does not apply on the CTA project as separate self-tests are set up for each
            truck.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.ExecuteSTTestList() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.GetSelfTestResult(System.Int16@,Common.Communication.MessageMode@,System.Int16@,System.Int16@,System.Int16@,Common.Communication.TruckInformation@,System.Int16@,Common.Communication.InteractiveResults_t[]@)">
            <summary>
            Get the self test results.
            </summary>
            <param name="resultAvailable">A flag to indicate whether a valid result is available. A value of 1 indicates that a valid result is available; otherwise, 
            0.</param>
            <param name="messageMode">The type of message returned from the VCU.</param>
            <param name="testIdentifier">The test result identifier; the interpretation of this value is dependent upon the message mode. For detailed messages, this 
            value represents the self test identifier.</param>
            <param name="testCase">The test case number associated with the message.</param>
            <param name="testResult">Used with the passive and logic self tests to define whether the test passed or failed. A value of 1 indicates that the test 
            passed; otherwise, the test failed.</param>
            <param name="truckInformation">An enumerator to define the truck information associated with the message.</param>
            <param name="variableCount">The number of variables associated with the message.</param>
            <param name="results">An array of <see cref="T:Common.Communication.InteractiveResults_t"/> structures containing the value of each self test variable associated with the current 
            interactive test.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetSelfTestResult() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationSelfTest.UpdateSTMode(Common.Communication.SelfTestMode)">
            <summary>
            Update the self test mode.
            </summary>
            <remarks>This call is used to check whether communication with the VCU has been lost.</remarks>
            <param name="selfTestMode">The required self test mode.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.UpdateSTMode() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="T:Common.Communication.ICommunicationInterface`1">
            <summary>
            Defines the interface requirements for any class that communicates with the vehicle control unit.
            </summary>
            <typeparam name="T">The communication interface type e.g. ICommunicationWatch, ICommunicationEvent etc.</typeparam>
        </member>
        <member name="P:Common.Communication.ICommunicationInterface`1.CommunicationInterface">
            <summary>
            Gets or sets the communication interface that is to be used to communicate with the target.
            </summary>
        </member>
        <member name="T:Common.DebugMode">
            <summary>
            A class to support debugging of the parameter values associated with calls to the methods within the PTUDLL32 dynamic link library.
            </summary>
        </member>
        <member name="F:Common.DebugMode.DecimalFormatSpecifier">
            <summary>
            The format specifier to be used when displaying debug information in decimal format. Value: "d3".
            </summary>
        </member>
        <member name="F:Common.DebugMode.XMLHeader">
            <summary>
            The XML header associated with the debug log.
            </summary>
        </member>
        <member name="F:Common.DebugMode.m_LogFile">
            <summary>
            The <c>StreamWriter</c> reference corresponding to the debug mode log file.
            </summary>
        </member>
        <member name="F:Common.DebugMode.m_Enabled">
            <summary>
            Flag to control whether debug mode is enabled. True, to enable debug mode; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.DebugMode.m_StartTime">
            <summary>
            The time that the current log was started.
            </summary>
        </member>
        <member name="M:Common.DebugMode.Open">
            <summary>
            Open the debug mode log file so that new debug information can be written to the file.
            </summary>
        </member>
        <member name="M:Common.DebugMode.Close">
            <summary>   
            Close the debug mode log file.
            </summary>
        </member>
        <member name="M:Common.DebugMode.Write(System.String)">
            <summary>
            Write the specified string to the log file.
            </summary>
            <param name="text">The text string that is to be written.</param>
        </member>
        <member name="M:Common.DebugMode.GetXML``1(System.String,``0[])">
            <summary>
            Gets the XML element corresponding to the specified array.
            </summary>
            <typeparam name="T">The object type associated with each element of the array.</typeparam>
            <param name="tagName">The XML tag name for the array.</param>
            <param name="array">The array values.</param>
            <returns>The XML string corresponding to the array.</returns>
        </member>
        <member name="P:Common.DebugMode.Enabled">
            <summary>
            Gets the flag that controls whether debug mode is enabled. True, to enable debud mode; otherwise, false.
            </summary>
        </member>
        <member name="T:Common.DebugMode.InitCommunication_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.InitCommunication() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitCommunication_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitCommunication_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitCommunication_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitCommunication_t.Protocol">
            <summary>
            The protocol type.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitCommunication_t.PortID">
            <summary>
            The port identifier.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitCommunication_t.BaudRate">
            <summary>
            The baud rate.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitCommunication_t.BitsPerByte">
            <summary>
            The number of bits per character.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitCommunication_t.Parity">
            <summary>
            The parity.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitCommunication_t.StopBits">
            <summary>
            The number of stop bits.
            </summary>
        </member>
        <member name="M:Common.DebugMode.InitCommunication_t.#ctor(Common.Communication.Protocol,System.String,Common.Communication.Baud,Common.Communication.BitsPerCharacter,Common.Communication.Parity,Common.Communication.StopBits,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="protocol">The protocol type.</param>
            <param name="portID">The port identifier.</param>
            <param name="baudRate">The baud rate.</param>
            <param name="bitsPerByte">The number of bits per character.</param>
            <param name="parity">The parity.</param>
            <param name="stopBits">The number of stop bits.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.InitCommunication_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.CloseCommunication_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.CloseCommunication() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.CloseCommunication_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.CloseCommunication_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.CloseCommunication_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.CloseCommunication_t.Protocol">
            <summary>
            The protocol type.
            </summary>
        </member>
        <member name="M:Common.DebugMode.CloseCommunication_t.#ctor(Common.Communication.Protocol,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="protocol">The protocol type.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.CloseCommunication_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.GetEmbeddedInformation_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.GetEmbeddedInformation() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEmbeddedInformation_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEmbeddedInformation_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEmbeddedInformation_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEmbeddedInformation_t.SoftwareVersion">
            <summary>
            The version reference of the embedded software.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEmbeddedInformation_t.CarID">
            <summary>
            The car identifier.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEmbeddedInformation_t.SubSystemName">
            <summary>
            The sub-system name.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEmbeddedInformation_t.IdentifierString">
            <summary>
            The project identifier.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEmbeddedInformation_t.ConversionMask">
            <summary>
            The conversion mask.
            </summary>
        </member>
        <member name="M:Common.DebugMode.GetEmbeddedInformation_t.#ctor(System.String,System.String,System.String,System.String,System.Double,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="softwareVersion">The version reference of the embedded software.</param>
            <param name="carID">The car identifier.</param>
            <param name="subSystemName">The sub-system name.</param>
            <param name="identifierString">The project identifier.</param>
            <param name="conversionMask">The conversion mask.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.GetEmbeddedInformation_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.GetChartMode_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.GetChartMode() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetChartMode_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetChartMode_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetChartMode_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetChartMode_t.ChartMode">
            <summary>
            The current chart mode.
            </summary>
        </member>
        <member name="M:Common.DebugMode.GetChartMode_t.#ctor(Common.Communication.ChartMode,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="chartMode">The current chart mode.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.GetChartMode_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.SetChartMode_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.SetChartMode() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartMode_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartMode_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartMode_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartMode_t.ChartMode">
            <summary>
            The current chart mode.
            </summary>
        </member>
        <member name="M:Common.DebugMode.SetChartMode_t.#ctor(Common.Communication.ChartMode,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="chartMode">The current chart mode.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.SetChartMode_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.SetChartIndex_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.SetChartIndex() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartIndex_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartIndex_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartIndex_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartIndex_t.ChannelIndex">
            <summary>
            The chart recorder channel index that is to be configured.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartIndex_t.WatchIdentifier">
            <summary>
            The watch identifier of the watch variable that is to be assigned to the channel.
            </summary>
        </member>
        <member name="M:Common.DebugMode.SetChartIndex_t.#ctor(System.Int16,System.Int16,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="channelIndex">The chart recorder channel index.</param>
            <param name="watchIdentifier">The watch identifier of the watch variable that is to be assigned to the channel.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.SetChartIndex_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.SetChartScale_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.SetChartScale() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartScale_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartScale_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartScale_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartScale_t.WatchIdentifier">
            <summary>
            The watch identifier of the watch variable that is to be assigned to the channel.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartScale_t.MaxChartScaleRaw">
            <summary>
            The watch variable raw value associated with the maximum Y axis value.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetChartScale_t.MinChartScaleRaw">
            <summary>
            The watch variable raw value associated with the minimum Y axis value.
            </summary>
        </member>
        <member name="M:Common.DebugMode.SetChartScale_t.#ctor(System.Int16,System.Double,System.Double,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="watchIdentifier">The watch identifier of the watch variables that is to be scaled.</param>
            <param name="maxChartScaleRaw">The watch variable raw value associated with the maximum Y axis value.</param>
            <param name="minChartScaleRaw">The watch variable raw value associated with the minimum Y axis value.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.SetChartScale_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.SendVariable_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.SendVariable() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SendVariable_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SendVariable_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SendVariable_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SendVariable_t.DictionaryIndex">
            <summary>
            The watch identifier of the variable that is to be updated.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SendVariable_t.DataType">
            <summary>
            The data type of the watch variable that is to be updated.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SendVariable_t.Data">
            <summary>
            The new value of the watch variable that is to be updated.
            </summary>
        </member>
        <member name="M:Common.DebugMode.SendVariable_t.#ctor(System.Int16,System.Int16,System.Double,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="dictionaryIndex">The watch identifier of the variable that is to be updated.</param>
            <param name="dataType">The data type of the watch variable that is to be updated.</param>
            <param name="data">The new value of the watch variable that is to be updated.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.SendVariable_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.SetWatchElements_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.SetWatchElements() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetWatchElements_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetWatchElements_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetWatchElements_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetWatchElements_t.WatchElements">
            <summary>
            The watch identifiers associated with the watch elements.
            </summary>
        </member>
        <member name="M:Common.DebugMode.SetWatchElements_t.#ctor(System.Int16[],Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="watchElements">The watch identifiers associated with the watch elements.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.SetWatchElements_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.UpdateWatchElements_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.UpdateWatchElements() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateWatchElements_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateWatchElements_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateWatchElements_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateWatchElements_t.ForceUpdate">
            <summary>
            Flag to control whether all data values are to be updated. 0x01 to force update; otherwise, 0x0.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateWatchElements_t.WatchValues">
            <summary>
            The values of the watch variables.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateWatchElements_t.WatchDataTypes">
            <summary>
            The data types of the watch variables.
            </summary>
        </member>
        <member name="M:Common.DebugMode.UpdateWatchElements_t.#ctor(System.Int16,System.Double[],System.Int16[],Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="forceUpdate">Flag to control whether all data values are to be updated. 0x01 to force update; otherwise, 0x0.</param>
            <param name="watchValues">The values of the watch variables.</param>    
            <param name="watchDataTypes">The data types of the watch variables.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.UpdateWatchElements_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.ChangeEventLog_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.ChangeEventLog() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ChangeEventLog_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ChangeEventLog_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ChangeEventLog_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ChangeEventLog_t.EventLogIndex">
            <summary>
            The index of the event log.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ChangeEventLog_t.SampleIntervalMs">
            <summary>
            The base interval, in ms, between samples.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ChangeEventLog_t.ChangeStatus">
            <summary>
            The change status of the log.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ChangeEventLog_t.MaxTasks">
            <summary>
            The maximum number of tasks supported by the log.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ChangeEventLog_t.MaxEventsPerTask">
            <summary>
            The maximum number of events per task.
            </summary>
        </member>
        <member name="M:Common.DebugMode.ChangeEventLog_t.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="eventLogIndex">The index of the event log.</param>
            <param name="sampleIntervalMs">The base interval, in ms, between samples.</param>
            <param name="changeStatus">The change status of the log.</param>
            <param name="maxTasks">The maximum number of tasks supported by the log.</param>
            <param name="maxEventsPerTask">The maximum number of events per task.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.ChangeEventLog_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.LoadFaultlog_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.LoadFaultlog() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.LoadFaultlog_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.LoadFaultlog_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.LoadFaultlog_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.LoadFaultlog_t.EventCount">
            <summary>
            The number of events associated with the log.
            </summary>
        </member>
        <member name="F:Common.DebugMode.LoadFaultlog_t.OldIndex">
            <summary>
            The old index value.
            </summary>
        </member>
        <member name="F:Common.DebugMode.LoadFaultlog_t.NewIndex">
            <summary>
            The new index value.
            </summary>
        </member>
        <member name="M:Common.DebugMode.LoadFaultlog_t.#ctor(System.Int16,System.UInt32,System.UInt32,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="eventCount">The number of events associated with the log.</param>
            <param name="oldIndex">The old index value.</param>
            <param name="newIndex">The new index value.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.LoadFaultlog_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.GetFaultHdr_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.GetFaultHdr() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultHdr_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultHdr_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultHdr_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultHdr_t.EventIndex">
            <summary>
            The event index.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultHdr_t.EventIdentifier">
            <summary>
            The event identifier.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultHdr_t.TaskIdentifier">
            <summary>
            The task identifier.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultHdr_t.Time">
            <summary>
            The time of the event.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultHdr_t.Date">
            <summary>
            The date of the event.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultHdr_t.StreamSaved">
            <summary>
            The stream number associated with the event, if available; otherwise -1.
            </summary>
        </member>
        <member name="M:Common.DebugMode.GetFaultHdr_t.#ctor(System.Int16,System.Int16,System.Int16,System.String,System.String,System.Int16,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="eventIndex">The event index.</param>
            <param name="eventIdentifier">The event identifier.</param>
            <param name="taskIdentifier">The task identifier.</param>
            <param name="time">The time of the event.</param>
            <param name="date">The date of the event.</param>
            <param name="streamSaved">The stream number associated with the event, if available; otherwise -1.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.GetFaultHdr_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.GetEventLog_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.GetEventLog() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEventLog_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEventLog_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEventLog_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEventLog_t.EventLogIndex">
            <summary>
            The index of the current event log.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetEventLog_t.EventLogCount">
            <summary>
            The number of events associated with the current event log.
            </summary>
        </member>
        <member name="M:Common.DebugMode.GetEventLog_t.#ctor(System.Int16,System.Int16,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="eventLogIndex">The index of the current event log.</param>
            <param name="eventLogCount">The number of events associated with the current event log.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.GetEventLog_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.FreeEventLogMemory_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.FreeEventLogMemory() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.FreeEventLogMemory_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.FreeEventLogMemory_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.FreeEventLogMemory_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="M:Common.DebugMode.FreeEventLogMemory_t.#ctor(Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.FreeEventLogMemory_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.ExitEventLog_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.ExitEventLog() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExitEventLog_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExitEventLog_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExitEventLog_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="M:Common.DebugMode.ExitEventLog_t.#ctor(Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.ExitEventLog_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.InitializeEventLog_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.InitializeEventLog() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitializeEventLog_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitializeEventLog_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.InitializeEventLog_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="M:Common.DebugMode.InitializeEventLog_t.#ctor(Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.InitializeEventLog_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.ClearEvent_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.ClearEvent() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ClearEvent_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ClearEvent_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ClearEvent_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="M:Common.DebugMode.ClearEvent_t.#ctor(Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.ClearEvent_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.GetFaultVar_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.GetFaultVar() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultVar_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultVar_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultVar_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultVar_t.EventIndex">
            <summary>
            The event index.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultVar_t.EventVariableCount">
            <summary>
            The number of event variables associated with the event.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultVar_t.DataTypes">
            <summary>
            The data types associated with each event variable.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetFaultVar_t.Values">
            <summary>
            The values of the event variables.
            </summary>
        </member>
        <member name="M:Common.DebugMode.GetFaultVar_t.#ctor(System.Int16,System.Int16,System.Int16[],System.Double[],Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="eventIndex">The event index.</param>
            <param name="eventVariableCount">The number of event variables associated with the event.</param>
            <param name="dataTypes">The data types associated with each event variable.</param>
            <param name="values">The values of the event variables.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.GetFaultVar_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.GetDefaultStreamInformation_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.GetDefaultStreamInformation() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetDefaultStreamInformation_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetDefaultStreamInformation_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetDefaultStreamInformation_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetDefaultStreamInformation_t.WatchVariableCount">
            <summary>
            The number of watch variables included in the data stream.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetDefaultStreamInformation_t.SampleCount">
            <summary>
            The number of data samples associated with the data stream.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetDefaultStreamInformation_t.SampleMultiple">
            <summary>
            The multiple of the base interval at which the data is recorded.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetDefaultStreamInformation_t.WatchIdentifiers">
            <summary>
            The watch identifiers associated with the data stream.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetDefaultStreamInformation_t.DataTypes">
            <summary>
            The data type corresponding to each watch variable contained within the data stream.
            </summary>
        </member>
        <member name="M:Common.DebugMode.GetDefaultStreamInformation_t.#ctor(System.Int16,System.Int16,System.Int16,System.Int16[],System.Int16[],Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="watchVariableCount">The number of watch variables included in the data stream.</param>
            <param name="sampleCount">The number of data samples associated with the data stream.</param>
            <param name="sampleMultiple">The multiple of the base interval at which the data is recorded.</param>
            <param name="watchIdentifiers">The watch identifiers associated with the data stream.</param>
            <param name="dataTypes">The data type corresponding to each watch variable contained within the data stream.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.GetDefaultStreamInformation_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.GetStreamInformation_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.GetStreamInformation() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStreamInformation_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStreamInformation_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStreamInformation_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStreamInformation_t.StreamNumber">
            <summary>
            The stream number for which the stream information is required.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStreamInformation_t.WatchVariableCount">
            <summary>
            The number of watch variables included in the data stream.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStreamInformation_t.SampleCount">
            <summary>
            The number of data samples associated with the data stream.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStreamInformation_t.SampleMultiple">
            <summary>
            The multiple of the base interval at which the data is recorded.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStreamInformation_t.WatchIdentifiers">
            <summary>
            The watch identifiers associated with the data stream.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStreamInformation_t.DataTypes">
            <summary>
            The data type corresponding to each watch variable contained within the data stream.
            </summary>
        </member>
        <member name="M:Common.DebugMode.GetStreamInformation_t.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16[],System.Int16[],Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="streamNumber">The stream number for which the stream information is required.</param>
            <param name="watchVariableCount">The number of watch variables included in the data stream.</param>
            <param name="sampleCount">The number of data samples associated with the data stream.</param>
            <param name="sampleMultiple">The multiple of the base interval at which the data is recorded.</param>
            <param name="watchIdentifiers">The watch identifiers associated with the data stream.</param>
            <param name="dataTypes">The data type corresponding to each watch variable contained within the data stream.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.GetStreamInformation_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.GetStream_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.GetStream() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStream_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStream_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStream_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStream_t.StreamNumber">
            <summary>
            The stream number for which the stream information is required.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStream_t.DataBuffer">
            <summary>
            The values of the watch variables.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStream_t.TimeOrigin">
            <summary>
            The start time of the plot.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStream_t.WatchVariableCount">
            <summary>
            The number of watch variables included in the data stream.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStream_t.SampleCount">
            <summary>
            The number of data samples associated with the data stream.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetStream_t.DataTypes">
            <summary>
            The data type corresponding to each watch variable contained within the data stream.
            </summary>
        </member>
        <member name="M:Common.DebugMode.GetStream_t.#ctor(System.Int16,System.Int32[],System.Int16,System.Int16,System.Int16,System.Int16[],Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="streamNumber">The stream number.</param>
            <param name="dataBuffer">The values of the watch variables.</param>
            <param name="timeOrigin">The start time of the plot.</param>
            <param name="watchVariableCount">The number of watch variables included in the data stream.</param>
            <param name="sampleCount">The number of data samples associated with the data stream.</param>
            <param name="dataTypes">The data type corresponding to each watch variable contained within the data stream.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.GetStream_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.SetDefaultStreamInformation_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.SetDefaultStreamInformation() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetDefaultStreamInformation_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetDefaultStreamInformation_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetDefaultStreamInformation_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetDefaultStreamInformation_t.WatchVariableCount">
            <summary>
            The number of watch variables included in the data stream.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetDefaultStreamInformation_t.SampleMultiple">
            <summary>
            The multiple of the base interval at which the data is recorded.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SetDefaultStreamInformation_t.WatchIdentifiers">
            <summary>
            The watch identifiers associated with the data stream.
            </summary>
        </member>
        <member name="M:Common.DebugMode.SetDefaultStreamInformation_t.#ctor(System.Int16,System.Int16,System.Int16[],Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="watchVariableCount">The number of watch variables included in the data stream.</param>
            <param name="sampleMultiple">The multiple of the base interval at which the data is recorded.</param>
            <param name="watchIdentifiers">The watch identifiers associated with the data stream.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.SetDefaultStreamInformation_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.CheckFaultlogger_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32.CheckFaultlogger() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.CheckFaultlogger_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.CheckFaultlogger_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.CheckFaultlogger_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.CheckFaultlogger_t.EventCount">
            <summary>
            The number of events associated with the log.
            </summary>
        </member>
        <member name="F:Common.DebugMode.CheckFaultlogger_t.NewIndex">
            <summary>
            The index value for any new event.
            </summary>
        </member>
        <member name="M:Common.DebugMode.CheckFaultlogger_t.#ctor(System.Int16,System.UInt32,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="eventCount">The number of events associated with the log.</param>
            <param name="newIndex">The index value for any new event.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.CheckFaultlogger_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.GetSelfTestSpecialMessage_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32SelfTest.GetSelfTestSpecialMessage() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestSpecialMessage_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestSpecialMessage_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestSpecialMessage_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestSpecialMessage_t.Result">
            <summary>
            The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            'readon' parameter applies and (3) represents an unknown error.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestSpecialMessage_t.Reason">
            <summary>
            A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the <c>SELFTESTERRMESS</c> table 
            of the data dictionary in order to determine the error message returned from the VCU.
            </summary>
        </member>
        <member name="M:Common.DebugMode.GetSelfTestSpecialMessage_t.#ctor(System.Int16,System.Int16,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="result">The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            <paramref name="reason"/> parameter applies and (3) represents an unknown error.</param>
            <param name="reason">A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the <c>SELFTESTERRMESS</c> table 
            of the data dictionary in order to determine the error message returned from the VCU.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.GetSelfTestSpecialMessage_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.StartSelfTestTask_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32SelfTest.StartSelfTestTask() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.StartSelfTestTask_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.StartSelfTestTask_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.StartSelfTestTask_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.StartSelfTestTask_t.Result">
            <summary>
            The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            'reason' parameter applies and (3) represents an unknown error.
            </summary>
        </member>
        <member name="F:Common.DebugMode.StartSelfTestTask_t.Reason">
            <summary>
            A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the <c>SELFTESTERRMESS</c> table 
            of the data dictionary in order to determine the error message returned from the VCU.
            </summary>
        </member>
        <member name="M:Common.DebugMode.StartSelfTestTask_t.#ctor(System.Int16,System.Int16,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="result">The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            <paramref name="reason"/> parameter applies and (3) represents an unknown error.</param>
            <param name="reason">A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the <c>SELFTESTERRMESS</c> table 
            of the data dictionary in order to determine the error message returned from the VCU.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.StartSelfTestTask_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.ExitSelfTestTask_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32SelfTest.ExitSelfTestTask() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExitSelfTestTask_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExitSelfTestTask_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExitSelfTestTask_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExitSelfTestTask_t.Result">
            <summary>
            The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            'reason' parameter applies and (3) represents an unknown error.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExitSelfTestTask_t.Reason">
            <summary>
            A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the <c>SELFTESTERRMESS</c> table 
            of the data dictionary in order to determine the error message returned from the VCU.
            </summary>
        </member>
        <member name="M:Common.DebugMode.ExitSelfTestTask_t.#ctor(System.Int16,System.Int16,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="result">The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            <paramref name="reason"/> parameter applies and (3) represents an unknown error.</param>
            <param name="reason">A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the <c>SELFTESTERRMESS</c> table 
            of the data dictionary in order to determine the error message returned from the VCU.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.ExitSelfTestTask_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.AbortSTSequence_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32SelfTest.AbortSTSequence() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.AbortSTSequence_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.AbortSTSequence_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.AbortSTSequence_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="M:Common.DebugMode.AbortSTSequence_t.#ctor(Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.AbortSTSequence_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.SendOperatorAcknowledge_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32SelfTest.SendOperatorAcknowledge() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SendOperatorAcknowledge_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SendOperatorAcknowledge_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.SendOperatorAcknowledge_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="M:Common.DebugMode.SendOperatorAcknowledge_t.#ctor(Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.SendOperatorAcknowledge_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.UpdateSTTestList_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32SelfTest.UpdateSTTestList() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTTestList_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTTestList_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTTestList_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTTestList_t.TestCount">
            <summary>
            The number of self tests that are defined in the list.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTTestList_t.Tests">
            <summary>
            An array of self test identifiers that define which self tests are included in the list.
            </summary>
        </member>
        <member name="M:Common.DebugMode.UpdateSTTestList_t.#ctor(System.Int16,System.Int16[],Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <remarks>This method will define the list of self-tests that are to be executed once the tester selects the execute command. The self tests are defined 
            using the self test identifiers defined in the data dictionary.</remarks>
            <param name="testCount">The number of tests in the list.</param>
            <param name="tests">A list of the selfTestIdentifiers.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.UpdateSTTestList_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.RunPredefinedSTTests_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32SelfTest.RunPredefinedSTTests() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.RunPredefinedSTTests_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.RunPredefinedSTTests_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.RunPredefinedSTTests_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.RunPredefinedSTTests_t.TestListIdentifier">
            <summary>
            The test list identifier of the predefined self tests that are to be executed.
            </summary>
        </member>
        <member name="M:Common.DebugMode.RunPredefinedSTTests_t.#ctor(System.Int16,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <remarks>This method will define the list of self-tests that are to be executed once the tester selects the execute command. The self tests are defined 
            using the self test identifiers defined in the data dictionary.</remarks>
            <param name="testListIdentifier">The test list identifier of the predefined self tests that are to be executed.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.RunPredefinedSTTests_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.UpdateSTLoopCount_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32SelfTest.UpdateSTLoopCount() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTLoopCount_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTLoopCount_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTLoopCount_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTLoopCount_t.LoopCount">
            <summary>
            The number of cycles/loops of the defined tests that are to be performed.
            </summary>
        </member>
        <member name="M:Common.DebugMode.UpdateSTLoopCount_t.#ctor(System.Int16,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="loopCount">The number of cycles/loops of the defined tests that are to be performed.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.UpdateSTLoopCount_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.ExecuteSTTestList_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32SelfTest.ExecuteSTTestList() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExecuteSTTestList_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExecuteSTTestList_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExecuteSTTestList_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.ExecuteSTTestList_t.TruckInformation">
            <summary>
            The truck to which the self tests apply. This does not apply on the CTA project, separate self-tests are set up for each truck.
            </summary>
        </member>
        <member name="M:Common.DebugMode.ExecuteSTTestList_t.#ctor(Common.Communication.TruckInformation,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="truckInformation">The truck to which the self tests apply. This does not apply on the CTA project, separate self-tests are set up for each truck.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.ExecuteSTTestList_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.GetSelfTestResult_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32SelfTest.GetSelfTestResult() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestResult_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestResult_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestResult_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestResult_t.ResultAvailable">
            <summary>
            A flag to indicate whether a valid result is available. A value of 1 indicates that a valid result is available; otherwise, 
            0.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestResult_t.MessageMode">
            <summary>
            An enumerator that defines the type of message returned from the VCU.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestResult_t.TestID">
            <summary>
            The test identifier associated with the message.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestResult_t.TestCase">
            <summary>
            The test case number associated with the message.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestResult_t.TestResult">
            <summary>
            Used with the passive and logic tests to define whether the test passed or failed. A value of 1 indicates that the test passed, 
            whereas a value of 2 indicates that the test failed.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestResult_t.TruckInformation">
            <summary>
            An enumerator to define the truck information associated with the message.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestResult_t.VariableCount">
            <summary>
            The number of self test variables associated with the message.
            </summary>
        </member>
        <member name="F:Common.DebugMode.GetSelfTestResult_t.Results">
            <summary>
            An array containing the interactive results for the current test.
            </summary>
        </member>
        <member name="M:Common.DebugMode.GetSelfTestResult_t.#ctor(System.Int16,Common.Communication.MessageMode,System.Int16,System.Int16,System.Int16,Common.Communication.TruckInformation,System.Int16,Common.Communication.InteractiveResults_t[],Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="resultAvailable">A flag to indicate whether a valid result is available. A value of 1 indicates that a valid result is available; otherwise, 
            0.</param>
            <param name="messageMode">The type of message returned from the VCU.</param>
            <param name="testIdentifier">The test result identifier; the interpretation of this value is dependent upon the message mode. For detailed messages, this 
            value represents the self test identifier.</param>
            <param name="testCase">The test case number associated with the message.</param>
            <param name="testResult">Used with the passive and logic self tests to define whether the test passed or failed. A value of 1 indicates that the test 
            passed; otherwise, the test failed.</param>
            <param name="truckInformation">An enumerator to define the truck information associated with the message.</param>
            <param name="variableCount">The number of variables associated with the message.</param>
            <param name="results">An array containing the interactive results for the current test.</param>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.GetSelfTestResult_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.DebugMode.UpdateSTMode_t">
            <summary>
            The structure used to contain the parameter information associated with the PTUDLL32SelfTest.UpdateSTMode() method.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTMode_t.Signature">
            <summary>
            The signature of the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTMode_t.TimeStamp">
            <summary>
            The time stamp associated with the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTMode_t.ErrorCode">
            <summary>
            The error code returned from the call.
            </summary>
        </member>
        <member name="F:Common.DebugMode.UpdateSTMode_t.SelfTestMode">
            <summary>
            The required self test mode.
            </summary>
        </member>
        <member name="M:Common.DebugMode.UpdateSTMode_t.#ctor(Common.Communication.SelfTestMode,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <remarks>This call is used to check whether communication with the VCU has been lost.</remarks>
            <param name="selfTestMode">The required self test mode.</param>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
            <param name="errorCode">The error code returned from the call.</param>
        </member>
        <member name="M:Common.DebugMode.UpdateSTMode_t.ToXML">
            <summary>
            Convert the structure to an XML element.
            </summary>
            <returns>The structure converted to an XML element.</returns>
        </member>
        <member name="T:Common.Communication.ICommunicationEvent">
            <summary>
            An interface to define the communication methods associated with the event sub-system - Event.dll.
            </summary>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.ChangeEventLog(Common.Configuration.Log)">
            <summary>
            Change the current event log on the VCU to the specified log and initialize the: DataRecordingRate, ChangeStatus, MaxTasks and MaxEventsPerTask properties 
            of the log structure with the values returned from the VCU.
            </summary>
            <param name="log">The required event log.</param>
            <remarks>The identifier field of the specified log must be initialized prior to calling this method. Note: The call to the ChangeEventLog() method in 
            PTUDLL32.dll refers to the eventLogIndex, whereas the log structure uses the event log identifier. The event log index is zero based and is equivalent 
            to the event log identifier - 1.</remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.ChangeEventLog() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.LoadEventLog(System.Int16@,System.UInt32@,System.UInt32@)">
            <summary>
            Load the current event log into memory.
            </summary>
            <param name="eventCount">The number of events that have been loaded into memory.</param>
            <param name="oldIndex">The old event index.</param>
            <param name="newIndex">The new event index.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.LoadFaultlog() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.GetEventRecord(Common.Configuration.Log,System.Int16,Common.Configuration.EventRecord@)">
            <summary>
            Get the event record corresponding to the specified index for the event log that is currently loaded into memory.
            </summary>
            <param name="currentEventLog">The event log that has been loaded into memory using the LoadEventLog() method.</param>
            <param name="eventIndex">The event index of the required event record.</param>
            <param name="eventRecord">The event record corresponding to the specified event index.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFaultHdr() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.FreeEventLogMemory">
            <summary>
            Clear the event log memory.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.FreeEventLogMemory() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.GetEventLogIndex(System.Int16@,System.Int16@)">
            <summary>
            Get the index of the event log that is currently loaded into memory.
            </summary>
            <param name="eventLogIndex">The index of the event log that is currently loaded into memory.</param>
            <param name="eventLogCount">The number of event logs supported by the VCU.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetEventLog() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.GetFaultVar(System.Int16,System.Int16,System.Int16[],System.Double[]@)">
            <summary>
            Retrieve the event variables associated with the specified event.
            </summary>
            <remarks>The number of events consist of the event variables that are collected for every event plus the event specific variables. The event variables that 
            are collected for each event consist of those event variables associated with the structure identifier value of 0 less those defined as event header
            variables.</remarks>
            <param name="eventIndex">The index of the event.</param>
            <param name="eventVariableCount">The number of event variable that are to be retrieved.</param>
            <param name="dataTypes">The data types associated with each of the variables.</param>
            <param name="values">The event variable values associated with each event.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFaultVar() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.InitializeEventLog">
            <summary>
            Initialize the event log. Clears all event information stored on battery backed RAM for both the maintenance and engineering logs. This also clears 
            both the cumulative history, recent history columns and all data logs. This function is typically used to establish a zero event/fault reference base when a
            replacement VCU is installed in a car.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.InitializeEventLog() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.ClearEvent">
            <summary>
            Clear the current event log. Remove all events contained in the active event log. This also erases any data logs associated with the event log.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.ClearEvent() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.ExitEventLog">
            <summary>
            Exit the event sub-system.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.ExitEventLog() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.GetDefaultStreamInformation(System.Int16@,System.Int16@,System.Int16@,System.Int16[]@,System.Int16[]@)">
            <summary>
            Get the parameters associated with the default stream.
            </summary>
            <param name="watchVariableCount">The number of watch variables included in the data stream.</param>
            <param name="sampleCount">The number of data samples associated with the data stream.</param>
            <param name="sampleMultiple">The multiple of the base recording interval (60ms) at which the data is sampled.</param>
            <param name="watchIdentifiers">The watch identifiers of the watch variables contained within the data stream.</param>
            <param name="dataTypes">The data types corresponding to each of the watch variables contained within the data stream.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetDefaultStreamInformation() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.GetStreamInformation(System.Int16,System.Int16@,System.Int16@,System.Int16@,System.Int16[]@,System.Int16[]@)">
            <summary>
            Get the parameters associated with the specified stream.
            </summary>
            <param name="streamNumber">The stream number.</param>
            <param name="watchVariableCount">The number of watch variables included in the data stream.</param>
            <param name="sampleCount">The number of data samples associated with the data stream.</param>
            <param name="sampleMultiple">The multiple of the base recording interval (60ms) at which the data is sampled.</param>
            <param name="watchIdentifiers">The watch identifiers of the watch variables contained within the data stream.</param>
            <param name="dataTypes">The data type corresponding to each watch variable contained within the data stream.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetStreamInformation() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.GetStream(Common.Configuration.EventRecord)">
            <summary>
            Get the fault log/snapshot log data stream corresponding to the specified record.
            </summary>
            <param name="eventRecord">The event record associated with the data stream that is to be downloaded.</param>
            <returns>The data stream corresponding to the specified event record.</returns>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the calls to the PTUDLL32.GetStreamInformation() or PTUDLL32Event.GetStream() 
            methods is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.SetDefaultStreamInformation(System.Int16,System.Collections.Generic.List{System.Int16})">
            <summary>
            Set the default stream parameters.
            </summary>
            <param name="sampleMultiple">The sample multiple of the recording interval at which the data is to be recorded.</param>
            <param name="watchIdentifierList">The list of watch identifiers that are to be recorded.</param>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.CheckFaultLogger(System.Int16@,System.UInt32@,System.UInt32@)">
            <summary>
            Check the current event log for new events.
            </summary>
            <param name="eventCount">The number of new events that have been added to the event log.</param>
            <param name="newIndex">The new index of the latest event.</param>
            <param name="newEventsLogged">The number of new events logged since the last call using this method.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.CheckFaultlogger() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.GetFltFlagInfo(System.Int16[],System.Int16[]@,System.Int16[]@,System.Int16)">
            <summary>
            Get the status of the flags that control: (a) whether the event type is enabled and (b) whether the event type triggers the recoding of a data stream. 
            </summary>
            <param name="validFlags">An array of flags that define which of the available event types are valid for the current log. The total length of the array is 
            the maximum number of events per task multiplied by the maximum number of tasks and the array element corresponding to a particular event type is defined as: 
            {task identifier} * {maximum number of events per task} + {event identifier}. True, indicates that the event type is valid; otherwise, false.</param>
            <param name="enabledFlags">An array of flags that indicate whether the event type is enabled. True, indicates that the event type is enabled; otherwise,
            false.</param>
            <param name="streamTriggeredFlags">An array of flags that indicate whether the event type triggers the recording of a data stream. True, indicates that the 
            event type triggers the recording of a data stream; otherwise false.</param>
            <param name="eventCount">The maximum number of event types i.e. the maximum number of event types per task multiplied by the maximum number of tasks.</param>
            <remarks>The size of the <paramref name="enabledFlags"/> and <paramref name="streamTriggeredFlags"/> arrays is equal to the number of defined 
            event types associated with the current log. The array index is mapped to a table that is derived by sorting the records of the EVENTS table of the data 
            dictionary corresponding to the LOGID field associated with the current log by the TASKID, EVENTID fields, in ascending order. </remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFltFlagInfo() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.SetFaultFlags(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the flag that controls: (a) whether the specified event type is enabled and (b) whether the event type triggers the recoding of a data stream. 
            </summary>
            <param name="taskIdentfier">The task identifier associated with the event type.</param>
            <param name="eventIdentifier">The event identifier associated with the event type.</param>
            <param name="enabledFlag">A flag to control whether the event type corresponding to the specified task and event identifiers is to be enabled. True, if 
            the event type is to be enabled; otherwise, false.</param>
            <param name="streamTriggeredFlag">A flag to control whether the event type corresponding to the specified task and event identifiers is to trigger the 
            recording of a data stream. True, if the event type is to trigger the recording of a data stream; otherwise, false.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.SetFaultFlags() method is not 
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.GetFltHistInfo(System.Int16[],System.Int16[]@,System.Int16[]@,System.Int16,System.Int16)">
            <summary>
            Get the event history associated with the current log.
            </summary>
            <param name="validFlags">An array of flags that define which of the available event types are valid for the current log. The total length of the array is 
            the maximum number of events per task multiplied by the maximum number of tasks and the array element corresponding to a particular event type is defined as: 
            {task identifier} * {maximum number of events per task} + {event identifier}. True, indicates that the event type is valid; otherwise, false.</param>
            <param name="cumulativeHistoryCounts">An array that contains the cumulative number of events of each event type, not including recent history.</param>
            <param name="recentHistoryCounts">An array that contains the recent number of events of each event type.</param>
            <param name="maxTasks">The maximum number of tasks that are supported by the current event log.</param>
            <param name="maxEventsPerTask">The maximum number of events per task that are supported by the current event log.</param>
            <remarks>The size of the <paramref name="cumulativeHistoryCounts"/> and <paramref name="recentHistoryCounts"/> arrays is equal to the number of defined 
            event types associated with the current log. The array index is mapped to a table that is derived by sorting the records of the EVENTS table of the data 
            dictionary corresponding to the LOGID field associated with the current log by the TASKID, EVENTID fields, in ascending order. </remarks>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetFltHistInfo() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.ICommunicationEvent.ConvertToWorkset(System.String,System.Int16[],System.Int16)">
            <summary>
            Convert the specified parameters into a valid workset.
            </summary>
            <remarks>
            All of the watch identifiers are added to Column[0] of the workset in the order in which they appear in <paramref name="variableIdentifiers"/> and 
            the security level of the workset is set to the lowest security level.
            </remarks>
            <param name="name">The name of the workset.</param>
            <param name="variableIdentifiers">The array of watch identifiers.</param>
            <param name="sampleMultiple">The multiple of the recording interval at which the data is recorded.</param>
            <returns>The watch identifiers contained within <paramref name="variableIdentifiers"/> as a valid workset.</returns>
        </member>
        <member name="T:Common.Communication.CommunicationParentOffline">
            <summary>
            Base class to simulate communication with the target hardware.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParentOffline.Version">
            <summary>
            The version number of the embedded software. Value: "NO VERSION".
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParentOffline.CarIdentifier">
            <summary>
            The car identifier. Value: "-".
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParentOffline.SubSystemName">
            <summary>
            The sub-system name. Value: "Bombardier Transportation Offline Mode".
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParentOffline.ProjectIdentifier">
            <summary>
            The project identifier. Value: "Bombardier".
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParentOffline.ConversionMask">
            <summary>
            The conversion mask. Value: 0.0.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParentOffline.SleepIntervalMsDownloadChartRecorderWorkset">
            <summary>
            The interval, in ms, to wait before returning from the DownloadChartRecorderWorkset() method. Value: 5 sec.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParentOffline.m_WatchElements">
            <summary>
            A table of the current watch elements, i.e. those watch variables that are currently monitored by the target hardware, mapped by element
            index.
            </summary>
            <remarks>Each watch element contains the: watch identifier; corresponding data type and current value of the watch variable being
            monitored.</remarks>
        </member>
        <member name="F:Common.Communication.CommunicationParentOffline.m_CommunicationSetting">
            <summary>
            The communication settings associated with the selected target.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParentOffline.m_ChartMode">
            <summary>
            The current chart recorder mode.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParentOffline.m_CarID">
            <summary>
            The car identifier.
            </summary>
        </member>
        <member name="M:Common.Communication.CommunicationParentOffline.#ctor">
            <summary>
            Initialize a new instance of the class.
            </summary>
        </member>
        <member name="M:Common.Communication.CommunicationParentOffline.#ctor(Common.Communication.CommunicationSetting_t)">
            <summary>
            Initialize a new instance of the class and set the <c>CommunicationSetting</c> property to the specified communication setting.
            </summary>
            <param name="communicationSetting">The communication setting that is to be used to initialize the <c>CommunicationSetting</c> property.
            </param>
        </member>
        <member name="M:Common.Communication.CommunicationParentOffline.#ctor(Common.Communication.ICommunicationParent)">
            <summary>
            Initialize a new instance of the class and set the properties and member variables to those values associated with the specified
            communication interface.
            </summary>
            <param name="communicationInterface">Reference to the communication interface containing the properties and member variables that are to be
            used to initialize the class.</param>
        </member>
        <member name="M:Common.Communication.CommunicationParentOffline.InitCommunication(Common.Communication.CommunicationSetting_t)">
            <summary>
            Initialize the target hardware communication port.
            </summary>
            <param name="communicationsSetting">The communication settings.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.InitCommunication() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParentOffline.CloseCommunication(Common.Communication.Protocol)">
            <summary>
            Close the target hardware communication port.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.CloseCommunication() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParentOffline.GetEmbeddedInformation(Common.Communication.TargetConfiguration_t@)">
            <summary>
            Get the configuration information associated with the target hardware.
            </summary>
            <param name="targetConfiguration">The target configuration information retrieved from the target.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetEmbeddedInformation() method is
            not CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParentOffline.GetChartMode">
            <summary>
            Get the mode of the chart recorder. 
            </summary>
            <returns>The mode of the chart recorder: ramp, zero-output, full-scale, data.</returns>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetChartMode() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParentOffline.SetChartMode(Common.Communication.ChartMode)">
            <summary>
            Set the mode of the chart recorder.
            </summary>
            <param name="chartMode">The required mode of the chart recorder.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.SetChartMode() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParentOffline.SetChartIndex(System.Int16,System.Int16)">
            <summary>
            Assign the specified watch variable to the specified chart recorder channel index.
            </summary>
            <param name="channelIndex">The chart recorder channel index.</param>
            <param name="watchIdentifier">The watch identifier of the watch variable that is to be assigned to the channel.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from a call to the PTUDLL32.SetChartIndex() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParentOffline.SetChartScale(System.Int16,System.Double,System.Double)">
            <summary>
            Set the chart scaling for the specified watch variable.
            </summary>
            <param name="watchIdentifier">The watch identifier of the watch variables that is to be scaled.</param>
            <param name="maxChartScale">The watch variable engineering value associated with the maximum Y axis value.</param>
            <param name="minChartScale">The watch variable engineering value associated with the minimum Y axis value.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from a call to the PTUDLL32.SetChartScale() method is not
            CommunicationError.Success.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="watchIdentifier"/> does not exist in the current data
            dictionary.</exception>"
        </member>
        <member name="M:Common.Communication.CommunicationParentOffline.DownloadChartRecorderWorkset(Common.Configuration.Workset_t)">
            <summary>
            Download the specified chart recorder workset to the VCU.
            </summary>
            <param name="workset">The workset that is to be downloaded to the VCU.</param>
        </member>
        <member name="P:Common.Communication.CommunicationParentOffline.CommunicationSetting">
            <summary>
            Gets or sets the communication settings associated with the selected target.
            </summary>
        </member>
        <member name="P:Common.Communication.CommunicationParentOffline.CommDevice">
            <summary>
            Gets the communication device used to communicate with the selected VCU. intentionally
            return null since an actual communication device is not used when offline
            </summary>
        </member>
        <member name="P:Common.Communication.CommunicationParentOffline.WatchClockMarshall">
            <summary>
            Used to access interface methods to the embedded target that access and/or change the 
            watch variables and the real time clock.
            </summary>
        </member>
        <member name="T:Common.Communication.CommunicationException">
            <summary>
            User defined exception class for throwing a communication exceptions.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationException.m_CommunicationError">
            <summary>
            The communication error code.
            </summary>
        </member>
        <member name="M:Common.Communication.CommunicationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the communications exception class.
            </summary>
            <param name="auxMessage">A message to be passed to the exception handler.</param>
        </member>
        <member name="M:Common.Communication.CommunicationException.#ctor(System.String,Common.Communication.CommunicationError)">
            <summary>
            Initializes a new instance of the communications exception class. This constructor is used when the exception is thrown as a result of receiving an error
            code other than CommunicationError.Success from a call to one of the methods included in PTUDLL32.dll.
            </summary>
            <remarks>The PTUDLL32.dll dynamic link library is a set of communication methods developed in C++ to support communication with the VCU.</remarks>
            <param name="auxMessage">A message to be passed to the exception handler.</param>
            <param name="communicationError">The error code returned from the call to the PTUDLL32 dynamic link library..</param>
        </member>
        <member name="M:Common.Communication.CommunicationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the communications exception class. This constructor is used when the exception is thrown as a result of catching a 
            different type of exception. The initial exception information is also passed to the exception handler to supplement the information passed via this
            exception.
            </summary>
            <param name="auxMessage">A message to be passed to the exception handler.</param>
            <param name="innerException">The initial exception which triggered this exception.</param>
        </member>
        <member name="P:Common.Communication.CommunicationException.CommunicationError">
            <summary>
            Gets the communication error code.
            </summary>
        </member>
        <member name="T:Common.WatchControlLayout">
            <summary>
            A class to support configuration, drawing and layout of multiple <c>WatchControl</c> derived user controls.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.HeightWatchControl">
            <summary>
            The height, in pixels, of the watch variable user control. Value: 23.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.MarginLeftWatchControl">
            <summary>
            The left margin to be applied to <see>WatchControl</see> derived user controls. Value: 5.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.MarginRightWatchControl">
            <summary>
            The right margin to be applied to <see>WatchControl</see> derived user controls. Value: 5.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.MarginTopWatchControl">
            <summary>
            The top margin to be applied to <see>WatchControl</see> derived user controls. Value: 1.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.MarginBottomWatchControl">
            <summary>
            The bottom margin to be applied to <see>WatchControl</see> derived user controls. Value: 1.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.WidthWatchControlVariableNameField">
            <summary>
            The width, in pixels, of the variable name field of the watch variable user control. Value: 210.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.WidthWatchControlValueField">
            <summary>
            The width, in pixels, of the value field of the watch variable user control. Value: 130.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.WidthWatchControlUnitsField">
            <summary>
            The width, in pixels, of the units field of the watch variable user control. Value: 60.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.m_IsDisposed">
            <summary>
            Flag to indicate whether the class has been disposed of. True, indicates that the class has already been disposed of; otherwise, false.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.m_HistoricDataManager">
            <summary>
            Reference to the <c>HistoricDataManager</c> class, this supports the displaying of historic data and allows the time range to be zoomed in and out.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.m_Form">
            <summary>
            Reference to the <c>Form</c> which instantiated this class.
            </summary>
        </member>
        <member name="F:Common.WatchControlLayout.m_TabIndex">
            <summary>
            The tab index to be assigned to the user control.
            </summary>
        </member>
        <member name="M:Common.WatchControlLayout.#ctor(System.Windows.Forms.Form)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="form">Reference to the form which instantiated the class.</param>
        </member>
        <member name="M:Common.WatchControlLayout.#ctor(System.Windows.Forms.Form,Common.IHistoricDataManager)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="form">Reference to the form which instantiated the class.</param>
            <param name="historicDataManager">Reference to the <c>HistoricDataManager</c> object associated with the calling form.</param>
        </member>
        <member name="M:Common.WatchControlLayout.WriteColumnHeaders(System.String,System.Windows.Forms.Panel,Common.UserControls.VariableControlSize_t)">
            <summary>
            Writes the specified header text to the specified panel.
            </summary>
            <remarks>If <paramref name="headerText"/> is <c>null</c> or an empty string no headers are added.</remarks>
            <param name="headerText">The header text.</param>
            <param name="panel">Reference to the panel to which the header text is to be added.</param>
            <param name="watchControlSize">The structure defining the size related parameters of the label, <see cref="T:Common.UserControls.VariableControlSize_t"/>.</param>
        </member>
        <member name="M:Common.WatchControlLayout.ConfigureWatchControls(Common.UserControls.WatchControl[],System.Windows.Forms.Panel,Common.UserControls.VariableControlSize_t,System.Collections.Generic.List{System.Int16})">
            <summary>
            Instantiates a new <c>WatchControl</c> derived user control and configures the properties for each element of <paramref name="watchControls"/> based upon the 
            watch variables specified by <paramref name="oldIdentifierList"/>. Each user control is then added to the <c>Controls</c> property of
            <paramref name="panel"/>.
            </summary>
            <remarks>The length of the array should be equal to the count value associated with the list.</remarks>
            <param name="watchControls">The array of watch variable user controls that are to be configured.</param>
            <param name="panel">Reference to the <c>Panel</c> to which the user controls are to be added.</param>
            <param name="watchControlSize">The structure defining the size related parameters of the user control, <see cref="T:Common.UserControls.VariableControlSize_t"/>.</param>
            <param name="oldIdentifierList">The list of watch variable old identifiers.</param>
            <exception cref="T:System.ArgumentException">Thrown if the number of watch identifier entries in the list is incompatible with the length of the user control array.
            </exception>
        </member>
        <member name="P:Common.WatchControlLayout.TabIndex">
            <summary>
            Gets or set the tab index counter.
            </summary>
        </member>
        <member name="T:Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Add">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Bookmark">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Clear">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Close">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.ConnectionStringDataDictionary">
            <summary>
              Looks up a localized string similar to Provider=Microsoft.Jet.OLEDB.4.0; Data Source =.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Copy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.CreateNew">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.DescriptionSecurityLevel0">
            <summary>
              Looks up a localized string similar to Maintenance.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.DescriptionSecurityLevel1">
            <summary>
              Looks up a localized string similar to Technician.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.DescriptionSecurityLevel2">
            <summary>
              Looks up a localized string similar to Engineering.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.DescriptionSecurityLevel3">
            <summary>
              Looks up a localized string similar to Factory.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Download">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Edit_Undo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMChartModeGetFailed">
            <summary>
              Looks up a localized string similar to Unable to retrieve the mode of the chart recorder..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMChartModeSetFailed">
            <summary>
              Looks up a localized string similar to Unable to set the mode of the chart recorder..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMCsvSerializationErrorTypeNotSupported">
            <summary>
              Looks up a localized string similar to The class/struct of the object that is to be serialized is not supported or the data does not contain any records. The object must be of type EventLogFile_t.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMCyclicQueueInvalidArraySize">
            <summary>
              Looks up a localized string similar to Array is too small..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMCyclicQueueInvalidBufferSize">
            <summary>
              Looks up a localized string similar to The buffer size must be a positive value..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMCyclicQueueInvalidRank">
            <summary>
              Looks up a localized string similar to The array rank must be 1..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMCyclicQueueQueueEmptyDequeue">
            <summary>
              Looks up a localized string similar to Cannot dequeue an empty queue..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMCyclicQueueQueueEmptyPeek">
            <summary>
              Looks up a localized string similar to Cannot peek an empty queue..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMFileNotFound">
            <summary>
              Looks up a localized string similar to The specified file cannot be found..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMGetTargetConfigurationFailed">
            <summary>
              Looks up a localized string similar to Unable to retrieve the target configuration..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMHelpFileFormatInvalid">
            <summary>
              Looks up a localized string similar to The format of the specified help file is invalid..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMListBoxMultipleSelectionNotSupported">
            <summary>
              Looks up a localized string similar to System does not support multiple selections..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMNullReference">
            <summary>
              Looks up a localized string similar to Reference is null..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMOutOfRange">
            <summary>
              Looks up a localized string similar to Out of range..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMPortCloseFailed">
            <summary>
              Looks up a localized string similar to Unable to close the communication port..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMPortInitializationFailed">
            <summary>
              Looks up a localized string similar to Unable to initialize the communication port..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMSetChartIndexFailed">
            <summary>
              Looks up a localized string similar to Unable to set the chart index associated with channel {0} of the chart recorder..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMSetChartScaleFailed">
            <summary>
              Looks up a localized string similar to Unable to set the scale of a chart recorder channel..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMWinHlp32CallFailed">
            <summary>
              Looks up a localized string similar to The call to the WinHlp32 help engine was unsuccessful..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMWinHlp32NotInitialized">
            <summary>
              Looks up a localized string similar to The WinHlp32 help engine has not been initialized..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EMWorksetIntegrityCheckFailed">
            <summary>
              Looks up a localized string similar to There is a problem with the integrity check on the workset. Please contact the system administrator..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EnumeratorsAsNumbers">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.EnumeratorsAsText">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Favourite">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogOpenFilterDataDictionary">
            <summary>
              Looks up a localized string similar to Data Dictionary Files.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogOpenFilterEngineeringDatabase">
            <summary>
              Looks up a localized string similar to Engineering Database Files.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogOpenTitleDataDictionary">
            <summary>
              Looks up a localized string similar to Select Data Dictionary.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogOpenTitleEngineeringDatabase">
            <summary>
              Looks up a localized string similar to Select Engineering Database.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogOpenTitleProjectConfigurationDatabase">
            <summary>
              Looks up a localized string similar to Select Project Configuration Database.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveFilterBMP">
            <summary>
              Looks up a localized string similar to 16 Color Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveFilterDataDictionary">
            <summary>
              Looks up a localized string similar to Data Dictionary File.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveFilterEventLog">
            <summary>
              Looks up a localized string similar to Event Log.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveFilterFaultLog">
            <summary>
              Looks up a localized string similar to Data Stream.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveFilterJPEG">
            <summary>
              Looks up a localized string similar to JPEG File.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveFilterRecordedWatchFile">
            <summary>
              Looks up a localized string similar to Recorded Watch File.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveFilterSimulatedFaultLog">
            <summary>
              Looks up a localized string similar to Simulated Data Stream.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveTitleDataDictionary">
            <summary>
              Looks up a localized string similar to Save Data Dictionary.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveTitleEventLog">
            <summary>
              Looks up a localized string similar to Save Event Log.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveTitleFaultLog">
            <summary>
              Looks up a localized string similar to Save Data Stream.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveTitleImageFile">
            <summary>
              Looks up a localized string similar to Save Image File.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveTitleRecordedWatchFile">
            <summary>
              Looks up a localized string similar to Save Recorded Watch Data.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileDialogSaveTitleSimulatedFaultLog">
            <summary>
              Looks up a localized string similar to Save Simulated Data Stream.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileInformation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FileMnemonicDefaultWorkset">
            <summary>
              Looks up a localized string similar to Workset.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FilenameDefaultDataDictionary">
            <summary>
              Looks up a localized string similar to Configuration.xml.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FilenameDefaultDebugFile">
            <summary>
              Looks up a localized string similar to Debug.xml.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextAsStrings">
            <summary>
              Looks up a localized string similar to As Text.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextAsValues">
            <summary>
              Looks up a localized string similar to As Value.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextEdit">
            <summary>
              Looks up a localized string similar to Config..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextEnumerator">
            <summary>
              Looks up a localized string similar to Enum..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextEsc">
            <summary>
              Looks up a localized string similar to Back.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextFirst">
            <summary>
              Looks up a localized string similar to First.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextInfo">
            <summary>
              Looks up a localized string similar to Info.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextLast">
            <summary>
              Looks up a localized string similar to Last.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextMultiCursor">
            <summary>
              Looks up a localized string similar to Cursor.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextNext">
            <summary>
              Looks up a localized string similar to Next.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextPause">
            <summary>
              Looks up a localized string similar to Pause.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextPlay">
            <summary>
              Looks up a localized string similar to Play.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextPrevious">
            <summary>
              Looks up a localized string similar to Prev..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextReplay">
            <summary>
              Looks up a localized string similar to Replay.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextSave">
            <summary>
              Looks up a localized string similar to Save.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextTrip">
            <summary>
              Looks up a localized string similar to Trip.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyTextYTPlot">
            <summary>
              Looks up a localized string similar to YTPlot.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipEdit">
            <summary>
              Looks up a localized string similar to [Configure Watch Window].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipEditPlotLayout">
            <summary>
              Looks up a localized string similar to [Configure Plot Layout].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipEnumAsStrings">
            <summary>
              Looks up a localized string similar to [Show Enumerators as Text Strings].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipEnumAsValues">
            <summary>
              Looks up a localized string similar to [Show Enumerators as Integer Values].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipEsc">
            <summary>
              Looks up a localized string similar to [Return to Event Log Display].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipFirst">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipInfo">
            <summary>
              Looks up a localized string similar to [Show Header Information].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipLast">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipMultiCursor">
            <summary>
              Looks up a localized string similar to [Toggle Single/Multiple Cursors].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipNext">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipPause">
            <summary>
              Looks up a localized string similar to [Pause Screen Update].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipPauseReplay">
            <summary>
              Looks up a localized string similar to [Pause Playback].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipPlay">
            <summary>
              Looks up a localized string similar to [Playback in Real Time].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipPrevious">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipReplay">
            <summary>
              Looks up a localized string similar to [Replay Frames in Single-Step Mode].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipSave">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipTrip">
            <summary>
              Looks up a localized string similar to [Go to Trip Condition].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.FunctionKeyToolTipYTPlot">
            <summary>
              Looks up a localized string similar to [Show the Plot of Y Values Against Time].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.HeaderTextDataStream">
            <summary>
              Looks up a localized string similar to Data Stream.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Help">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Home">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.InformationLegendDate">
            <summary>
              Looks up a localized string similar to Date:.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.InformationLegendDuration">
            <summary>
              Looks up a localized string similar to Duration:.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.InformationLegendFrame">
            <summary>
              Looks up a localized string similar to Frame:.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.InformationLegendRecordingStartTime">
            <summary>
              Looks up a localized string similar to Rec. Start:.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.InformationLegendRTC">
            <summary>
              Looks up a localized string similar to Time:.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.InformationLegendStartTime">
            <summary>
              Looks up a localized string similar to Start:.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.InformationLegendStopTime">
            <summary>
              Looks up a localized string similar to Stop:.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.InformationLegendTime">
            <summary>
              Looks up a localized string similar to PC Time:.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Keys">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.LegendAvailable">
            <summary>
              Looks up a localized string similar to Available.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.LegendColumn">
            <summary>
              Looks up a localized string similar to Column.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.LegendPlayback">
            <summary>
              Looks up a localized string similar to Playback:.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.LegendTotalCount">
            <summary>
              Looks up a localized string similar to Total Count.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.LegendWorkset">
            <summary>
              Looks up a localized string similar to &amp;Workset:.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.LightMetallic">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBCaptionConfirm">
            <summary>
              Looks up a localized string similar to Confirm.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBCaptionError">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBCaptionInformation">
            <summary>
              Looks up a localized string similar to Information.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBCaptionQuestion">
            <summary>
              Looks up a localized string similar to Question.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBCaptionWarning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTBitmaskOnly">
            <summary>
              Looks up a localized string similar to This context menu option is only applicable to bitmask watch variables..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTCannotOverrideDefaultWorkset">
            <summary>
              Looks up a localized string similar to The security level of the default workset cannot be overridden..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTConfigProjectIDMismatch">
            <summary>
              Looks up a localized string similar to The project identifier defined in the project data dictionary does not match the project identifier that was passed as a command line parameter. Terminating the program..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTConfigSelectionInvalid">
            <summary>
              Looks up a localized string similar to The default project configuration file is not a valid selection for this menu option. Please select a configuration file that is based upon the following filename format: &apos;&lt;project-identifier&gt;VC&lt;4-digit-version-reference&gt;.xml&apos; e.g. &apos;{0}VC0193.xml&apos;..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTConfigurationFileLoadFailed">
            <summary>
              Looks up a localized string similar to Unable to open the XML configuration file..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTConfirmWorksetModify">
            <summary>
              Looks up a localized string similar to Are you sure that you want to modify the &apos;{0}&apos; workset ?.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTDatabaseConnectionFailed">
            <summary>
              Looks up a localized string similar to Unable to open a connection to the specified database..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTDefaultDataDictionaryNotFound">
            <summary>
              Looks up a localized string similar to The default data dictionary file could not be found. Please contact the system administrator..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTFrameNotFound">
            <summary>
              Looks up a localized string similar to An entry corresponding to the time of the trip could not be found..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTHelpFail">
            <summary>
              Looks up a localized string similar to Unable to display the help information..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTHelpFileNotFound">
            <summary>
              Looks up a localized string similar to The help document cannot be found..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTInstructionConfigureWorksets">
            <summary>
              Looks up a localized string similar to Please contact the system administrator or use the &apos;Configure/Worksets&apos; menu option to correct the workset(s)..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTInstructionSelectWorkset">
            <summary>
              Looks up a localized string similar to Please select a workset..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTInsufficientPrivilegesModify">
            <summary>
              Looks up a localized string similar to You do not have sufficient privileges to modify the workset..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTInvalidFormat">
            <summary>
              Looks up a localized string similar to The format of the selected file is not recognized..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTInvalidOldIdentifierList">
            <summary>
              Looks up a localized string similar to The invalid references are: {0}.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTLayoutChangesNotSaved">
            <summary>
              Looks up a localized string similar to The layout will be modified for the current session, however, these changes will not be committed to disk..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTOutsideOfRange">
            <summary>
              Looks up a localized string similar to The specified value is outside of the allowable range..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTProjectIdMismatch">
            <summary>
              Looks up a localized string similar to The project identifier associated with the selected file does not match that of the current configuration..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTQueryDeleteDefaultWorkset">
            <summary>
              Looks up a localized string similar to The selected workset is defined as the default workset. Are you sure that you want to delete this workset ?.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTQueryDeleteWorkset">
            <summary>
              Looks up a localized string similar to Are you sure that you want to delete &apos;{0}&apos;?.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTQueryEditDefaultWorkset">
            <summary>
              Looks up a localized string similar to The selected workset is defined as the default workset. Are you sure that you want to modify this workset ?.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTQueryOverrideSecurity">
            <summary>
              Looks up a localized string similar to Are you sure that you want to override the security level of the  &apos;{0}&apos; workset?.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTQueryRenameWorkset">
            <summary>
              Looks up a localized string similar to Are you sure that you want to rename the &apos;{0}&apos; workset ?.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTQuerySetAsDefaultWorkset">
            <summary>
              Looks up a localized string similar to Are you sure that you want to set &apos;{0}&apos; as the default workset?.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTReadOnly">
            <summary>
              Looks up a localized string similar to The selected watch variable is read-only..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTSelectedWorksetIsAlreadyDefault">
            <summary>
              Looks up a localized string similar to The selected workset is already the default workset..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTSetWatchSizeNotSupported">
            <summary>
              Looks up a localized string similar to The PTUDLL32 dynamic link library supplied with the project does not support programmable setting of the watch variable size. The retrieved data may have incorrect values..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTSuccessDataDictionaryCreate">
            <summary>
              Looks up a localized string similar to The XML data dictionary was successfully created..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTTableColumnMissing">
            <summary>
              Looks up a localized string similar to The conversion cannot proceed as one or more columns of the &apos;{0}&apos; table are missing. Please update the table using the equivalent table contained within the &apos;E1 Database Modifications.E1&apos; database as a template..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTUnauthorizedChangeValue">
            <summary>
              Looks up a localized string similar to You do not have sufficient privileges to modify the value of the selected watch variable..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTUnauthorizedDeleteBaselineWorkset">
            <summary>
              Looks up a localized string similar to The baseline workset cannot be deleted..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTUnauthorizedDeleteDefaultWorkset">
            <summary>
              Looks up a localized string similar to You do not have sufficient privileges to delete the default workset..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTUnauthorizedDeleteWorkset">
            <summary>
              Looks up a localized string similar to You do not have sufficient privileges to delete the selected workset..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTUnauthorizedEditBaselineWorkset">
            <summary>
              Looks up a localized string similar to The baseline workset cannot be modified..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTUnauthorizedEditDefaultWorkset">
            <summary>
              Looks up a localized string similar to You do not have sufficient privileges to modify the default workset..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTUnauthorizedEditWorkset">
            <summary>
              Looks up a localized string similar to You do not have sufficient privileges to modify the selected workset..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTUnauthorizedRenameBaselineWorkset">
            <summary>
              Looks up a localized string similar to The baseline workset cannot be renamed..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTUnauthorizedRenameWorkset">
            <summary>
              Looks up a localized string similar to You do not have sufficient privileges to rename the selected workset..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTViewDataStreamInvalidWatchIdentifiers">
            <summary>
              Looks up a localized string similar to The data dictionary parameter values of the following watch variables make it unsuitable to plot the values..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWatchSizeInvalid">
            <summary>
              Looks up a localized string similar to The PTUDLL32 dynamic link library does not support the watch size specified in the data dictionary. Please contact the system adminisrator..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWatchVariableIDNotFound">
            <summary>
              Looks up a localized string similar to The specified watch variable identifier could not be found in the data dictionary. Please contact the system administrator..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWatchVariableNotDefined">
            <summary>
              Looks up a localized string similar to The specified watch variable is not defined in the data dictionary..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetCollectionLoadFailed">
            <summary>
              Looks up a localized string similar to Unable to load the workset collection..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetCreationSuccess">
            <summary>
              Looks up a localized string similar to The workset &apos;{0}&apos; has been successfully created..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetDefineMaxExceeded">
            <summary>
              Looks up a localized string similar to Adding the selected watch variable(s) will exceed the maximum number that are allowed for this workset..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetDefineMultipleSelection">
            <summary>
              Looks up a localized string similar to This feature is not available for multiple selections..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetDeleteSuccess">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; workset has been successfully deleted..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetExists">
            <summary>
              Looks up a localized string similar to The workset &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetFileInvalidIdentifiersFound">
            <summary>
              Looks up a localized string similar to The worksets contains one or more watch identifiers that are outside the range of the current data dictionary..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetFileNewIdentifiersFound">
            <summary>
              Looks up a localized string similar to Additional watch variables have been added to the data dictionary since the worksets were configured..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetFileNotFound">
            <summary>
              Looks up a localized string similar to The workset file could not be found. Please contact the system administrator..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetFileReadOnly">
            <summary>
              Looks up a localized string similar to The workset file is read-only. Please set the attribute to read/write..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetFileSerializationError">
            <summary>
              Looks up a localized string similar to The workset file is corrupt. Please contact the system administrator..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetFileUndefinedReferencesFound">
            <summary>
              Looks up a localized string similar to The workset file contains one or more references that do not exist in the data dictionary. Please contact the system administrator..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetIdentical">
            <summary>
              Looks up a localized string similar to This workset is identical to the workset &apos;{0}&apos; and will not be saved..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetNameExists">
            <summary>
              Looks up a localized string similar to A workset of that name already exists, please use another name..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetOverrideSecuritySuccess">
            <summary>
              Looks up a localized string similar to The security level of the &apos;{0}&apos; workset has been successfully overridden..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetRenameSuccess">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; workset has been successfully renamed to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetsAllWatchSizeExceeded">
            <summary>
              Looks up a localized string similar to All  &apos;{0}&apos; worksets exceed the permitted number of watch variables. Please contact the system administrator..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetSetAsDefaultSuccess">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; workset has been successfully set as the default workset..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetsOldIdentifiersInvalid">
            <summary>
              Looks up a localized string similar to The following &apos;{0}&apos; workset(s) contain(s) one or more old identifier references that are not defined in the current data dictionary:&quot;.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetsWatchSizeExceeded">
            <summary>
              Looks up a localized string similar to The following &apos;{0}&apos; workset(s) exceed(s) the permitted number of watch variables :.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetUpdateSuccess">
            <summary>
              Looks up a localized string similar to The workset &apos;{0}&apos; has been successfully updated..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWorksetWatchSizeExceeded">
            <summary>
              Looks up a localized string similar to The workset  exceeds the permitted number of watch variables Please use the Remove button to ensure that the watch variable count is within the limits..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MBTWriteFail">
            <summary>
              Looks up a localized string similar to Unable to write the new value to the target hardware..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Modify">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MoveDown">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MoveFirst">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MoveLast">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MoveNext">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MovePrevious">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MoveUp">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.MultiCursor">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.NameBaselineWorkset">
            <summary>
              Looks up a localized string similar to Baseline.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.NameConfigureWorksetsChartRecorderMenuOption">
            <summary>
              Looks up a localized string similar to Chart Recorder.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.NameConfigureWorksetsFaultLogMenuOption">
            <summary>
              Looks up a localized string similar to Data Stream.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.NameConfigureWorksetsWatchWindowMenuOption">
            <summary>
              Looks up a localized string similar to Watch Window.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.NameNewWorksetDefault">
            <summary>
              Looks up a localized string similar to [New Workset].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.NameWorksetCopy">
            <summary>
              Looks up a localized string similar to {0} - [Copy].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.PathRelativeApplicationData">
            <summary>
              Looks up a localized string similar to \Bombardier\Portable Test Application.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.PathRelativeConfigurationFiles">
            <summary>
              Looks up a localized string similar to \Configuration Files.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.PathRelativeDiagnosticHelpFiles">
            <summary>
              Looks up a localized string similar to \Diagnostic Help Files.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.PathRelativeDocumentation">
            <summary>
              Looks up a localized string similar to \Documentation.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.PathRelativeEventLogs">
            <summary>
              Looks up a localized string similar to \Event Logs.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.PathRelativeFaultLogs">
            <summary>
              Looks up a localized string similar to \Data Streams.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.PathRelativeScreenCaptureFiles">
            <summary>
              Looks up a localized string similar to \Screen Capture Files.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.PathRelativeSimulatedFaultLogs">
            <summary>
              Looks up a localized string similar to \Simulated Data Streams.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.PathRelativeWatchFiles">
            <summary>
              Looks up a localized string similar to \Watch Files.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.PathRelativeWorksetFiles">
            <summary>
              Looks up a localized string similar to \Workset Files.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.PathUseDefault">
            <summary>
              Looks up a localized string similar to &lt;default&gt;.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Pause">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Play">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Print">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Remove">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Remove_From_List">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Rename">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Replay">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Save">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Security">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.SMCommunicationFaultReadTimeout">
            <summary>
              Looks up a localized string similar to Communication Fault - Read Timeout..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.SMConfiguringPlotterControls">
            <summary>
              Looks up a localized string similar to Configuring Plotter Controls..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.SMModifiedPlotLayout">
            <summary>
              Looks up a localized string similar to Modified Layout..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.SMPaused">
            <summary>
              Looks up a localized string similar to Paused..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.SMPlottingData">
            <summary>
              Looks up a localized string similar to Plotting Data..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.SMWorksetNameExists">
            <summary>
              Looks up a localized string similar to The current name is in use, please use another name..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.SMWorksetNameNotDefined">
            <summary>
              Looks up a localized string similar to The workset must be given a name before it can be saved..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.SMWorksetWatchCountTooSmall">
            <summary>
              Looks up a localized string similar to The workset must contain at least one watch variable before it can be saved..
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.TextCopy">
            <summary>
              Looks up a localized string similar to [Copy].
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.TextNotAvailable">
            <summary>
              Looks up a localized string similar to Not Available.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.TextUnavailable">
            <summary>
              Looks up a localized string similar to Unavailable.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.TitleReplay">
            <summary>
              Looks up a localized string similar to Replay.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Trip">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.UpLoad">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.Warning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Common.Properties.Resources.YTPlot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Common.Configuration.Lookup">
            <summary>
            A static class used to access/lookup the records contained within the primary key data tables defined in the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_WatchVariableTable">
            <summary>
            Reference to the table containing the watch variables, accessed by watch identifier.
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_WatchVariableTableByOldIdentifier">
            <summary>
            Reference to the table containing the watch variables, accessed by old watch identifier.
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_EventVariableTable">
            <summary>
            Reference to the table containing the event variables.
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_SelfTestVariableTable">
            <summary>
            Reference to the table containing the self-test variables. 
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_EventTable">
            <summary>
            Reference to the table containing the system events.
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_SelfTestTable">
            <summary>
            Reference to the table containing the self test definitions, accessed using the self test identifier.
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_SelfTestTableBySelfTestNumber">
            <summary>
            Reference to the table containing the self test definitions, accessed using the self test number value.
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_LogTable">
            <summary>
            Reference to the table containing the system event logs that are available.
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_GroupListTable">
            <summary>
             Reference to the table containing the pre-defined self test groups.
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_TestListTable">
            <summary>
             Reference to the table containing the pre-defined tests.
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_DataDictionary">
            <summary>
            Reference to the data dictionary.
            </summary>
        </member>
        <member name="F:Common.Configuration.Lookup.m_SelfTestErrorMessageList">
            <summary>
            Reference to the self test error message list.
            </summary>
        </member>
        <member name="M:Common.Configuration.Lookup.Initialize(Common.Configuration.DataDictionary)">
            <summary>
            Initializes the static properties that allow the class user to access the primary key data tables defined within the data dictionary.
            </summary>
            <param name="dataDictionary">The data dictionary containing the data tables.</param>
        </member>
        <member name="P:Common.Configuration.Lookup.WatchVariableTable">
            <summary>
            Gets the table containing the watch variables, accessed by watch identifier.
            </summary>
        </member>
        <member name="P:Common.Configuration.Lookup.WatchVariableTableByOldIdentifier">
            <summary>
            Gets the table containing the watch variables, accesed by old watch identifier.
            </summary>
        </member>
        <member name="P:Common.Configuration.Lookup.EventVariableTable">
            <summary>
            Gets the table containing the event variables.
            </summary>
        </member>
        <member name="P:Common.Configuration.Lookup.SelfTestVariableTable">
            <summary>
            Gets the table containing the self-test variables.
            </summary>
        </member>
        <member name="P:Common.Configuration.Lookup.EventTable">
            <summary>
            Gets the table containing the system events.
            </summary>
        </member>
        <member name="P:Common.Configuration.Lookup.SelfTestTable">
            <summary>
            Gets the table containing the self test definitions accessed by self test identifier.
            </summary>
        </member>
        <member name="P:Common.Configuration.Lookup.SelfTestTableBySelfTestNumber">
            <summary>
            Gets the table containing the self test definitions accessed by self test number.
            </summary>
        </member>
        <member name="P:Common.Configuration.Lookup.LogTable">
            <summary>
            Gets the table containing the system event logs that are available.
            </summary>
        </member>
        <member name="P:Common.Configuration.Lookup.GroupListTable">
            <summary>
            Gets the table containing the pre-defined self test groups.
            </summary>
        </member>
        <member name="P:Common.Configuration.Lookup.TestListTable">
            <summary>
            Gets the table containing the pre-defined tests.
            </summary>
        </member>
        <member name="P:Common.Configuration.Lookup.DataDictionary">
            <summary>
            Gets the reference to the data dictionary.
            </summary>
        </member>
        <member name="P:Common.Configuration.Lookup.SelfTestErrorMessageList">
            <summary>
            Gets the self test error message list.
            </summary>
        </member>
        <member name="T:Common.Communication.SelfTestMarshal">
            <summary>
            This class contains methods used to generate commands and data requests to the embedded target
            and process the responses. All methods are related to handling self test communication.
            </summary>
        </member>
        <member name="F:Common.Communication.SelfTestMarshal.MAX_BUFFER_SIZE">
            <summary>
            The maximum amount of self test data that can be sent from the embedded target to this application
            on any given message.
            </summary>
        </member>
        <member name="F:Common.Communication.SelfTestMarshal.m_CommDevice">
            <summary>
            The type of communication device used to interface with the embedded target (RS-232, TCP, etc.)
            </summary>
        </member>
        <member name="F:Common.Communication.SelfTestMarshal.m_PtuTargetCommunication">
            <summary>
            Object used to handle the standard embedded target communication protocol
            </summary>
        </member>
        <member name="F:Common.Communication.SelfTestMarshal.m_RxMessage">
            <summary>
            Buffer used to store data responses from the embedded target. Need to add the header
            size.
            </summary>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.#ctor(VcuComm.ICommDevice)">
            <summary>
            Constructor that must be used to create an object of this class.
            </summary>
            <param name="device">the type of communication device (RS-232, TCP, etc.)</param>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.#ctor">
            <summary>
            The default constructor is made private to force the use of the multi-argument constructor
            when creating an instance of this class.
            </summary>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.GetSelfTestSpecialMessage(System.Int16@,System.Int16@)">
            <summary>
            Get the self test special message.
            </summary>
            <param name="Result">The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            <paramref name="Reason"/> parameter applies and (3) represents an unknown error.</param>
            <param name="Reason">A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the
            <c>SELFTESTERRMESS</c> table of the data dictionary in order to determine the error message returned from the VCU.</param>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.StartSelfTestTask(System.Int16@,System.Int16@)">
            <summary>
            Start the self test task.
            </summary>
            <remarks>This request will start the self test process on the VCU. 
            process.</remarks>
            <param name="Result">The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            <paramref name="Reason"/> parameter applies and (3) represents an unknown error.</param>
            <param name="Reason">A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the
            <c>SELFTESTERRMESS</c> table of the data dictionary in order to determine the error message returned from the VCU.</param>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.ExitSelfTestTask(System.Int16@,System.Int16@)">
            <summary>
            Exit the self test task. 
            </summary>
            <remarks>This request will exit the self-test process on the VCU and turn control over to the propulsion software.</remarks>
            <param name="Result">The result of the call. A value of: (1) 1 represents success; (2) indicates that the error message defined by the 
            <paramref name="Reason"/> parameter applies and (3) represents an unknown error.</param>
            <param name="Reason">A value of 1 represents success; otherwise, the value is mapped to the <c>ERRID</c> field of the
            <c>SELFTESTERRMESS</c> table of the data dictionary in order to determine the error message returned from the VCU.</param>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.AbortSTSequence">
            <summary>
            Abort the self test sequence.
            </summary>
            <remarks>This request will stop the execution of the self-test process on the VCU and return control to the propulsion software.</remarks>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.SendOperatorAcknowledge">
            <summary>
            Send an operator acknowledge message.
            </summary>
            <remarks>This request allows the operator to move to the next step of an interactive test.</remarks>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.UpdateSTTestList(System.Int16,System.Int16[])">
            <summary>
            Update the list of individually selected self tests that are to be executed. 
            </summary>
            <remarks>This method will define the list of self-tests that are to be executed once the tester selects the execute command. The self tests
            are defined using the self test identifiers defined in the data dictionary.</remarks>
            <param name="NumberOfTests">The number of tests in the list.</param>
            <param name="TestList">A list of the self test identifiers.</param>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.RunPredefinedSTTests(System.Int16)">
            <summary>
            Run the predefined self tests associated with the specified test list identifier, these tests are defined in the data dictionary. 
            </summary>
            <param name="TestID">The test list identifier of the predefined self tests that are to be executed.</param>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.UpdateSTLoopCount(System.Int16)">
            <summary>
            Update the number of times that the selected tests are to be run.
            </summary>
            <param name="LoopCount">The number of cycles/loops of the defined tests that are to be performed.</param>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.ExecuteSTTestList(System.Int16)">
            <summary>
            Execute the self tests that are defined in the current list.
            </summary>
            <param name="TruckInformation">The truck to which the self tests apply. This does not apply on the CTA project, separate self-tests are set
            up for each truck.</param>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.UpdateSTMode(System.Int16)">
            <summary>
            Update the self test mode.
            </summary>
            <remarks>This call is used to check whether communication with the VCU has been lost.</remarks>
            <param name="NewMode">The required self test mode.</param>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.CommunicationWatchdog">
            <summary>
            Communication Watchdog while in self test.
            </summary>
            <remarks>This call is used to check whether communication with the VCU has been lost.</remarks>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="M:Common.Communication.SelfTestMarshal.GetSelfTestResult(System.Int16@,Common.Communication.MessageMode@,System.Int16@,System.Int16@,System.Int16@,Common.Communication.TruckInformation@,System.Int16@,Common.Communication.InteractiveResults_t[])">
            <summary>
            Get the self test results.
            </summary>
            <param name="ValidResult">A flag to indicate whether a valid result is available. A value of 1 indicates that a valid result is
            available; otherwise, 0.</param>
            <param name="MessageMode">The type of message returned from the VCU.</param>
            <param name="TestID">The test result identifier; the interpretation of this value is dependent upon the message mode. For detailed
            messages, this value represents the self test identifier.</param>
            <param name="TestCase">The test case number associated with the message.</param>
            <param name="TestResult">Used with the passive and logic self tests to define whether the test passed or failed. A value of 1 indicates
            that the test passed; otherwise, the test failed.</param>
            <param name="SetInfo">An enumerator to define the truck information associated with the message.</param>
            <param name="NumOfVars">The number of variables associated with the message.</param>
            <param name="InteractiveResults">Array that stores the interactive results</param>
            <returns>Success, if the communication request was successful; otherwise, an error code.</returns>
        </member>
        <member name="T:Common.Communication.EventStreamMarshal">
            <summary>
            This class contains methods used to generate commands and data requests to the embedded target
            and process the responses. All methods are related to handling fault and event log information
            as well as downloading stream data
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.EMPTY_FAULT_BUFFER">
            <summary>
            Indicates an empty fault buffer. Value: UInt32.MaxValue.
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.MAX_DL_VARIABLES">
            <summary>
            The maximum amount of variables in any given data stream. Value: 256.
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.MAX_EVENTS_PER_TASK">
            <summary>
            The maximum number of events per task. Value: 100.
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.MAX_FAULT_BUFFER_SIZE">
            <summary>
            The maximum amount of fault data that can be sent from the embedded target to this application
            on any given message when the events are downloaded. If the amount of fault data exceeds this
            size, this application requests more events to be downloaded. Value: 65,500.
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.MAX_FAULT_SIZE_BYTES">
            <summary>
            The maximum size of all attached data to any given fault. Value: 256.
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.MAX_NUM_FAULTS">
            <summary>
            The maximum number of faults that the embedded target can store and subsequently the 
            maximum amount of faults this application can process. VAlue: 1,000.
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.MAX_TASKS">
            <summary>
            The maximum number of embedded target tasks. Value: 120.
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.m_CommDevice">
            <summary>
            The type of communication device used to interface with the embedded target (RS-232, TCP, etc.).
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.m_CurrentNumberOfFaults">
            <summary>
            Maintains the current number of faults downloaded from the embedded target.
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.m_FaultDataFromTarget">
            <summary>
            Used to process fault information received from the embedded target.
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.m_FaultStorage">
            <summary>
            List of fault data retrieved from the embedded target. Since faults
            and events are usually different sizes, the size of each individual array is dynamically
            allocated based on the fault size. A list was used instead of jagged array because list members
            can be easily added but they especially can be easily removed (i.e. when the fault log has
            the max number of faults).
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.m_PtuTargetCommunication">
            <summary>
            Object used to handle the standard embedded target communication protocol.
            </summary>
        </member>
        <member name="F:Common.Communication.EventStreamMarshal.m_RxMessage">
            <summary>
            Buffer used to store data responses from the embedded target. Need to add the header
            size.
            </summary>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.#ctor(VcuComm.ICommDevice)">
            <summary>
            Constructor that must be used to create an object of this class.
            </summary>
            <param name="device">the type of communication device (RS-232, TCP, etc.)</param>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.#ctor">
            <summary>
            The default constructor is made private to force the use of the multi-argument constructor
            when creating an instance of this class.
            </summary>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.ChangeEventLog(System.Int16,System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
            <summary>
            This method requests the embedded target to change the event log that is to be monitored or 
            events / streams to be downloaded from. 
            </summary>
            <param name="NewEventLogNumber">the event log id to change to</param>
            <param name="DataRecordingRate">the data recording rate for the event log</param>
            <param name="ChangeStatus">Unknown</param>
            <param name="MaxTasks">the maximum amount of tasks for the fault log returned by the embedded target</param>
            <param name="MaxEventsPerTask">the maximum amount of events per task for the fault log returned by the embedded target</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.CheckFaultlogger(System.Int16@,System.UInt32@,System.UInt32@)">
            <summary>
            This method is invoked when polling the embedded target for any new events that have occurred while displaying 
            event screen. 
            </summary>
            <param name="PassedNumOfFaults">Will be updated with the current number of faults if the number of faults on the
            embedded target has changed since the last poll</param>
            <param name="orig_new">The most recent fault index from the embedded target</param>
            <param name="newEventsLogged">The number of new events that have been added</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.ClearEvent">
            <summary>
            Method requests the embedded target to clear the currently all fault logs
            </summary>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.GetDefaultStreamInformation(System.Int16@,System.Int16@,System.Int16@,System.Int16[],System.Int16[])">
            <summary>
            This method gets the default stream information associated with the event log. This includes the number of variables, the 
            number of samples, the sample rate and the stream variables' indexes and types.
            </summary>
            <param name="NumberOfVariables">the number of variables in the stream</param>
            <param name="NumberOfSamples">the number of data samples in the stream</param>
            <param name="SampleRate">the sample rate of the stream</param>
            <param name="VariableIndex">variable index array that is updated in this method</param>
            <param name="VariableType">variable type array that is updated in this method</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.GetEventLog(System.Int16@,System.Int16@)">
            <summary>
            NOTE: This method is currently is unused but is implemented for completeness. 
            </summary>
            <param name="CurrentEventLog"></param>
            <param name="NumberEventLogs"></param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.GetFaultHdr(System.Int16,System.Int16@,System.Int16@,System.String@,System.String@,System.Int16@,System.Boolean)">
            <summary>
            This method is invoked for every event that is downloaded from the embedded target. It extracts all of the information
            from the event header, including the faudId, taskIdm data and time and the data log id (if any) associated with the event
            </summary>
            <param name="index">the index into the jagged array of the fault</param>
            <param name="faultnum">updated with the fault id that is contained in the header</param>
            <param name="tasknum">updated with the task number that is contained in the header</param>
            <param name="Flttime">updated with the time that the fault was logged that is contained in the header</param>
            <param name="Fltdate">updated with the date that the fault was logged that is contained in the header</param>
            <param name="datalognum">updated with the datalog number that is contained in the header</param>
            <param name="Use4DigitYearCode">true if four digit year (2 byte) code is expected from the VCU</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.GetFaultVar(System.Int16,System.Int16,System.Int16[],System.Double[],System.Boolean)">
            <summary>
            Method parses through the most recent downloaded fault logs and extracts the variable and variable types for the 
            request event (FaultIndex) and populates the VariableType and VariableValue arrays.
            </summary>
            <param name="FaultIndex">The index of the fault to be parsed</param>
            <param name="NumberOfVariables">The number of variables in the fault to be parsed</param>
            <param name="VariableType">Array that is populated with the variable type for each variable included in the fault</param>
            <param name="VariableValue">Array that is populated with the variable value for each variable included in the fault</param>
            <param name="Use4DigitYearCode">true if four digit year (2 byte) code is expected from the VCU</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.GetFltFlagInfo(System.Int16[],System.Int16[],System.Int16[],System.Int16)">
            <summary>
            Get the status of the flags that control: (a) whether the event type is enabled and (b) whether the event type triggers the recoding of a
            data stream. 
            </summary>
            <param name="Valid">An array of flags that define which of the available event types are valid for the current log. The total length
            of the array is the maximum number of events per task multiplied by the maximum number of tasks and the array element corresponding to a
            particular event type is defined as: {task identifier} * {maximum number of events per task} + {event identifier}. True, indicates that
            the event type is valid; otherwise, false.</param>
            <param name="EnableFlag">An array of flags that indicate whether the event type is enabled. True, indicates that the event type is
            enabled; otherwise, false.</param>
            <param name="TriggerFlag">An array of flags that indicate whether the event type triggers the recording of a data stream.
            True, indicates that the event type triggers the recording of a data stream; otherwise false.</param>
            <param name="EntryCount">The maximum number of event types i.e. the maximum number of event types per task multiplied by the maximum
            number of tasks.</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.GetFltHistInfo(System.Int16[],System.Int16[],System.Int16[],System.Int16,System.Int16)">
            <summary>
            Get the event history associated with the current log.
            </summary>
            <param name="Valid">An array of flags that define which of the available event types are valid for the current log. The total length
            of the array is the maximum number of events per task multiplied by the maximum number of tasks and the array element corresponding to a
            particular event type is defined as: {task identifier} * {maximum number of events per task} + {event identifier}. True, indicates that
            the event type is valid; otherwise, false.</param>
            <param name="CumulativeHistoryCounts">An array that contains the cumulative number of events of each event type, not including recent
            history.</param>
            <param name="RecentHistoryCounts">An array that contains the recent number of events of each event type.</param>
            <param name="MaxTasks">The maximum number of tasks that are supported by the current event log.</param>
            <param name="MaxEventsPerTask">The maximum number of events per task that are supported by the current event log.</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.GetStream(System.Int16,System.Int32[],System.Int16@,System.Int16,System.Int16,System.Int16[])">
            <summary>
            This method gets the stream data associated with an event.
            </summary>
            <param name="StreamNumber">the stream number to be retrieved from the embedded target</param>
            <param name="DatalogBuffer">used to store the variable value </param>
            <param name="TimeOrigin">currently unused by the application</param>
            <param name="NumberOfVariables">the number of variables in the stream</param>
            <param name="NumberOfSamples">the number of time samples of each variable in the stream</param>
            <param name="VariableType">Contains the variable types of each of the stream variables</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.GetStreamInformation(System.Int16,System.Int16@,System.Int16@,System.Int16@,System.Int16[],System.Int16[])">
            <summary>
            Get the parameters associated with the specified stream.
            </summary>
            <param name="StreamNumber">The stream number.</param>
            <param name="NumberOfVariables">The number of watch variables included in the data stream.</param>
            <param name="NumberOfSamples">The number of data samples associated with the data stream.</param>
            <param name="SampleRate">The multiple of the base recording interval (60ms) at which the data is sampled.</param>
            <param name="VariableIndex">The watch identifiers of the watch variables contained within the data stream.</param>
            <param name="VariableType">The data type corresponding to each watch variable contained within the data stream.</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.InitializeEventLog">
            <summary>
            Initialize the event log. Clears all event information stored on battery backed RAM for both the maintenance and engineering logs. This
            also clears both the cumulative history, recent history columns and all data logs. This function is typically used to establish a zero
            event/fault reference base when a replacement VCU is installed in a car.
            </summary>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.LoadFaultLog(System.Int16@,System.UInt32@,System.UInt32@)">
            <summary>
            This method gets all of the logged faults/events from the embedded target's current event log. 
            </summary>
            <param name="NumberOfFaults">the number of events that are currently stored in the embedded target NVRAM (updated from embedded target response)</param>
            <param name="OldestIndex">the oldest fault index that has been logged (updated from embedded target response)</param>
            <param name="NewestIndex">the newest fault index that has been logged (updated from embedded target response)</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.SetDefaultStreamInformation(System.Int16,System.Int16,System.Int16[])">
            <summary>
            Updates the default stream information by setting what variables are to be monitored and the multiple of the
            embedded target sample rate.
            </summary>
            <param name="NumberOfVariables">the number of variables to update</param>
            <param name="SampleRate">a multiple of the embedded target sample rate </param>
            <param name="VariableIndex">an array of the watch variable indexes to update</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.SetFaultFlags(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Set the flag that controls: (a) whether the specified event type is enabled and (b) whether the event type triggers the recoding of a data
            stream. 
            </summary>
            <param name="TaskNumber">The task identifier associated with the event type.</param>
            <param name="FaultNumber">The event identifier associated with the event type.</param>
            <param name="EnableFlag">A flag to control whether the event type corresponding to the specified task and event identifiers is to be
            enabled. True, if the event type is to be enabled; otherwise, false.</param>
            <param name="DatalogFlag">A flag to control whether the event type corresponding to the specified task and event identifiers is to
            trigger the recording of a data stream. True, if the event type is to trigger the recording of a data stream; otherwise, false.</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.GetFaultData(System.UInt32,System.UInt16)">
            <summary>
            This method attempts to get all of the logged faults and subsequent attached fault log data from the 
            embedded target. If successful, all of the fault data is copied from the 
            </summary>
            <param name="FaultIndex">The starting fault index to retrieve faults from the embedded target</param>
            <param name="NumberOfFaults">The amount of faults to retrieve.</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.GetFaultIndices(System.UInt32@,System.UInt32@)">
            <summary>
            Method responsible for getting the fault indexes of the oldest and newest faults
            </summary>
            <param name="Oldest">the index of the oldest fault logged on the embedded target</param>
            <param name="Newest">the index of the newest fault logged on the embedded target</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.EnableFaultLogging(System.Boolean)">
            <summary>
            Method that sets/resets the ability for the current fault log on the embedded target to log faults. Fault/event log
            is typically disabled for a short period of time whenever fault logs are being downloaded or whenever
            polling occurs to determine if any new faults have been logged.
            </summary>
            <param name="enable">true to enable fault logging; false to disable fault logging</param>
            <returns>CommunicationError.Success (0) if all is well; otherwise another enumeration which is less than 0</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.VerifyDate(System.Byte,System.Byte,System.Byte)">
            <summary>
            Verifies Date parameters are within expected limits.
            </summary>
            <param name="month">Month</param>
            <param name="day">Day</param>
            <param name="year">Year</param>
            <returns>false if any of the date parameters passed into his function are not within the expected criteria</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.VerifyDate(System.Byte,System.Byte,System.UInt16)">
            <summary>
            Verifies Date parameters are within expected limits.
            </summary>
            <param name="month">Month</param>
            <param name="day">Day</param>
            <param name="year">Year</param>
            <returns>false if any of the date parameters passed into his function are not within the expected criteria</returns>
        </member>
        <member name="M:Common.Communication.EventStreamMarshal.VerifyTime(System.Byte,System.Byte,System.Byte)">
            <summary>
            Verifies time parameters are within expected limits. NOTE: any checks for less than 0 are superfluous
            because Byte is an unsigned entity
            </summary>
            <param name="hr">Hours</param>
            <param name="min">Minutes</param>
            <param name="sec">Seconds</param>
            <returns>false if any of the time parameters passed into his function are not within the expected criteria</returns>
        </member>
        <member name="T:Common.Communication.ChartMode">
            <summary>
            The mode of the chart recorder, used to calibrate the chart recorder.
            </summary>
        </member>
        <member name="F:Common.Communication.ChartMode.Undefined">
            <summary>
            Undefined. Value: 0
            </summary>
        </member>
        <member name="F:Common.Communication.ChartMode.DataMode">
            <summary>
            Display the values of the configured watch variables. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Communication.ChartMode.FullScaleMode">
            <summary>
            Display all chart recorder channels as full-scale. Value: 2.
            </summary>
        </member>
        <member name="F:Common.Communication.ChartMode.RampMode">
            <summary>
            Ramp all chart recorder channels between the lower and upper limits. Value: 3.
            </summary>
        </member>
        <member name="F:Common.Communication.ChartMode.ZeroOutputMode">
            <summary>
            Set all chart recorder channels to give zero output. Value: 4.
            </summary>
        </member>
        <member name="T:Common.Communication.Baud">
            <summary>
            The baud rate associated with the serial communication link.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud000110">
            <summary>
            A baud rate of 110 bits per second. Value: 110.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud000150">
            <summary>
            A baud rate of 150 bits per second. Value: 150.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud000300">
            <summary>
            A baud rate of 300 bits per second. Value: 300.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud000600">
            <summary>
            A baud rate of 600 bits per second. Value: 600.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud001200">
            <summary>
            A baud rate of 1,200 bits per second. Value: 1,200.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud002400">
            <summary>
            A baud rate of 2,400 bits per second. Value: 2,400.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud004800">
            <summary>
            A baud rate of 4,800 bits per second. Value: 4,800.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud009600">
            <summary>
            A baud rate of 9,600 bits per second. Value: 9,600.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud019200">
            <summary>
            A baud rate of 19,200 bits per second. Value: 19,200.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud038400">
            <summary>
            A baud rate of 38,400 bits per second. Value: 38,400.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud057600">
            <summary>
            A baud rate of 57,600 bits per second. Value: 57,600.
            </summary>
        </member>
        <member name="F:Common.Communication.Baud.Baud115200">
            <summary>
            A baud rate of 115,200 bits per second. Value: 115,200.
            </summary>
        </member>
        <member name="T:Common.Communication.Parity">
            <summary>
             The parity associated with the serial communication link.
            </summary>
        </member>
        <member name="F:Common.Communication.Parity.None">
            <summary>
            No parity bit. Value: 0.
            </summary>
        </member>
        <member name="F:Common.Communication.Parity.Odd">
            <summary>
            Odd parity. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Communication.Parity.Even">
            <summary>
            Even parity. Value: 2.
            </summary>
        </member>
        <member name="F:Common.Communication.Parity.Mark">
            <summary>
            The parity bit is always set. Value: 3.
            </summary>
        </member>
        <member name="F:Common.Communication.Parity.Space">
            <summary>
            The parity bit is always clear. Value: 4.
            </summary>
        </member>
        <member name="T:Common.Communication.StopBits">
            <summary>
            The number of stop bits associated with the serial communication link.
            </summary>
        </member>
        <member name="F:Common.Communication.StopBits.One">
            <summary>
            One stop bit. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Communication.StopBits.Two">
            <summary>
            Two stop bits. Value: 2.
            </summary>
        </member>
        <member name="T:Common.Communication.BitsPerCharacter">
            <summary>
            The number of bits per character associated with the serial communication link.
            </summary>
        </member>
        <member name="F:Common.Communication.BitsPerCharacter.Four">
            <summary>
            4 bits per byte. Value: 4.
            </summary>
        </member>
        <member name="F:Common.Communication.BitsPerCharacter.Five">
            <summary>
            5 bits per byte. Value: 5.
            </summary>
        </member>
        <member name="F:Common.Communication.BitsPerCharacter.Six">
            <summary>
            6 bits per byte. Value: 6.
            </summary>
        </member>
        <member name="F:Common.Communication.BitsPerCharacter.Seven">
            <summary>
            7 bits per byte. Value: 7.
            </summary>
        </member>
        <member name="F:Common.Communication.BitsPerCharacter.Eight">
            <summary>
            8 bits per byte. Value: 8.
            </summary>
        </member>
        <member name="T:Common.Communication.Protocol">
            <summary>
            The protocol used to communicate with the target hardware.
            </summary>
        </member>
        <member name="F:Common.Communication.Protocol.RS232">
            <summary>
            Standard RS232 TCMS protocol. Value: 0.
            </summary>
        </member>
        <member name="F:Common.Communication.Protocol.TCPIP">
            <summary>
            TCPIP protocol. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Communication.Protocol.UDP">
            <summary>
            UDP protocol. Value: 2.
            </summary>
        </member>
        <member name="F:Common.Communication.Protocol.SIMULATOR">
            <summary>
            Simulate VCU data. Value: 3.
            </summary>
        </member>
        <member name="T:Common.Communication.PortType">
            <summary>
            The type of communication port e.g. COM; VCP; USB or Ethernet.
            </summary>
        </member>
        <member name="F:Common.Communication.PortType.Undefined">
            <summary>
            Undefined. Value: 0.
            </summary>
        </member>
        <member name="F:Common.Communication.PortType.COM">
            <summary>
            Physical RS232 communication COM port. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Communication.PortType.VCP">
            <summary>
            Virtual RS232 communication COM port. Value: 2.
            </summary>
            <remarks>Each USB to serial converter sets up a virtual communications COM port.</remarks>
        </member>
        <member name="F:Common.Communication.PortType.USB">
            <summary>
            Direct access to the USB communication port using the FTD2XX.DLL interface. Value: 3.
            </summary>
        </member>
        <member name="F:Common.Communication.PortType.ETHERNET">
            <summary>
            Ethernet communication interface. Value: 4.
            </summary>
        </member>
        <member name="T:Common.Communication.AttributeFlags">
            <summary>
            The attribute flags associated with a watch variable.
            </summary>
        </member>
        <member name="F:Common.Communication.AttributeFlags.PTUD_BBRAM">
            <summary>
            The watch variable is stored in battery backed RAM. Value: 128.
            </summary>
        </member>
        <member name="F:Common.Communication.AttributeFlags.PTUD_DESC1">
            <summary>
            Spare. Value: 64.
            </summary>
        </member>
        <member name="F:Common.Communication.AttributeFlags.PTUD_DESC2">
            <summary>
            Spare. Value: 32.
            </summary>
        </member>
        <member name="F:Common.Communication.AttributeFlags.PTUD_DESC3">
            <summary>
            Spare. Value: 16.
            </summary>
        </member>
        <member name="F:Common.Communication.AttributeFlags.PTUD_PSSWD1">
            <summary>
            The user must have level 1 security clearance in order to modify the watch variable. Value: 8.
            </summary>
        </member>
        <member name="F:Common.Communication.AttributeFlags.PTUD_PSSWD2">
            <summary>
            The user must have level 2 security clearance in order to modify the watch variable. VAlue: 4.
            </summary>
        </member>
        <member name="F:Common.Communication.AttributeFlags.PTUD_READONLY">
            <summary>
            The watch variable is read-only. Value: 2.
            </summary>
        </member>
        <member name="F:Common.Communication.AttributeFlags.PTUD_NOTUSED">
            <summary>
            This flag is not used and should always be clear. Value: 1.
            </summary>
        </member>
        <member name="T:Common.Communication.CommunicationError">
            <summary>
            The error returns from the communication functions associated with the PTUDLL32 dynamic link library.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationError.SystemException">
            <summary>
            A system exception was thrown.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationError.Success">
            <summary>
            The function call was successful i.e. there were no errors. Value: 0.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationError.PortOpen">
            <summary>
            The port is already open. Value: -1.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationError.NoHardware">
            <summary>
            Cannot find the required hardware. Value: -2.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationError.TimeOut">
            <summary>
            There was no reply within the timeout period. Value: -10.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationError.BadResponse">
            <summary>
            The response packet was invalid. Value: -11.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationError.ChecksumError">
            <summary>
            There was a checksum error. Value: -12.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationError.BadRequest">
            <summary>
            The request packet was invalid. Value: -13.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationError.UnknownError">
            <summary>
            Unknown error. Value: -100.
            </summary>
        </member>
        <member name="T:Common.Communication.WatchElement_t">
            <summary>
            Structure containing the fields of an individual watch element.
            </summary>
        </member>
        <member name="F:Common.Communication.WatchElement_t.WatchIdentifier">
            <summary>
            The watch identifier of the watch variable that is mapped to the watch element.
            </summary>
        </member>
        <member name="F:Common.Communication.WatchElement_t.Value">
            <summary>
            The current value of the watch variable that is mapped to the watch element.
            </summary>
        </member>
        <member name="F:Common.Communication.WatchElement_t.DataType">
            <summary>
            The current data type of the watch variable that is mapped to the watch element.
            </summary>
        </member>
        <member name="F:Common.Communication.WatchElement_t.ElementIndex">
            <summary>
            The index of the watch element.
            </summary>
        </member>
        <member name="T:Common.Communication.TargetConfiguration_t">
            <summary>
            structure used to store the configuration information associated with the target hardware.
            </summary>
        </member>
        <member name="F:Common.Communication.TargetConfiguration_t.Version">
            <summary>
            The version number of the embedded software.
            </summary>
        </member>
        <member name="F:Common.Communication.TargetConfiguration_t.CarIdentifier">
            <summary>
            The car identifier.
            </summary>
        </member>
        <member name="F:Common.Communication.TargetConfiguration_t.SubSystemName">
            <summary>
            The name of the sub-system.
            </summary>
        </member>
        <member name="F:Common.Communication.TargetConfiguration_t.ProjectIdentifier">
            <summary>
            The project identifier associated with the embedded software.
            </summary>
        </member>
        <member name="F:Common.Communication.TargetConfiguration_t.ConversionMask">
            <summary>
            The conversion mask.
            </summary>
        </member>
        <member name="T:Common.Communication.CommunicationSetting_t">
            <summary>
            Structure used to define the communication settings.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationSetting_t.Protocol">
            <summary>
            The protocol associated with the port.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationSetting_t.PortIdentifier">
            <summary>
            The port identifier associated with the port, for physical and virtual COM ports this takes the form: 1, 2, 3 ... etc.
            </summary>
            <remarks>This parameter is unique to the PTUDLL32 dynamic link library.</remarks>
        </member>
        <member name="F:Common.Communication.CommunicationSetting_t.Port">
            <summary>
            The port definition.
            </summary>
            <remarks>This is derived from the registry.</remarks>
        </member>
        <member name="F:Common.Communication.CommunicationSetting_t.SerialCommunicationParameters">
            <summary>
            The serial communication parameters i.e. baud rate, bits per character, parity and stop bits.
            </summary>
            <remarks>Only applicable to serial communication ports.</remarks>
        </member>
        <member name="T:Common.Communication.Port_t">
            <summary>
            Structure used to define the communication port.
            </summary>
        </member>
        <member name="F:Common.Communication.Port_t.Name">
            <summary>
            The name of the port
            </summary>
        </member>
        <member name="F:Common.Communication.Port_t.FullSpecification">
            <summary>
            The full specification for the comms port e.g. Device\Port21 - COM21.
            </summary>
        </member>
        <member name="F:Common.Communication.Port_t.Type">
            <summary>
            The communication port type.
            </summary>
        </member>
        <member name="M:Common.Communication.Port_t.ToString">
            <summary>
            Overrides the ToString() method to ensure that the name of the port is returned.
            </summary>
            <returns>The name of the communications device.</returns>
        </member>
        <member name="T:Common.Communication.SerialCommunicationParameters_t">
            <summary>
            Structure used to define the serial communication port parameters i.e. baud rate, parity, bits per character and stop bits.
            </summary>
        </member>
        <member name="F:Common.Communication.SerialCommunicationParameters_t.BaudRate">
            <summary>
            The baud rate associated with the serial communication port.
            </summary>
            <remarks>Only applicable to serial communication ports.</remarks>
        </member>
        <member name="F:Common.Communication.SerialCommunicationParameters_t.Parity">
            <summary>
            The parity associated with the serial communication port.
            </summary>
            <remarks>Only applicable to serial communication ports.</remarks>
        </member>
        <member name="F:Common.Communication.SerialCommunicationParameters_t.BitsPerCharacter">
            <summary>
            The number of data bits associated with the serial communication port.
            </summary>
            <remarks>Only applicable to serial communication ports.</remarks>
        </member>
        <member name="F:Common.Communication.SerialCommunicationParameters_t.StopBits">
            <summary>
            The number of stop bits associated with the serial communication port.
            </summary>
            <remarks>Only applicable to serial communication ports.</remarks>
        </member>
        <member name="M:Common.Communication.SerialCommunicationParameters_t.SetToDefault">
            <summary>
            Sets the serial communication parameters to their default values.
            </summary>
        </member>
        <member name="T:Common.Communication.CommunicationParent">
            <summary>
            Base class to manage communication with the target hardware.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParent.ForceUpdateTrue">
            <summary>
            The parameter value required for the UpdateWatchElements() function of the PTUDLL32 dynamic link library to force an update of all watch
            elements. Value: 1.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParent.ForceUpdateFalse">
            <summary>
            The parameter value required for the UpdateWatchElements() function of the PTUDLL32 dynamic link library not to force an update of all
            watch elements. Value: 0.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParent.DefaultBaud">
            <summary>
            The default baud rate of the serial communication link. Value: Baud.Baud019200.
            </summary>
            <remarks>Only applicable to serial communication.</remarks>
        </member>
        <member name="F:Common.Communication.CommunicationParent.DefaultParity">
            <summary>
            The default parity of the serial communication link. Value: Parity.None.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParent.DefaultBitsPerCharacter">
            <summary>
            The default number of bits per character of the serial communication link. Value: BitsPerCharacter.Eight.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParent.DefaultStopBits">
            <summary>
            The default number of stop bits of the serial communication link. Value: StopBits.One.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParent.DefaultMutexWaitDurationMs">
            <summary>
            The default number of ms to wait before releasing the communication mutex. Value: 20,000.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParent.m_MutexCommuncationInterface">
            <summary>
            Mutex to control read/write access to the <c>CommunicationInterface</c> used to communicate with the VCU.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParent.m_Random">
            <summary>
            Random number generator.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParent.m_WatchElements">
            <summary>
            A table of the current watch elements, i.e. those watch variables that are currently monitored by the target hardware, mapped by element
            index.
            </summary>
            <remarks>Each watch element contains the: watch identifier; corresponding data type and current value of the watch variable being
            monitored.</remarks>
        </member>
        <member name="F:Common.Communication.CommunicationParent.m_CommunicationSetting">
            <summary>
            The communication settings associated with the selected target.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParent.m_CommDevice">
            <summary>
            The communication device that is used to communicate with the embedded target PTU. Currently supported
            devices are RS-232 and TCP.
            </summary>
        </member>
        <member name="F:Common.Communication.CommunicationParent.m_WatchClockMarshal">
            <summary>
            Object that is used to call methods that gather or send information pertaining to watch variables
            and the real time clock on the embedded PTU target.
            </summary>
        </member>
        <member name="M:Common.Communication.CommunicationParent.#ctor">
            <summary>
            Initialize a new instance of the class and set the function delegates, properties and member variables.
            </summary>
        </member>
        <member name="M:Common.Communication.CommunicationParent.#ctor(Common.Communication.CommunicationSetting_t)">
            <summary>
            Initialize a new instance of the class and set the function delegates, properties and member variables.
            </summary>
            <param name="communicationSetting">The communication setting that is to be used to initialize the <c>CommunicationSetting</c>
            property.</param>
        </member>
        <member name="M:Common.Communication.CommunicationParent.#ctor(Common.Communication.ICommunicationParent)">
            <summary>
            Initialize a new instance of the class and set the function delegates, properties and member variables.
            </summary>
            <param name="communicationInterface">Reference to the communication interface containing the properties and member variables that are to
            be used to initialize the class.</param>
        </member>
        <member name="M:Common.Communication.CommunicationParent.InitCommunication(Common.Communication.CommunicationSetting_t)">
            <summary>
            Initialize the communication port.
            </summary>
            <param name="communicationsSetting">The communication settings.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.InitCommunication() method is
            not CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParent.CloseCommunication(Common.Communication.Protocol)">
            <summary>
            Close the communication port.
            </summary>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.CloseCommunication() method is
            not CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParent.GetEmbeddedInformation(Common.Communication.TargetConfiguration_t@)">
            <summary>
            Get the embedded software information.
            </summary>
            <param name="targetConfiguration">The target configuration information retrieved from the target.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetEmbeddedInformation() method
            is not CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParent.GetChartMode">
            <summary>
            Get the mode of the chart recorder.
            </summary>
            <returns>The mode of the chart recorder: ramp, zero-output, full-scale, data.</returns>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.GetChartMode() method is
            not CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParent.SetChartMode(Common.Communication.ChartMode)">
            <summary>
            Set the mode of the chart recorder.
            </summary>
            <param name="chartMode">The required mode of the chart recorder.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from the call to the PTUDLL32.SetChartMode() method is
            not CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParent.SetChartIndex(System.Int16,System.Int16)">
            <summary>
            Assign the specified watch variable to the specified chart recorder channel index.
            </summary>
            <param name="channelIndex">The chart recorder channel index.</param>
            <param name="watchIdentifier">The watch identifier of the watch variable that is to be assigned to the channel.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from a call to the PTUDLL32.SetChartIndex() method is not
            CommunicationError.Success.</exception>
        </member>
        <member name="M:Common.Communication.CommunicationParent.SetChartScale(System.Int16,System.Double,System.Double)">
            <summary>
            Set the chart scaling for the specified watch variable.
            </summary>
            <param name="watchIdentifier">The watch identifier of the watch variables that is to be scaled.</param>
            <param name="maxChartScale">The watch variable engineering value associated with the maximum Y axis value.</param>
            <param name="minChartScale">The watch variable engineering value associated with the minimum Y axis value.</param>
            <exception cref="T:Common.Communication.CommunicationException">Thrown if the error code returned from a call to the PTUDLL32.SetChartScale() method is
            not CommunicationError.Success.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="watchIdentifier"/> does not exist in the current
            data dictionary.</exception>"
        </member>
        <member name="M:Common.Communication.CommunicationParent.DownloadChartRecorderWorkset(Common.Configuration.Workset_t)">
            <summary>
            Download the specified chart recorder workset.
            </summary>
            <param name="workset">The workset that is to be downloaded to the VCU.</param>
        </member>
        <member name="P:Common.Communication.CommunicationParent.CommunicationSetting">
            <summary>
            Gets or sets the communication settings associated with the selected target.
            </summary>
        </member>
        <member name="P:Common.Communication.CommunicationParent.CommDevice">
            <summary>
            Gets the communication device used to communicate with the selected VCU.
            </summary>
        </member>
        <member name="P:Common.Communication.CommunicationParent.WatchClockMarshall">
            <summary>
            Used to access interface methods to the embedded target that access and/or change the 
            watch variables and the real time clock.
            </summary>
        </member>
    </members>
</doc>
